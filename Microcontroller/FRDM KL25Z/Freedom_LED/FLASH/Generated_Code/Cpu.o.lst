   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 2
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"Cpu.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.Cpu_INT_NMIInterrupt,"ax",%progbits
  18              		.align	2
  19              		.global	Cpu_INT_NMIInterrupt
  20              		.code	16
  21              		.thumb_func
  23              	Cpu_INT_NMIInterrupt:
  24              	.LFB0:
  25              		.file 1 "../Generated_Code/Cpu.c"
   1:../Generated_Code/Cpu.c **** /** ###################################################################
   2:../Generated_Code/Cpu.c **** **     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
   3:../Generated_Code/Cpu.c **** **     Filename    : Cpu.c
   4:../Generated_Code/Cpu.c **** **     Project     : ProcessorExpert
   5:../Generated_Code/Cpu.c **** **     Processor   : MKL25Z128VLK4
   6:../Generated_Code/Cpu.c **** **     Component   : MKL25Z128LK4
   7:../Generated_Code/Cpu.c **** **     Version     : Component 01.025, Driver 01.04, CPU db: 3.00.000
   8:../Generated_Code/Cpu.c **** **     Datasheet   : KL25P80M48SF0RM, Rev.3, Sep 2012
   9:../Generated_Code/Cpu.c **** **     Compiler    : GNU C Compiler
  10:../Generated_Code/Cpu.c **** **     Date/Time   : 2012-12-25, 17:10, # CodeGen: 10
  11:../Generated_Code/Cpu.c **** **     Abstract    :
  12:../Generated_Code/Cpu.c **** **
  13:../Generated_Code/Cpu.c **** **     Settings    :
  14:../Generated_Code/Cpu.c **** **
  15:../Generated_Code/Cpu.c **** **     Contents    :
  16:../Generated_Code/Cpu.c **** **         No public methods
  17:../Generated_Code/Cpu.c **** **
  18:../Generated_Code/Cpu.c **** **     Copyright : 1997 - 2012 Freescale, Inc. All Rights Reserved.
  19:../Generated_Code/Cpu.c **** **     
  20:../Generated_Code/Cpu.c **** **     http      : www.freescale.com
  21:../Generated_Code/Cpu.c **** **     mail      : support@freescale.com
  22:../Generated_Code/Cpu.c **** ** ###################################################################*/
  23:../Generated_Code/Cpu.c **** 
  24:../Generated_Code/Cpu.c **** /* MODULE Cpu. */
  25:../Generated_Code/Cpu.c **** #include "LEDR.h"
  26:../Generated_Code/Cpu.c **** #include "LEDpin3.h"
  27:../Generated_Code/Cpu.c **** #include "BitIoLdd3.h"
  28:../Generated_Code/Cpu.c **** #include "LEDG.h"
  29:../Generated_Code/Cpu.c **** #include "LEDpin2.h"
  30:../Generated_Code/Cpu.c **** #include "BitIoLdd2.h"
  31:../Generated_Code/Cpu.c **** #include "LEDB.h"
  32:../Generated_Code/Cpu.c **** #include "LEDpin1.h"
  33:../Generated_Code/Cpu.c **** #include "BitIoLdd1.h"
  34:../Generated_Code/Cpu.c **** #include "WAIT1.h"
  35:../Generated_Code/Cpu.c **** #include "PE_Types.h"
  36:../Generated_Code/Cpu.c **** #include "PE_Error.h"
  37:../Generated_Code/Cpu.c **** #include "PE_Const.h"
  38:../Generated_Code/Cpu.c **** #include "IO_Map.h"
  39:../Generated_Code/Cpu.c **** #include "Events.h"
  40:../Generated_Code/Cpu.c **** #include "Cpu.h"
  41:../Generated_Code/Cpu.c **** 
  42:../Generated_Code/Cpu.c **** /* Global variables */
  43:../Generated_Code/Cpu.c **** volatile uint8_t SR_reg;               /* Current value of the FAULTMASK register */
  44:../Generated_Code/Cpu.c **** volatile uint8_t SR_lock = 0x00U;      /* Lock */
  45:../Generated_Code/Cpu.c **** 
  46:../Generated_Code/Cpu.c **** 
  47:../Generated_Code/Cpu.c **** /*
  48:../Generated_Code/Cpu.c **** ** ===================================================================
  49:../Generated_Code/Cpu.c **** **     Method      :  Cpu_INT_NMIInterrupt (component MKL25Z128LK4)
  50:../Generated_Code/Cpu.c **** **
  51:../Generated_Code/Cpu.c **** **     Description :
  52:../Generated_Code/Cpu.c **** **         This ISR services the Non Maskable Interrupt interrupt.
  53:../Generated_Code/Cpu.c **** **         This method is internal. It is used by Processor Expert only.
  54:../Generated_Code/Cpu.c **** ** ===================================================================
  55:../Generated_Code/Cpu.c **** */
  56:../Generated_Code/Cpu.c **** PE_ISR(Cpu_INT_NMIInterrupt)
  57:../Generated_Code/Cpu.c **** {
  26              		.loc 1 57 0
  27              		.cfi_startproc
  28 0000 08B5     		push	{r3, lr}
  29              	.LCFI0:
  30              		.cfi_def_cfa_offset 8
  31              		.cfi_offset 3, -8
  32              		.cfi_offset 14, -4
  58:../Generated_Code/Cpu.c ****   Cpu_OnNMIINT();
  33              		.loc 1 58 0
  34 0002 FFF7FEFF 		bl	Cpu_OnNMIINT
  35              	.LVL0:
  59:../Generated_Code/Cpu.c **** }
  36              		.loc 1 59 0
  37              		@ sp needed for prologue
  38 0006 08BD     		pop	{r3, pc}
  39              		.cfi_endproc
  40              	.LFE0:
  42              		.section	.text.Cpu_Interrupt,"ax",%progbits
  43              		.align	2
  44              		.global	Cpu_Interrupt
  45              		.code	16
  46              		.thumb_func
  48              	Cpu_Interrupt:
  49              	.LFB1:
  60:../Generated_Code/Cpu.c **** 
  61:../Generated_Code/Cpu.c **** /*
  62:../Generated_Code/Cpu.c **** ** ===================================================================
  63:../Generated_Code/Cpu.c **** **     Method      :  Cpu_Cpu_Interrupt (component MKL25Z128LK4)
  64:../Generated_Code/Cpu.c **** **
  65:../Generated_Code/Cpu.c **** **     Description :
  66:../Generated_Code/Cpu.c **** **         This ISR services an unused interrupt/exception vector.
  67:../Generated_Code/Cpu.c **** **         This method is internal. It is used by Processor Expert only.
  68:../Generated_Code/Cpu.c **** ** ===================================================================
  69:../Generated_Code/Cpu.c **** */
  70:../Generated_Code/Cpu.c **** PE_ISR(Cpu_Interrupt)
  71:../Generated_Code/Cpu.c **** {
  50              		.loc 1 71 0
  51              		.cfi_startproc
  72:../Generated_Code/Cpu.c ****   /* This code can be changed using the CPU component property "Build Options / Unhandled int code"
  73:../Generated_Code/Cpu.c ****   PE_DEBUGHALT();
  52              		.loc 1 73 0
  53              	@ 73 "../Generated_Code/Cpu.c" 1
  54 0000 FFBE     		BKPT 255
  55              	@ 0 "" 2
  74:../Generated_Code/Cpu.c **** }
  56              		.loc 1 74 0
  57              		.code	16
  58              		@ sp needed for prologue
  59 0002 7047     		bx	lr
  60              		.cfi_endproc
  61              	.LFE1:
  63              		.section	.text.__init_hardware,"ax",%progbits
  64              		.align	2
  65              		.global	__init_hardware
  66              		.code	16
  67              		.thumb_func
  69              	__init_hardware:
  70              	.LFB2:
  75:../Generated_Code/Cpu.c **** 
  76:../Generated_Code/Cpu.c **** 
  77:../Generated_Code/Cpu.c **** /*** !!! Here you can place your own code using property "User data declarations" on the build opti
  78:../Generated_Code/Cpu.c **** 
  79:../Generated_Code/Cpu.c **** /*lint -esym(765,__init_hardware) Disable MISRA rule (8.10) checking for symbols (__init_hardware).
  80:../Generated_Code/Cpu.c **** /*lint -esym(765,Cpu_Interrupt) Disable MISRA rule (8.10) checking for symbols (Cpu_Interrupt). */
  81:../Generated_Code/Cpu.c **** void __init_hardware(void)
  82:../Generated_Code/Cpu.c **** {
  71              		.loc 1 82 0
  72              		.cfi_startproc
  83:../Generated_Code/Cpu.c **** 
  84:../Generated_Code/Cpu.c ****   /*** !!! Here you can place your own code before PE initialization using property "User code befo
  85:../Generated_Code/Cpu.c **** 
  86:../Generated_Code/Cpu.c ****   /*** ### MKL25Z128VLK4 "Cpu" init code ... ***/
  87:../Generated_Code/Cpu.c ****   /*** PE initialization code after reset ***/
  88:../Generated_Code/Cpu.c ****   SCB_VTOR = (uint32_t)(&__vect_table); /* Set the interrupt vector table position */
  73              		.loc 1 88 0
  74 0000 1C4B     		ldr	r3, .L13
  75 0002 1D4A     		ldr	r2, .L13+4
  76 0004 1D49     		ldr	r1, .L13+8
  82:../Generated_Code/Cpu.c **** {
  77              		.loc 1 82 0
  78 0006 10B5     		push	{r4, lr}
  79              	.LCFI1:
  80              		.cfi_def_cfa_offset 8
  81              		.cfi_offset 4, -8
  82              		.cfi_offset 14, -4
  89:../Generated_Code/Cpu.c ****   /* Disable the WDOG module */
  90:../Generated_Code/Cpu.c ****   /* SIM_COPC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0
  91:../Generated_Code/Cpu.c ****   SIM_COPC = 0x00U;                                                   
  83              		.loc 1 91 0
  84 0008 8820     		mov	r0, #136
  88:../Generated_Code/Cpu.c ****   SCB_VTOR = (uint32_t)(&__vect_table); /* Set the interrupt vector table position */
  85              		.loc 1 88 0
  86 000a D150     		str	r1, [r2, r3]
  87              		.loc 1 91 0
  88 000c 1C4B     		ldr	r3, .L13+12
  89 000e 0022     		mov	r2, #0
  90 0010 4401     		lsl	r4, r0, #5
  92:../Generated_Code/Cpu.c ****   /* System clock initialization */
  93:../Generated_Code/Cpu.c ****   /* SIM_SCGC5: PORTD=1,PORTB=1,PORTA=1 */
  94:../Generated_Code/Cpu.c ****   SIM_SCGC5 |= SIM_SCGC5_PORTD_MASK |
  91              		.loc 1 94 0
  92 0012 1C49     		ldr	r1, .L13+16
  91:../Generated_Code/Cpu.c ****   SIM_COPC = 0x00U;                                                   
  93              		.loc 1 91 0
  94 0014 1A51     		str	r2, [r3, r4]
  95              		.loc 1 94 0
  96 0016 5C58     		ldr	r4, [r3, r1]
  97 0018 B020     		mov	r0, #176
  98 001a 4001     		lsl	r0, r0, #5
  99 001c 2043     		orr	r0, r4
 100 001e 5850     		str	r0, [r3, r1]
  95:../Generated_Code/Cpu.c ****                SIM_SCGC5_PORTB_MASK |
  96:../Generated_Code/Cpu.c ****                SIM_SCGC5_PORTA_MASK;   /* Enable clock gate for ports to enable pin routing */
  97:../Generated_Code/Cpu.c ****   /* SIM_CLKDIV1: OUTDIV1=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,OUTDIV4=0,??=0,??=0,??=0,?
  98:../Generated_Code/Cpu.c ****   SIM_CLKDIV1 = 0x00U;                 /* Update system prescalers */
 101              		.loc 1 98 0
 102 0020 1949     		ldr	r1, .L13+20
  99:../Generated_Code/Cpu.c ****   /* SIM_SOPT2: PLLFLLSEL=0 */
 100:../Generated_Code/Cpu.c ****   SIM_SOPT2 &= (uint32_t)~(uint32_t)(SIM_SOPT2_PLLFLLSEL_MASK); /* Select FLL as a clock source for
 103              		.loc 1 100 0
 104 0022 1A48     		ldr	r0, .L13+24
  98:../Generated_Code/Cpu.c ****   SIM_CLKDIV1 = 0x00U;                 /* Update system prescalers */
 105              		.loc 1 98 0
 106 0024 5A50     		str	r2, [r3, r1]
 107              		.loc 1 100 0
 108 0026 1A49     		ldr	r1, .L13+28
 109 0028 5C58     		ldr	r4, [r3, r1]
 110 002a 2040     		and	r0, r4
 111 002c 5850     		str	r0, [r3, r1]
 101:../Generated_Code/Cpu.c ****   /* SIM_SOPT1: OSC32KSEL=0 */
 102:../Generated_Code/Cpu.c ****   SIM_SOPT1 &= (uint32_t)~(uint32_t)(SIM_SOPT1_OSC32KSEL(0x03)); /* System oscillator drives 32 kHz
 112              		.loc 1 102 0
 113 002e 1C68     		ldr	r4, [r3]
 114 0030 1848     		ldr	r0, .L13+32
 115 0032 2040     		and	r0, r4
 116 0034 1860     		str	r0, [r3]
 103:../Generated_Code/Cpu.c ****   /* SIM_SOPT2: TPMSRC=1 */
 104:../Generated_Code/Cpu.c ****   SIM_SOPT2 = (uint32_t)((SIM_SOPT2 & (uint32_t)~(uint32_t)(
 117              		.loc 1 104 0
 118 0036 5C58     		ldr	r4, [r3, r1]
 119 0038 1748     		ldr	r0, .L13+36
 120 003a 2040     		and	r0, r4
 121 003c 8024     		mov	r4, #128
 122 003e 6404     		lsl	r4, r4, #17
 123 0040 2043     		orr	r0, r4
 124 0042 5850     		str	r0, [r3, r1]
 105:../Generated_Code/Cpu.c ****                SIM_SOPT2_TPMSRC(0x02)
 106:../Generated_Code/Cpu.c ****               )) | (uint32_t)(
 107:../Generated_Code/Cpu.c ****                SIM_SOPT2_TPMSRC(0x01)
 108:../Generated_Code/Cpu.c ****               ));                      /* Set the TPM clock */
 109:../Generated_Code/Cpu.c ****   /* Switch to FEI Mode */
 110:../Generated_Code/Cpu.c ****   /* MCG_C1: CLKS=0,FRDIV=0,IREFS=1,IRCLKEN=1,IREFSTEN=0 */
 111:../Generated_Code/Cpu.c ****   MCG_C1 = (MCG_C1_IREFS_MASK | MCG_C1_IRCLKEN_MASK);                                              
 125              		.loc 1 111 0
 126 0044 1549     		ldr	r1, .L13+40
 127 0046 0623     		mov	r3, #6
 128 0048 0B70     		strb	r3, [r1]
 112:../Generated_Code/Cpu.c ****   /* MCG_C2: LOCRE0=0,??=0,RANGE0=0,HGO0=0,EREFS0=0,LP=0,IRCS=0 */
 113:../Generated_Code/Cpu.c ****   MCG_C2 = 0x00U;                                                   
 129              		.loc 1 113 0
 130 004a 4A70     		strb	r2, [r1, #1]
 114:../Generated_Code/Cpu.c ****   /* MCG_C4: DMX32=0,DRST_DRS=0 */
 115:../Generated_Code/Cpu.c ****   MCG_C4 &= (uint8_t)~(uint8_t)((MCG_C4_DMX32_MASK | MCG_C4_DRST_DRS(0x03)));                      
 131              		.loc 1 115 0
 132 004c CC78     		ldrb	r4, [r1, #3]
 133 004e 1F20     		mov	r0, #31
 134 0050 0440     		and	r4, r0
 116:../Generated_Code/Cpu.c ****   /* OSC0_CR: ERCLKEN=1,??=0,EREFSTEN=0,??=0,SC2P=0,SC4P=0,SC8P=0,SC16P=0 */
 117:../Generated_Code/Cpu.c ****   OSC0_CR = OSC_CR_ERCLKEN_MASK;                                                   
 135              		.loc 1 117 0
 136 0052 134B     		ldr	r3, .L13+44
 115:../Generated_Code/Cpu.c ****   MCG_C4 &= (uint8_t)~(uint8_t)((MCG_C4_DMX32_MASK | MCG_C4_DRST_DRS(0x03)));                      
 137              		.loc 1 115 0
 138 0054 CC70     		strb	r4, [r1, #3]
 139              		.loc 1 117 0
 140 0056 8024     		mov	r4, #128
 141 0058 1C70     		strb	r4, [r3]
 118:../Generated_Code/Cpu.c ****   /* MCG_C5: ??=0,PLLCLKEN0=0,PLLSTEN0=0,PRDIV0=0 */
 119:../Generated_Code/Cpu.c ****   MCG_C5 = 0x00U;                                                   
 142              		.loc 1 119 0
 143 005a 0A71     		strb	r2, [r1, #4]
 120:../Generated_Code/Cpu.c ****   /* MCG_C6: LOLIE0=0,PLLS=0,CME0=0,VDIV0=0 */
 121:../Generated_Code/Cpu.c ****   MCG_C6 = 0x00U;                                                   
 144              		.loc 1 121 0
 145 005c 4A71     		strb	r2, [r1, #5]
 122:../Generated_Code/Cpu.c ****   while((MCG_S & MCG_S_IREFST_MASK) == 0x00U) { /* Check that the source of the FLL reference clock
 146              		.loc 1 122 0
 147 005e 1022     		mov	r2, #16
 148              	.L4:
 149              		.loc 1 122 0 is_stmt 0
 150 0060 8879     		ldrb	r0, [r1, #6]
 151 0062 0242     		tst	r2, r0
 152 0064 FCD0     		beq	.L4
 123:../Generated_Code/Cpu.c ****   }
 124:../Generated_Code/Cpu.c ****   while((MCG_S & 0x0CU) != 0x00U) {    /* Wait until output of the FLL is selected */
 153              		.loc 1 124 0 is_stmt 1
 154 0066 0D49     		ldr	r1, .L13+40
 155 0068 0C24     		mov	r4, #12
 156              	.L8:
 157 006a 8B79     		ldrb	r3, [r1, #6]
 158 006c 1C42     		tst	r4, r3
 159 006e FCD1     		bne	.L8
 125:../Generated_Code/Cpu.c ****   }
 126:../Generated_Code/Cpu.c ****   /*** End of PE initialization code after reset ***/
 127:../Generated_Code/Cpu.c **** 
 128:../Generated_Code/Cpu.c ****   /*** !!! Here you can place your own code after PE initialization using property "User code after
 129:../Generated_Code/Cpu.c **** 
 130:../Generated_Code/Cpu.c **** }
 160              		.loc 1 130 0
 161              		@ sp needed for prologue
 162 0070 10BD     		pop	{r4, pc}
 163              	.L14:
 164 0072 C046     		.align	2
 165              	.L13:
 166 0074 080D0000 		.word	3336
 167 0078 00E000E0 		.word	-536813568
 168 007c 00000000 		.word	__vect_table
 169 0080 00700440 		.word	1074032640
 170 0084 38100000 		.word	4152
 171 0088 44100000 		.word	4164
 172 008c FFFFFEFF 		.word	-65537
 173 0090 04100000 		.word	4100
 174 0094 FFFFF3FF 		.word	-786433
 175 0098 FFFFFFFC 		.word	-50331649
 176 009c 00400640 		.word	1074151424
 177 00a0 00500640 		.word	1074155520
 178              		.cfi_endproc
 179              	.LFE2:
 181              		.section	.text.PE_low_level_init,"ax",%progbits
 182              		.align	2
 183              		.global	PE_low_level_init
 184              		.code	16
 185              		.thumb_func
 187              	PE_low_level_init:
 188              	.LFB3:
 131:../Generated_Code/Cpu.c **** 
 132:../Generated_Code/Cpu.c **** 
 133:../Generated_Code/Cpu.c **** 
 134:../Generated_Code/Cpu.c **** /*
 135:../Generated_Code/Cpu.c **** ** ===================================================================
 136:../Generated_Code/Cpu.c **** **     Method      :  PE_low_level_init (component MKL25Z128LK4)
 137:../Generated_Code/Cpu.c **** **
 138:../Generated_Code/Cpu.c **** **     Description :
 139:../Generated_Code/Cpu.c **** **         Initializes beans and provides common register initialization. 
 140:../Generated_Code/Cpu.c **** **         The method is called automatically as a part of the 
 141:../Generated_Code/Cpu.c **** **         application initialization code.
 142:../Generated_Code/Cpu.c **** **         This method is internal. It is used by Processor Expert only.
 143:../Generated_Code/Cpu.c **** ** ===================================================================
 144:../Generated_Code/Cpu.c **** */
 145:../Generated_Code/Cpu.c **** void PE_low_level_init(void)
 146:../Generated_Code/Cpu.c **** {
 189              		.loc 1 146 0
 190              		.cfi_startproc
 147:../Generated_Code/Cpu.c ****   #ifdef PEX_RTOS_INIT
 148:../Generated_Code/Cpu.c ****     PEX_RTOS_INIT();                   /* Initialization of the selected RTOS. Macro is defined by 
 149:../Generated_Code/Cpu.c ****   #endif
 150:../Generated_Code/Cpu.c ****       /* Initialization of the SIM module */
 151:../Generated_Code/Cpu.c ****   /* PORTA_PCR4: ISF=0,MUX=7 */
 152:../Generated_Code/Cpu.c ****   PORTA_PCR4 = (uint32_t)((PORTA_PCR4 & (uint32_t)~(uint32_t)(
 191              		.loc 1 152 0
 192 0000 224A     		ldr	r2, .L16
 146:../Generated_Code/Cpu.c **** {
 193              		.loc 1 146 0
 194 0002 38B5     		push	{r3, r4, r5, lr}
 195              	.LCFI2:
 196              		.cfi_def_cfa_offset 16
 197              		.cfi_offset 3, -16
 198              		.cfi_offset 4, -12
 199              		.cfi_offset 5, -8
 200              		.cfi_offset 14, -4
 201              		.loc 1 152 0
 202 0004 2248     		ldr	r0, .L16+4
 203 0006 1369     		ldr	r3, [r2, #16]
 204 0008 E021     		mov	r1, #224
 205 000a 0340     		and	r3, r0
 206 000c C900     		lsl	r1, r1, #3
 207 000e 0B43     		orr	r3, r1
 208 0010 1361     		str	r3, [r2, #16]
 153:../Generated_Code/Cpu.c ****                 PORT_PCR_ISF_MASK
 154:../Generated_Code/Cpu.c ****                )) | (uint32_t)(
 155:../Generated_Code/Cpu.c ****                 PORT_PCR_MUX(0x07)
 156:../Generated_Code/Cpu.c ****                ));                                                  
 157:../Generated_Code/Cpu.c ****         /* Initialization of the RCM module */
 158:../Generated_Code/Cpu.c ****   /* RCM_RPFW: RSTFLTSEL=0 */
 159:../Generated_Code/Cpu.c ****   RCM_RPFW &= (uint8_t)~(uint8_t)(RCM_RPFW_RSTFLTSEL(0x1F));                                       
 209              		.loc 1 159 0
 210 0012 204B     		ldr	r3, .L16+8
 211 0014 1F25     		mov	r5, #31
 212 0016 5C79     		ldrb	r4, [r3, #5]
 213 0018 AC43     		bic	r4, r5
 214 001a 5C71     		strb	r4, [r3, #5]
 160:../Generated_Code/Cpu.c ****   /* RCM_RPFC: RSTFLTSS=0,RSTFLTSRW=0 */
 161:../Generated_Code/Cpu.c ****   RCM_RPFC &= (uint8_t)~(uint8_t)(
 215              		.loc 1 161 0
 216 001c 1C79     		ldrb	r4, [r3, #4]
 217 001e 0725     		mov	r5, #7
 218 0020 AC43     		bic	r4, r5
 219 0022 1C71     		strb	r4, [r3, #4]
 162:../Generated_Code/Cpu.c ****                RCM_RPFC_RSTFLTSS_MASK |
 163:../Generated_Code/Cpu.c ****                RCM_RPFC_RSTFLTSRW(0x03)
 164:../Generated_Code/Cpu.c ****               );                                                   
 165:../Generated_Code/Cpu.c ****       /* Initialization of the PMC module */
 166:../Generated_Code/Cpu.c ****   /* PMC_LVDSC1: LVDACK=1,LVDIE=0,LVDRE=1,LVDV=0 */
 167:../Generated_Code/Cpu.c ****   PMC_LVDSC1 = (uint8_t)((PMC_LVDSC1 & (uint8_t)~(uint8_t)(
 220              		.loc 1 167 0
 221 0024 1C4B     		ldr	r3, .L16+12
 222 0026 7325     		mov	r5, #115
 223 0028 1C78     		ldrb	r4, [r3]
 224 002a AC43     		bic	r4, r5
 225 002c 5025     		mov	r5, #80
 226 002e 2C43     		orr	r4, r5
 227 0030 1C70     		strb	r4, [r3]
 168:../Generated_Code/Cpu.c ****                 PMC_LVDSC1_LVDIE_MASK |
 169:../Generated_Code/Cpu.c ****                 PMC_LVDSC1_LVDV(0x03)
 170:../Generated_Code/Cpu.c ****                )) | (uint8_t)(
 171:../Generated_Code/Cpu.c ****                 PMC_LVDSC1_LVDACK_MASK |
 172:../Generated_Code/Cpu.c ****                 PMC_LVDSC1_LVDRE_MASK
 173:../Generated_Code/Cpu.c ****                ));                                                  
 174:../Generated_Code/Cpu.c ****   /* PMC_LVDSC2: LVWACK=1,LVWIE=0,LVWV=0 */
 175:../Generated_Code/Cpu.c ****   PMC_LVDSC2 = (uint8_t)((PMC_LVDSC2 & (uint8_t)~(uint8_t)(
 228              		.loc 1 175 0
 229 0032 5C78     		ldrb	r4, [r3, #1]
 230 0034 6325     		mov	r5, #99
 231 0036 AC43     		bic	r4, r5
 232 0038 4025     		mov	r5, #64
 233 003a 2C43     		orr	r4, r5
 234 003c 5C70     		strb	r4, [r3, #1]
 176:../Generated_Code/Cpu.c ****                 PMC_LVDSC2_LVWIE_MASK |
 177:../Generated_Code/Cpu.c ****                 PMC_LVDSC2_LVWV(0x03)
 178:../Generated_Code/Cpu.c ****                )) | (uint8_t)(
 179:../Generated_Code/Cpu.c ****                 PMC_LVDSC2_LVWACK_MASK
 180:../Generated_Code/Cpu.c ****                ));                                                  
 181:../Generated_Code/Cpu.c ****   /* PMC_REGSC: BGEN=0,ACKISO=0,BGBE=0 */
 182:../Generated_Code/Cpu.c ****   PMC_REGSC &= (uint8_t)~(uint8_t)(
 235              		.loc 1 182 0
 236 003e 9C78     		ldrb	r4, [r3, #2]
 237 0040 1925     		mov	r5, #25
 238 0042 AC43     		bic	r4, r5
 239 0044 9C70     		strb	r4, [r3, #2]
 183:../Generated_Code/Cpu.c ****                 PMC_REGSC_BGEN_MASK |
 184:../Generated_Code/Cpu.c ****                 PMC_REGSC_ACKISO_MASK |
 185:../Generated_Code/Cpu.c ****                 PMC_REGSC_BGBE_MASK
 186:../Generated_Code/Cpu.c ****                );                                                   
 187:../Generated_Code/Cpu.c ****   /* SMC_PMPROT: ??=0,??=0,AVLP=0,??=0,ALLS=0,??=0,AVLLS=0,??=0 */
 188:../Generated_Code/Cpu.c ****   SMC_PMPROT = 0x00U;                  /* Setup Power mode protection register */
 240              		.loc 1 188 0
 241 0046 154B     		ldr	r3, .L16+16
 242 0048 0024     		mov	r4, #0
 243 004a 1C70     		strb	r4, [r3]
 189:../Generated_Code/Cpu.c ****   /* Common initialization of the CPU registers */
 190:../Generated_Code/Cpu.c ****   /* PORTA_PCR20: ISF=0,MUX=7 */
 191:../Generated_Code/Cpu.c ****   PORTA_PCR20 = (uint32_t)((PORTA_PCR20 & (uint32_t)~(uint32_t)(
 244              		.loc 1 191 0
 245 004c 156D     		ldr	r5, [r2, #80]
 246 004e 2840     		and	r0, r5
 247 0050 0143     		orr	r1, r0
 248 0052 1165     		str	r1, [r2, #80]
 192:../Generated_Code/Cpu.c ****                  PORT_PCR_ISF_MASK
 193:../Generated_Code/Cpu.c ****                 )) | (uint32_t)(
 194:../Generated_Code/Cpu.c ****                  PORT_PCR_MUX(0x07)
 195:../Generated_Code/Cpu.c ****                 ));                                                  
 196:../Generated_Code/Cpu.c ****   /* NVIC_IPR1: PRI_6=0 */
 197:../Generated_Code/Cpu.c ****   NVIC_IPR1 &= (uint32_t)~(uint32_t)(NVIC_IP_PRI_6(0xFF));                                         
 249              		.loc 1 197 0
 250 0054 C120     		mov	r0, #193
 251 0056 124A     		ldr	r2, .L16+20
 252 0058 8400     		lsl	r4, r0, #2
 253 005a 1359     		ldr	r3, [r2, r4]
 254 005c 1149     		ldr	r1, .L16+24
 198:../Generated_Code/Cpu.c ****   /* ### BitIO_LDD "BitIoLdd3" component auto initialization. Auto initialization feature can be di
 199:../Generated_Code/Cpu.c ****   (void)BitIoLdd3_Init(NULL);
 255              		.loc 1 199 0
 256 005e 0020     		mov	r0, #0
 197:../Generated_Code/Cpu.c ****   NVIC_IPR1 &= (uint32_t)~(uint32_t)(NVIC_IP_PRI_6(0xFF));                                         
 257              		.loc 1 197 0
 258 0060 1940     		and	r1, r3
 259 0062 1151     		str	r1, [r2, r4]
 260              		.loc 1 199 0
 261 0064 FFF7FEFF 		bl	BitIoLdd3_Init
 262              	.LVL1:
 200:../Generated_Code/Cpu.c ****   /* ### LED "LEDR" init code ... */
 201:../Generated_Code/Cpu.c ****   LEDR_Init(); /* initializes the driver */
 263              		.loc 1 201 0
 264 0068 0F4D     		ldr	r5, .L16+28
 265 006a 2868     		ldr	r0, [r5]
 266 006c FFF7FEFF 		bl	BitIoLdd3_SetVal
 267              	.LVL2:
 202:../Generated_Code/Cpu.c ****   /* ### BitIO_LDD "BitIoLdd2" component auto initialization. Auto initialization feature can be di
 203:../Generated_Code/Cpu.c ****   (void)BitIoLdd2_Init(NULL);
 268              		.loc 1 203 0
 269 0070 0020     		mov	r0, #0
 270 0072 FFF7FEFF 		bl	BitIoLdd2_Init
 271              	.LVL3:
 204:../Generated_Code/Cpu.c ****   /* ### LED "LEDG" init code ... */
 205:../Generated_Code/Cpu.c ****   LEDG_Init(); /* initializes the driver */
 272              		.loc 1 205 0
 273 0076 6868     		ldr	r0, [r5, #4]
 274 0078 FFF7FEFF 		bl	BitIoLdd2_SetVal
 275              	.LVL4:
 206:../Generated_Code/Cpu.c ****   /* ### BitIO_LDD "BitIoLdd1" component auto initialization. Auto initialization feature can be di
 207:../Generated_Code/Cpu.c ****   (void)BitIoLdd1_Init(NULL);
 276              		.loc 1 207 0
 277 007c 0020     		mov	r0, #0
 278 007e FFF7FEFF 		bl	BitIoLdd1_Init
 279              	.LVL5:
 208:../Generated_Code/Cpu.c ****   /* ### LED "LEDB" init code ... */
 209:../Generated_Code/Cpu.c ****   LEDB_Init(); /* initializes the driver */
 280              		.loc 1 209 0
 281 0082 A868     		ldr	r0, [r5, #8]
 282 0084 FFF7FEFF 		bl	BitIoLdd1_SetVal
 283              	.LVL6:
 210:../Generated_Code/Cpu.c ****   __EI();
 284              		.loc 1 210 0
 285              	@ 210 "../Generated_Code/Cpu.c" 1
 286 0088 62B6     		CPSIE i
 287              	@ 0 "" 2
 211:../Generated_Code/Cpu.c **** }
 288              		.loc 1 211 0
 289              		.code	16
 290              		@ sp needed for prologue
 291 008a 38BD     		pop	{r3, r4, r5, pc}
 292              	.L17:
 293              		.align	2
 294              	.L16:
 295 008c 00900440 		.word	1074040832
 296 0090 FFF8FFFE 		.word	-16779009
 297 0094 00F00740 		.word	1074262016
 298 0098 00D00740 		.word	1074253824
 299 009c 00E00740 		.word	1074257920
 300 00a0 00E100E0 		.word	-536813312
 301 00a4 FFFF00FF 		.word	-16711681
 302 00a8 00000000 		.word	PE_LDD_DeviceDataList
 303              		.cfi_endproc
 304              	.LFE3:
 306              		.global	SR_lock
 307              		.comm	SR_reg,1,1
 308              		.section	.bss.SR_lock,"aw",%nobits
 311              	SR_lock:
 312 0000 00       		.space	1
 313              		.text
 314              	.Letext0:
 315              		.file 2 "C:/Freescale/CW MCU v10.7/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 316              		.file 3 "../Generated_Code/IO_Map.h"
 317              		.file 4 "../Generated_Code/Cpu.h"
 318              		.file 5 "../Generated_Code/PE_LDD.h"
DEFINED SYMBOLS
                            *ABS*:00000000 Cpu.c
C:\Users\burak\AppData\Local\Temp\ccAvg36o.s:18     .text.Cpu_INT_NMIInterrupt:00000000 $t
C:\Users\burak\AppData\Local\Temp\ccAvg36o.s:23     .text.Cpu_INT_NMIInterrupt:00000000 Cpu_INT_NMIInterrupt
C:\Users\burak\AppData\Local\Temp\ccAvg36o.s:43     .text.Cpu_Interrupt:00000000 $t
C:\Users\burak\AppData\Local\Temp\ccAvg36o.s:48     .text.Cpu_Interrupt:00000000 Cpu_Interrupt
C:\Users\burak\AppData\Local\Temp\ccAvg36o.s:64     .text.__init_hardware:00000000 $t
C:\Users\burak\AppData\Local\Temp\ccAvg36o.s:69     .text.__init_hardware:00000000 __init_hardware
C:\Users\burak\AppData\Local\Temp\ccAvg36o.s:166    .text.__init_hardware:00000074 $d
C:\Users\burak\AppData\Local\Temp\ccAvg36o.s:182    .text.PE_low_level_init:00000000 $t
C:\Users\burak\AppData\Local\Temp\ccAvg36o.s:187    .text.PE_low_level_init:00000000 PE_low_level_init
C:\Users\burak\AppData\Local\Temp\ccAvg36o.s:295    .text.PE_low_level_init:0000008c $d
C:\Users\burak\AppData\Local\Temp\ccAvg36o.s:311    .bss.SR_lock:00000000 SR_lock
                            *COM*:00000001 SR_reg
C:\Users\burak\AppData\Local\Temp\ccAvg36o.s:312    .bss.SR_lock:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
Cpu_OnNMIINT
__vect_table
BitIoLdd3_Init
BitIoLdd3_SetVal
BitIoLdd2_Init
BitIoLdd2_SetVal
BitIoLdd1_Init
BitIoLdd1_SetVal
PE_LDD_DeviceDataList
