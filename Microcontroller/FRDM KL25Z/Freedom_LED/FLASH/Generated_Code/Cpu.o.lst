   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 2
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"Cpu.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.Cpu_INT_NMIInterrupt,"ax",%progbits
  18              		.align	2
  19              		.global	Cpu_INT_NMIInterrupt
  20              		.code	16
  21              		.thumb_func
  23              	Cpu_INT_NMIInterrupt:
  24              	.LFB0:
  25              		.file 1 "../Generated_Code/Cpu.c"
   1:../Generated_Code/Cpu.c **** /* ###################################################################
   2:../Generated_Code/Cpu.c **** **     This component module is generated by Processor Expert. Do not modify it.
   3:../Generated_Code/Cpu.c **** **     Filename    : Cpu.c
   4:../Generated_Code/Cpu.c **** **     Project     : ProcessorExpert
   5:../Generated_Code/Cpu.c **** **     Processor   : MKL25Z128VLK4
   6:../Generated_Code/Cpu.c **** **     Component   : MKL25Z128LK4
   7:../Generated_Code/Cpu.c **** **     Version     : Component 01.025, Driver 01.04, CPU db: 3.00.000
   8:../Generated_Code/Cpu.c **** **     Datasheet   : KL25P80M48SF0RM, Rev.3, Sep 2012
   9:../Generated_Code/Cpu.c **** **     Compiler    : GNU C Compiler
  10:../Generated_Code/Cpu.c **** **     Date/Time   : 2017-11-24, 20:36, # CodeGen: 0
  11:../Generated_Code/Cpu.c **** **     Abstract    :
  12:../Generated_Code/Cpu.c **** **
  13:../Generated_Code/Cpu.c **** **     Settings    :
  14:../Generated_Code/Cpu.c **** **
  15:../Generated_Code/Cpu.c **** **     Contents    :
  16:../Generated_Code/Cpu.c **** **         No public methods
  17:../Generated_Code/Cpu.c **** **
  18:../Generated_Code/Cpu.c **** **     Copyright : 1997 - 2014 Freescale Semiconductor, Inc. 
  19:../Generated_Code/Cpu.c **** **     All Rights Reserved.
  20:../Generated_Code/Cpu.c **** **     
  21:../Generated_Code/Cpu.c **** **     Redistribution and use in source and binary forms, with or without modification,
  22:../Generated_Code/Cpu.c **** **     are permitted provided that the following conditions are met:
  23:../Generated_Code/Cpu.c **** **     
  24:../Generated_Code/Cpu.c **** **     o Redistributions of source code must retain the above copyright notice, this list
  25:../Generated_Code/Cpu.c **** **       of conditions and the following disclaimer.
  26:../Generated_Code/Cpu.c **** **     
  27:../Generated_Code/Cpu.c **** **     o Redistributions in binary form must reproduce the above copyright notice, this
  28:../Generated_Code/Cpu.c **** **       list of conditions and the following disclaimer in the documentation and/or
  29:../Generated_Code/Cpu.c **** **       other materials provided with the distribution.
  30:../Generated_Code/Cpu.c **** **     
  31:../Generated_Code/Cpu.c **** **     o Neither the name of Freescale Semiconductor, Inc. nor the names of its
  32:../Generated_Code/Cpu.c **** **       contributors may be used to endorse or promote products derived from this
  33:../Generated_Code/Cpu.c **** **       software without specific prior written permission.
  34:../Generated_Code/Cpu.c **** **     
  35:../Generated_Code/Cpu.c **** **     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  36:../Generated_Code/Cpu.c **** **     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  37:../Generated_Code/Cpu.c **** **     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  38:../Generated_Code/Cpu.c **** **     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  39:../Generated_Code/Cpu.c **** **     ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  40:../Generated_Code/Cpu.c **** **     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  41:../Generated_Code/Cpu.c **** **     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  42:../Generated_Code/Cpu.c **** **     ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  43:../Generated_Code/Cpu.c **** **     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  44:../Generated_Code/Cpu.c **** **     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  45:../Generated_Code/Cpu.c **** **     
  46:../Generated_Code/Cpu.c **** **     http: www.freescale.com
  47:../Generated_Code/Cpu.c **** **     mail: support@freescale.com
  48:../Generated_Code/Cpu.c **** ** ###################################################################*/
  49:../Generated_Code/Cpu.c **** /*!
  50:../Generated_Code/Cpu.c **** ** @file Cpu.c
  51:../Generated_Code/Cpu.c **** ** @version 01.04
  52:../Generated_Code/Cpu.c **** ** @brief
  53:../Generated_Code/Cpu.c **** **
  54:../Generated_Code/Cpu.c **** */         
  55:../Generated_Code/Cpu.c **** /*!
  56:../Generated_Code/Cpu.c **** **  @addtogroup Cpu_module Cpu module documentation
  57:../Generated_Code/Cpu.c **** **  @{
  58:../Generated_Code/Cpu.c **** */         
  59:../Generated_Code/Cpu.c **** 
  60:../Generated_Code/Cpu.c **** /* MODULE Cpu. */
  61:../Generated_Code/Cpu.c **** 
  62:../Generated_Code/Cpu.c **** /* {Default RTOS Adapter} No RTOS includes */
  63:../Generated_Code/Cpu.c **** #include "LEDR.h"
  64:../Generated_Code/Cpu.c **** #include "LEDpin3.h"
  65:../Generated_Code/Cpu.c **** #include "BitIoLdd3.h"
  66:../Generated_Code/Cpu.c **** #include "LEDG.h"
  67:../Generated_Code/Cpu.c **** #include "LEDpin2.h"
  68:../Generated_Code/Cpu.c **** #include "BitIoLdd2.h"
  69:../Generated_Code/Cpu.c **** #include "LEDB.h"
  70:../Generated_Code/Cpu.c **** #include "LEDpin1.h"
  71:../Generated_Code/Cpu.c **** #include "BitIoLdd1.h"
  72:../Generated_Code/Cpu.c **** #include "WAIT1.h"
  73:../Generated_Code/Cpu.c **** #include "MCUC1.h"
  74:../Generated_Code/Cpu.c **** #include "PE_Types.h"
  75:../Generated_Code/Cpu.c **** #include "PE_Error.h"
  76:../Generated_Code/Cpu.c **** #include "PE_Const.h"
  77:../Generated_Code/Cpu.c **** #include "IO_Map.h"
  78:../Generated_Code/Cpu.c **** #include "Events.h"
  79:../Generated_Code/Cpu.c **** #include "Cpu.h"
  80:../Generated_Code/Cpu.c **** 
  81:../Generated_Code/Cpu.c **** #ifdef __cplusplus
  82:../Generated_Code/Cpu.c **** extern "C" {
  83:../Generated_Code/Cpu.c **** #endif
  84:../Generated_Code/Cpu.c **** 
  85:../Generated_Code/Cpu.c **** /* Global variables */
  86:../Generated_Code/Cpu.c **** volatile uint8_t SR_reg;               /* Current value of the FAULTMASK register */
  87:../Generated_Code/Cpu.c **** volatile uint8_t SR_lock = 0x00U;      /* Lock */
  88:../Generated_Code/Cpu.c **** 
  89:../Generated_Code/Cpu.c **** 
  90:../Generated_Code/Cpu.c **** /*
  91:../Generated_Code/Cpu.c **** ** ===================================================================
  92:../Generated_Code/Cpu.c **** **     Method      :  Cpu_INT_NMIInterrupt (component MKL25Z128LK4)
  93:../Generated_Code/Cpu.c **** **
  94:../Generated_Code/Cpu.c **** **     Description :
  95:../Generated_Code/Cpu.c **** **         This ISR services the Non Maskable Interrupt interrupt.
  96:../Generated_Code/Cpu.c **** **         This method is internal. It is used by Processor Expert only.
  97:../Generated_Code/Cpu.c **** ** ===================================================================
  98:../Generated_Code/Cpu.c **** */
  99:../Generated_Code/Cpu.c **** PE_ISR(Cpu_INT_NMIInterrupt)
 100:../Generated_Code/Cpu.c **** {
  26              		.loc 1 100 0
  27              		.cfi_startproc
  28 0000 08B5     		push	{r3, lr}
  29              	.LCFI0:
  30              		.cfi_def_cfa_offset 8
  31              		.cfi_offset 3, -8
  32              		.cfi_offset 14, -4
 101:../Generated_Code/Cpu.c ****   Cpu_OnNMIINT();
  33              		.loc 1 101 0
  34 0002 FFF7FEFF 		bl	Cpu_OnNMIINT
  35              	.LVL0:
 102:../Generated_Code/Cpu.c **** }
  36              		.loc 1 102 0
  37              		@ sp needed for prologue
  38 0006 08BD     		pop	{r3, pc}
  39              		.cfi_endproc
  40              	.LFE0:
  42              		.section	.text.Cpu_Interrupt,"ax",%progbits
  43              		.align	2
  44              		.global	Cpu_Interrupt
  45              		.code	16
  46              		.thumb_func
  48              	Cpu_Interrupt:
  49              	.LFB1:
 103:../Generated_Code/Cpu.c **** 
 104:../Generated_Code/Cpu.c **** /*
 105:../Generated_Code/Cpu.c **** ** ===================================================================
 106:../Generated_Code/Cpu.c **** **     Method      :  Cpu_Cpu_Interrupt (component MKL25Z128LK4)
 107:../Generated_Code/Cpu.c **** **
 108:../Generated_Code/Cpu.c **** **     Description :
 109:../Generated_Code/Cpu.c **** **         This ISR services an unused interrupt/exception vector.
 110:../Generated_Code/Cpu.c **** **         This method is internal. It is used by Processor Expert only.
 111:../Generated_Code/Cpu.c **** ** ===================================================================
 112:../Generated_Code/Cpu.c **** */
 113:../Generated_Code/Cpu.c **** PE_ISR(Cpu_Interrupt)
 114:../Generated_Code/Cpu.c **** {
  50              		.loc 1 114 0
  51              		.cfi_startproc
 115:../Generated_Code/Cpu.c ****   /* This code can be changed using the CPU component property "Build Options / Unhandled int code"
 116:../Generated_Code/Cpu.c ****   PE_DEBUGHALT();
  52              		.loc 1 116 0
  53              	@ 116 "../Generated_Code/Cpu.c" 1
  54 0000 FFBE     		BKPT 255
  55              	@ 0 "" 2
 117:../Generated_Code/Cpu.c **** }
  56              		.loc 1 117 0
  57              		.code	16
  58              		@ sp needed for prologue
  59 0002 7047     		bx	lr
  60              		.cfi_endproc
  61              	.LFE1:
  63              		.section	.text.__init_hardware,"ax",%progbits
  64              		.align	2
  65              		.global	__init_hardware
  66              		.code	16
  67              		.thumb_func
  69              	__init_hardware:
  70              	.LFB2:
 118:../Generated_Code/Cpu.c **** 
 119:../Generated_Code/Cpu.c **** 
 120:../Generated_Code/Cpu.c **** /*** !!! Here you can place your own code using property "User data declarations" on the build opti
 121:../Generated_Code/Cpu.c **** 
 122:../Generated_Code/Cpu.c **** /*lint -esym(765,__init_hardware) Disable MISRA rule (8.10) checking for symbols (__init_hardware).
 123:../Generated_Code/Cpu.c **** /*lint -esym(765,Cpu_Interrupt) Disable MISRA rule (8.10) checking for symbols (Cpu_Interrupt). */
 124:../Generated_Code/Cpu.c **** void __init_hardware(void)
 125:../Generated_Code/Cpu.c **** {
  71              		.loc 1 125 0
  72              		.cfi_startproc
 126:../Generated_Code/Cpu.c **** 
 127:../Generated_Code/Cpu.c ****   /*** !!! Here you can place your own code before PE initialization using property "User code befo
 128:../Generated_Code/Cpu.c **** 
 129:../Generated_Code/Cpu.c ****   /*** ### MKL25Z128VLK4 "Cpu" init code ... ***/
 130:../Generated_Code/Cpu.c ****   /*** PE initialization code after reset ***/
 131:../Generated_Code/Cpu.c ****   SCB_VTOR = (uint32_t)(&__vect_table); /* Set the interrupt vector table position */
  73              		.loc 1 131 0
  74 0000 234B     		ldr	r3, .L17
  75 0002 244A     		ldr	r2, .L17+4
  76 0004 2449     		ldr	r1, .L17+8
 125:../Generated_Code/Cpu.c **** {
  77              		.loc 1 125 0
  78 0006 10B5     		push	{r4, lr}
  79              	.LCFI1:
  80              		.cfi_def_cfa_offset 8
  81              		.cfi_offset 4, -8
  82              		.cfi_offset 14, -4
  83              		.loc 1 131 0
  84 0008 D150     		str	r1, [r2, r3]
 132:../Generated_Code/Cpu.c ****   /* Disable the WDOG module */
 133:../Generated_Code/Cpu.c ****   /* SIM_COPC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0
 134:../Generated_Code/Cpu.c ****   SIM_COPC = SIM_COPC_COPT(0x00);
  85              		.loc 1 134 0
  86 000a 244C     		ldr	r4, .L17+12
  87 000c 8823     		mov	r3, #136
  88 000e 5A01     		lsl	r2, r3, #5
  89 0010 0020     		mov	r0, #0
 135:../Generated_Code/Cpu.c **** 
 136:../Generated_Code/Cpu.c ****   /* System clock initialization */
 137:../Generated_Code/Cpu.c ****   /* SIM_CLKDIV1: OUTDIV1=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,OUTDIV4=3,??=0,??=0,??=0,?
 138:../Generated_Code/Cpu.c ****   SIM_CLKDIV1 = (SIM_CLKDIV1_OUTDIV1(0x00) | SIM_CLKDIV1_OUTDIV4(0x03)); /* Set the system prescale
  90              		.loc 1 138 0
  91 0012 C021     		mov	r1, #192
  92 0014 224B     		ldr	r3, .L17+16
 134:../Generated_Code/Cpu.c ****   SIM_COPC = SIM_COPC_COPT(0x00);
  93              		.loc 1 134 0
  94 0016 A050     		str	r0, [r4, r2]
  95              		.loc 1 138 0
  96 0018 8802     		lsl	r0, r1, #10
 139:../Generated_Code/Cpu.c ****   /* SIM_SCGC5: PORTD=1,PORTB=1,PORTA=1 */
 140:../Generated_Code/Cpu.c ****   SIM_SCGC5 |= SIM_SCGC5_PORTD_MASK |
  97              		.loc 1 140 0
  98 001a 224A     		ldr	r2, .L17+20
 138:../Generated_Code/Cpu.c ****   SIM_CLKDIV1 = (SIM_CLKDIV1_OUTDIV1(0x00) | SIM_CLKDIV1_OUTDIV4(0x03)); /* Set the system prescale
  99              		.loc 1 138 0
 100 001c E050     		str	r0, [r4, r3]
 101              		.loc 1 140 0
 102 001e A058     		ldr	r0, [r4, r2]
 103 0020 B021     		mov	r1, #176
 104 0022 4B01     		lsl	r3, r1, #5
 105 0024 0343     		orr	r3, r0
 106 0026 A350     		str	r3, [r4, r2]
 141:../Generated_Code/Cpu.c ****                SIM_SCGC5_PORTB_MASK |
 142:../Generated_Code/Cpu.c ****                SIM_SCGC5_PORTA_MASK;   /* Enable clock gate for ports to enable pin routing */
 143:../Generated_Code/Cpu.c ****   if ((PMC_REGSC & PMC_REGSC_ACKISO_MASK) != 0x0U) {
 107              		.loc 1 143 0
 108 0028 1F4C     		ldr	r4, .L17+24
 109 002a A278     		ldrb	r2, [r4, #2]
 110 002c 1107     		lsl	r1, r2, #28
 111 002e 04D5     		bpl	.L4
 144:../Generated_Code/Cpu.c ****     /* PMC_REGSC: ACKISO=1 */
 145:../Generated_Code/Cpu.c ****     PMC_REGSC |= PMC_REGSC_ACKISO_MASK; /* Release IO pads after wakeup from VLLS mode. */
 112              		.loc 1 145 0
 113 0030 A078     		ldrb	r0, [r4, #2]
 114 0032 0821     		mov	r1, #8
 115 0034 0143     		orr	r1, r0
 116 0036 CBB2     		uxtb	r3, r1
 117 0038 A370     		strb	r3, [r4, #2]
 118              	.L4:
 146:../Generated_Code/Cpu.c ****   }
 147:../Generated_Code/Cpu.c ****   /* SIM_CLKDIV1: OUTDIV1=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,OUTDIV4=0,??=0,??=0,??=0,?
 148:../Generated_Code/Cpu.c ****   SIM_CLKDIV1 = (SIM_CLKDIV1_OUTDIV1(0x00) | SIM_CLKDIV1_OUTDIV4(0x00)); /* Update system prescaler
 119              		.loc 1 148 0
 120 003a 184B     		ldr	r3, .L17+12
 121 003c 184C     		ldr	r4, .L17+16
 122 003e 0022     		mov	r2, #0
 149:../Generated_Code/Cpu.c ****   /* SIM_SOPT2: PLLFLLSEL=0 */
 150:../Generated_Code/Cpu.c ****   SIM_SOPT2 &= (uint32_t)~(uint32_t)(SIM_SOPT2_PLLFLLSEL_MASK); /* Select FLL as a clock source for
 123              		.loc 1 150 0
 124 0040 1A49     		ldr	r1, .L17+28
 148:../Generated_Code/Cpu.c ****   SIM_CLKDIV1 = (SIM_CLKDIV1_OUTDIV1(0x00) | SIM_CLKDIV1_OUTDIV4(0x00)); /* Update system prescaler
 125              		.loc 1 148 0
 126 0042 1A51     		str	r2, [r3, r4]
 127              		.loc 1 150 0
 128 0044 5C58     		ldr	r4, [r3, r1]
 129 0046 1A48     		ldr	r0, .L17+32
 130 0048 2040     		and	r0, r4
 131 004a 5850     		str	r0, [r3, r1]
 151:../Generated_Code/Cpu.c ****   /* SIM_SOPT1: OSC32KSEL=0 */
 152:../Generated_Code/Cpu.c ****   SIM_SOPT1 &= (uint32_t)~(uint32_t)(SIM_SOPT1_OSC32KSEL(0x03)); /* System oscillator drives 32 kHz
 132              		.loc 1 152 0
 133 004c 1C68     		ldr	r4, [r3]
 134 004e 1948     		ldr	r0, .L17+36
 135 0050 2040     		and	r0, r4
 136 0052 1860     		str	r0, [r3]
 153:../Generated_Code/Cpu.c ****   /* SIM_SOPT2: TPMSRC=1 */
 154:../Generated_Code/Cpu.c ****   SIM_SOPT2 = (uint32_t)((SIM_SOPT2 & (uint32_t)~(uint32_t)(
 137              		.loc 1 154 0
 138 0054 5C58     		ldr	r4, [r3, r1]
 139 0056 1848     		ldr	r0, .L17+40
 140 0058 2040     		and	r0, r4
 141 005a 8024     		mov	r4, #128
 142 005c 6404     		lsl	r4, r4, #17
 143 005e 2043     		orr	r0, r4
 144 0060 5850     		str	r0, [r3, r1]
 155:../Generated_Code/Cpu.c ****                SIM_SOPT2_TPMSRC(0x02)
 156:../Generated_Code/Cpu.c ****               )) | (uint32_t)(
 157:../Generated_Code/Cpu.c ****                SIM_SOPT2_TPMSRC(0x01)
 158:../Generated_Code/Cpu.c ****               ));                      /* Set the TPM clock */
 159:../Generated_Code/Cpu.c ****   /* Switch to FEI Mode */
 160:../Generated_Code/Cpu.c ****   /* MCG_C1: CLKS=0,FRDIV=0,IREFS=1,IRCLKEN=1,IREFSTEN=0 */
 161:../Generated_Code/Cpu.c ****   MCG_C1 = MCG_C1_CLKS(0x00) |
 145              		.loc 1 161 0
 146 0062 1649     		ldr	r1, .L17+44
 147 0064 0623     		mov	r3, #6
 148 0066 0B70     		strb	r3, [r1]
 162:../Generated_Code/Cpu.c ****            MCG_C1_FRDIV(0x00) |
 163:../Generated_Code/Cpu.c ****            MCG_C1_IREFS_MASK |
 164:../Generated_Code/Cpu.c ****            MCG_C1_IRCLKEN_MASK;
 165:../Generated_Code/Cpu.c ****   /* MCG_C2: LOCRE0=0,??=0,RANGE0=0,HGO0=0,EREFS0=0,LP=0,IRCS=0 */
 166:../Generated_Code/Cpu.c ****   MCG_C2 = MCG_C2_RANGE0(0x00);
 149              		.loc 1 166 0
 150 0068 4A70     		strb	r2, [r1, #1]
 167:../Generated_Code/Cpu.c ****   /* MCG_C4: DMX32=0,DRST_DRS=0 */
 168:../Generated_Code/Cpu.c ****   MCG_C4 &= (uint8_t)~(uint8_t)((MCG_C4_DMX32_MASK | MCG_C4_DRST_DRS(0x03)));
 151              		.loc 1 168 0
 152 006a CC78     		ldrb	r4, [r1, #3]
 153 006c 1F20     		mov	r0, #31
 154 006e 0440     		and	r4, r0
 169:../Generated_Code/Cpu.c ****   /* OSC0_CR: ERCLKEN=1,??=0,EREFSTEN=0,??=0,SC2P=0,SC4P=0,SC8P=0,SC16P=0 */
 170:../Generated_Code/Cpu.c ****   OSC0_CR = OSC_CR_ERCLKEN_MASK;
 155              		.loc 1 170 0
 156 0070 134B     		ldr	r3, .L17+48
 168:../Generated_Code/Cpu.c ****   MCG_C4 &= (uint8_t)~(uint8_t)((MCG_C4_DMX32_MASK | MCG_C4_DRST_DRS(0x03)));
 157              		.loc 1 168 0
 158 0072 CC70     		strb	r4, [r1, #3]
 159              		.loc 1 170 0
 160 0074 8024     		mov	r4, #128
 161 0076 1C70     		strb	r4, [r3]
 171:../Generated_Code/Cpu.c ****   /* MCG_C5: ??=0,PLLCLKEN0=0,PLLSTEN0=0,PRDIV0=0 */
 172:../Generated_Code/Cpu.c ****   MCG_C5 = MCG_C5_PRDIV0(0x00);
 162              		.loc 1 172 0
 163 0078 0A71     		strb	r2, [r1, #4]
 173:../Generated_Code/Cpu.c ****   /* MCG_C6: LOLIE0=0,PLLS=0,CME0=0,VDIV0=0 */
 174:../Generated_Code/Cpu.c ****   MCG_C6 = MCG_C6_VDIV0(0x00);
 164              		.loc 1 174 0
 165 007a 4A71     		strb	r2, [r1, #5]
 175:../Generated_Code/Cpu.c ****   while((MCG_S & MCG_S_IREFST_MASK) == 0x00U) { /* Check that the source of the FLL reference clock
 166              		.loc 1 175 0
 167 007c 1022     		mov	r2, #16
 168              	.L5:
 169              		.loc 1 175 0 is_stmt 0
 170 007e 8879     		ldrb	r0, [r1, #6]
 171 0080 0242     		tst	r2, r0
 172 0082 FCD0     		beq	.L5
 176:../Generated_Code/Cpu.c ****   }
 177:../Generated_Code/Cpu.c ****   while((MCG_S & 0x0CU) != 0x00U) {    /* Wait until output of the FLL is selected */
 173              		.loc 1 177 0 is_stmt 1
 174 0084 0D49     		ldr	r1, .L17+44
 175 0086 0C24     		mov	r4, #12
 176              	.L11:
 177 0088 8B79     		ldrb	r3, [r1, #6]
 178 008a 1C42     		tst	r4, r3
 179 008c FCD1     		bne	.L11
 178:../Generated_Code/Cpu.c ****   }
 179:../Generated_Code/Cpu.c ****   /*** End of PE initialization code after reset ***/
 180:../Generated_Code/Cpu.c **** 
 181:../Generated_Code/Cpu.c ****   /*** !!! Here you can place your own code after PE initialization using property "User code after
 182:../Generated_Code/Cpu.c **** 
 183:../Generated_Code/Cpu.c **** }
 180              		.loc 1 183 0
 181              		@ sp needed for prologue
 182 008e 10BD     		pop	{r4, pc}
 183              	.L18:
 184              		.align	2
 185              	.L17:
 186 0090 080D0000 		.word	3336
 187 0094 00E000E0 		.word	-536813568
 188 0098 00000000 		.word	__vect_table
 189 009c 00700440 		.word	1074032640
 190 00a0 44100000 		.word	4164
 191 00a4 38100000 		.word	4152
 192 00a8 00D00740 		.word	1074253824
 193 00ac 04100000 		.word	4100
 194 00b0 FFFFFEFF 		.word	-65537
 195 00b4 FFFFF3FF 		.word	-786433
 196 00b8 FFFFFFFC 		.word	-50331649
 197 00bc 00400640 		.word	1074151424
 198 00c0 00500640 		.word	1074155520
 199              		.cfi_endproc
 200              	.LFE2:
 202              		.section	.text.PE_low_level_init,"ax",%progbits
 203              		.align	2
 204              		.global	PE_low_level_init
 205              		.code	16
 206              		.thumb_func
 208              	PE_low_level_init:
 209              	.LFB3:
 184:../Generated_Code/Cpu.c **** 
 185:../Generated_Code/Cpu.c **** 
 186:../Generated_Code/Cpu.c **** 
 187:../Generated_Code/Cpu.c **** /*
 188:../Generated_Code/Cpu.c **** ** ===================================================================
 189:../Generated_Code/Cpu.c **** **     Method      :  PE_low_level_init (component MKL25Z128LK4)
 190:../Generated_Code/Cpu.c **** **
 191:../Generated_Code/Cpu.c **** **     Description :
 192:../Generated_Code/Cpu.c **** **         Initializes beans and provides common register initialization. 
 193:../Generated_Code/Cpu.c **** **         The method is called automatically as a part of the 
 194:../Generated_Code/Cpu.c **** **         application initialization code.
 195:../Generated_Code/Cpu.c **** **         This method is internal. It is used by Processor Expert only.
 196:../Generated_Code/Cpu.c **** ** ===================================================================
 197:../Generated_Code/Cpu.c **** */
 198:../Generated_Code/Cpu.c **** void PE_low_level_init(void)
 199:../Generated_Code/Cpu.c **** {
 210              		.loc 1 199 0
 211              		.cfi_startproc
 200:../Generated_Code/Cpu.c ****   #ifdef PEX_RTOS_INIT
 201:../Generated_Code/Cpu.c ****     PEX_RTOS_INIT();                   /* Initialization of the selected RTOS. Macro is defined by 
 202:../Generated_Code/Cpu.c ****   #endif
 203:../Generated_Code/Cpu.c ****       /* Initialization of the SIM module */
 204:../Generated_Code/Cpu.c ****   /* PORTA_PCR4: ISF=0,MUX=7 */
 205:../Generated_Code/Cpu.c ****   PORTA_PCR4 = (uint32_t)((PORTA_PCR4 & (uint32_t)~(uint32_t)(
 212              		.loc 1 205 0
 213 0000 214A     		ldr	r2, .L20
 199:../Generated_Code/Cpu.c **** {
 214              		.loc 1 199 0
 215 0002 38B5     		push	{r3, r4, r5, lr}
 216              	.LCFI2:
 217              		.cfi_def_cfa_offset 16
 218              		.cfi_offset 3, -16
 219              		.cfi_offset 4, -12
 220              		.cfi_offset 5, -8
 221              		.cfi_offset 14, -4
 222              		.loc 1 205 0
 223 0004 2148     		ldr	r0, .L20+4
 224 0006 1369     		ldr	r3, [r2, #16]
 225 0008 E021     		mov	r1, #224
 226 000a 0340     		and	r3, r0
 227 000c C900     		lsl	r1, r1, #3
 228 000e 0B43     		orr	r3, r1
 229 0010 1361     		str	r3, [r2, #16]
 206:../Generated_Code/Cpu.c ****                 PORT_PCR_ISF_MASK
 207:../Generated_Code/Cpu.c ****                )) | (uint32_t)(
 208:../Generated_Code/Cpu.c ****                 PORT_PCR_MUX(0x07)
 209:../Generated_Code/Cpu.c ****                ));
 210:../Generated_Code/Cpu.c ****         /* Initialization of the RCM module */
 211:../Generated_Code/Cpu.c ****   /* RCM_RPFW: RSTFLTSEL=0 */
 212:../Generated_Code/Cpu.c ****   RCM_RPFW &= (uint8_t)~(uint8_t)(RCM_RPFW_RSTFLTSEL(0x1F));
 230              		.loc 1 212 0
 231 0012 1F4B     		ldr	r3, .L20+8
 232 0014 1F25     		mov	r5, #31
 233 0016 5C79     		ldrb	r4, [r3, #5]
 234 0018 AC43     		bic	r4, r5
 235 001a 5C71     		strb	r4, [r3, #5]
 213:../Generated_Code/Cpu.c ****   /* RCM_RPFC: RSTFLTSS=0,RSTFLTSRW=0 */
 214:../Generated_Code/Cpu.c ****   RCM_RPFC &= (uint8_t)~(uint8_t)(
 236              		.loc 1 214 0
 237 001c 1C79     		ldrb	r4, [r3, #4]
 238 001e 0725     		mov	r5, #7
 239 0020 AC43     		bic	r4, r5
 240 0022 1C71     		strb	r4, [r3, #4]
 215:../Generated_Code/Cpu.c ****                RCM_RPFC_RSTFLTSS_MASK |
 216:../Generated_Code/Cpu.c ****                RCM_RPFC_RSTFLTSRW(0x03)
 217:../Generated_Code/Cpu.c ****               );
 218:../Generated_Code/Cpu.c ****       /* Initialization of the PMC module */
 219:../Generated_Code/Cpu.c ****   /* PMC_LVDSC1: LVDACK=1,LVDIE=0,LVDRE=1,LVDV=0 */
 220:../Generated_Code/Cpu.c ****   PMC_LVDSC1 = (uint8_t)((PMC_LVDSC1 & (uint8_t)~(uint8_t)(
 241              		.loc 1 220 0
 242 0024 1B4B     		ldr	r3, .L20+12
 243 0026 7325     		mov	r5, #115
 244 0028 1C78     		ldrb	r4, [r3]
 245 002a AC43     		bic	r4, r5
 246 002c 5025     		mov	r5, #80
 247 002e 2C43     		orr	r4, r5
 248 0030 1C70     		strb	r4, [r3]
 221:../Generated_Code/Cpu.c ****                 PMC_LVDSC1_LVDIE_MASK |
 222:../Generated_Code/Cpu.c ****                 PMC_LVDSC1_LVDV(0x03)
 223:../Generated_Code/Cpu.c ****                )) | (uint8_t)(
 224:../Generated_Code/Cpu.c ****                 PMC_LVDSC1_LVDACK_MASK |
 225:../Generated_Code/Cpu.c ****                 PMC_LVDSC1_LVDRE_MASK
 226:../Generated_Code/Cpu.c ****                ));
 227:../Generated_Code/Cpu.c ****   /* PMC_LVDSC2: LVWACK=1,LVWIE=0,LVWV=0 */
 228:../Generated_Code/Cpu.c ****   PMC_LVDSC2 = (uint8_t)((PMC_LVDSC2 & (uint8_t)~(uint8_t)(
 249              		.loc 1 228 0
 250 0032 5C78     		ldrb	r4, [r3, #1]
 251 0034 6325     		mov	r5, #99
 252 0036 AC43     		bic	r4, r5
 253 0038 4025     		mov	r5, #64
 254 003a 2C43     		orr	r4, r5
 255 003c 5C70     		strb	r4, [r3, #1]
 229:../Generated_Code/Cpu.c ****                 PMC_LVDSC2_LVWIE_MASK |
 230:../Generated_Code/Cpu.c ****                 PMC_LVDSC2_LVWV(0x03)
 231:../Generated_Code/Cpu.c ****                )) | (uint8_t)(
 232:../Generated_Code/Cpu.c ****                 PMC_LVDSC2_LVWACK_MASK
 233:../Generated_Code/Cpu.c ****                ));
 234:../Generated_Code/Cpu.c ****   /* PMC_REGSC: BGEN=0,ACKISO=0,BGBE=0 */
 235:../Generated_Code/Cpu.c ****   PMC_REGSC &= (uint8_t)~(uint8_t)(
 256              		.loc 1 235 0
 257 003e 9C78     		ldrb	r4, [r3, #2]
 258 0040 1925     		mov	r5, #25
 259 0042 AC43     		bic	r4, r5
 260 0044 9C70     		strb	r4, [r3, #2]
 236:../Generated_Code/Cpu.c ****                 PMC_REGSC_BGEN_MASK |
 237:../Generated_Code/Cpu.c ****                 PMC_REGSC_ACKISO_MASK |
 238:../Generated_Code/Cpu.c ****                 PMC_REGSC_BGBE_MASK
 239:../Generated_Code/Cpu.c ****                );
 240:../Generated_Code/Cpu.c ****   /* SMC_PMPROT: ??=0,??=0,AVLP=0,??=0,ALLS=0,??=0,AVLLS=0,??=0 */
 241:../Generated_Code/Cpu.c ****   SMC_PMPROT = 0x00U;                  /* Setup Power mode protection register */
 261              		.loc 1 241 0
 262 0046 144B     		ldr	r3, .L20+16
 263 0048 0024     		mov	r4, #0
 264 004a 1C70     		strb	r4, [r3]
 242:../Generated_Code/Cpu.c ****   /* Common initialization of the CPU registers */
 243:../Generated_Code/Cpu.c ****   /* PORTA_PCR20: ISF=0,MUX=7 */
 244:../Generated_Code/Cpu.c ****   PORTA_PCR20 = (uint32_t)((PORTA_PCR20 & (uint32_t)~(uint32_t)(
 265              		.loc 1 244 0
 266 004c 156D     		ldr	r5, [r2, #80]
 267 004e 2840     		and	r0, r5
 268 0050 0143     		orr	r1, r0
 269 0052 1165     		str	r1, [r2, #80]
 245:../Generated_Code/Cpu.c ****                  PORT_PCR_ISF_MASK
 246:../Generated_Code/Cpu.c ****                 )) | (uint32_t)(
 247:../Generated_Code/Cpu.c ****                  PORT_PCR_MUX(0x07)
 248:../Generated_Code/Cpu.c ****                 ));
 249:../Generated_Code/Cpu.c ****   /* NVIC_IPR1: PRI_6=0 */
 250:../Generated_Code/Cpu.c ****   NVIC_IPR1 &= (uint32_t)~(uint32_t)(NVIC_IP_PRI_6(0xFF));
 270              		.loc 1 250 0
 271 0054 C120     		mov	r0, #193
 272 0056 114A     		ldr	r2, .L20+20
 273 0058 8400     		lsl	r4, r0, #2
 274 005a 1359     		ldr	r3, [r2, r4]
 275 005c 1049     		ldr	r1, .L20+24
 251:../Generated_Code/Cpu.c ****   /* ### McuLibConfig "MCUC1" init code ... */
 252:../Generated_Code/Cpu.c ****   /* ### BitIO_LDD "BitIoLdd3" component auto initialization. Auto initialization feature can be di
 253:../Generated_Code/Cpu.c ****   (void)BitIoLdd3_Init(NULL);
 276              		.loc 1 253 0
 277 005e 0020     		mov	r0, #0
 250:../Generated_Code/Cpu.c ****   NVIC_IPR1 &= (uint32_t)~(uint32_t)(NVIC_IP_PRI_6(0xFF));
 278              		.loc 1 250 0
 279 0060 1940     		and	r1, r3
 280 0062 1151     		str	r1, [r2, r4]
 281              		.loc 1 253 0
 282 0064 FFF7FEFF 		bl	BitIoLdd3_Init
 283              	.LVL1:
 254:../Generated_Code/Cpu.c ****   /* ### LED "LEDR" init code ... */
 255:../Generated_Code/Cpu.c ****   LEDR_Init(); /* initialize LED driver */
 284              		.loc 1 255 0
 285 0068 FFF7FEFF 		bl	LEDR_Init
 286              	.LVL2:
 256:../Generated_Code/Cpu.c ****   /* ### BitIO_LDD "BitIoLdd2" component auto initialization. Auto initialization feature can be di
 257:../Generated_Code/Cpu.c ****   (void)BitIoLdd2_Init(NULL);
 287              		.loc 1 257 0
 288 006c 0020     		mov	r0, #0
 289 006e FFF7FEFF 		bl	BitIoLdd2_Init
 290              	.LVL3:
 258:../Generated_Code/Cpu.c ****   /* ### LED "LEDG" init code ... */
 259:../Generated_Code/Cpu.c ****   LEDG_Init(); /* initialize LED driver */
 291              		.loc 1 259 0
 292 0072 FFF7FEFF 		bl	LEDG_Init
 293              	.LVL4:
 260:../Generated_Code/Cpu.c ****   /* ### BitIO_LDD "BitIoLdd1" component auto initialization. Auto initialization feature can be di
 261:../Generated_Code/Cpu.c ****   (void)BitIoLdd1_Init(NULL);
 294              		.loc 1 261 0
 295 0076 0020     		mov	r0, #0
 296 0078 FFF7FEFF 		bl	BitIoLdd1_Init
 297              	.LVL5:
 262:../Generated_Code/Cpu.c ****   /* ### LED "LEDB" init code ... */
 263:../Generated_Code/Cpu.c ****   LEDB_Init(); /* initialize LED driver */
 298              		.loc 1 263 0
 299 007c FFF7FEFF 		bl	LEDB_Init
 300              	.LVL6:
 264:../Generated_Code/Cpu.c ****   WAIT1_Init();
 301              		.loc 1 264 0
 302 0080 FFF7FEFF 		bl	WAIT1_Init
 303              	.LVL7:
 265:../Generated_Code/Cpu.c ****   __EI();
 304              		.loc 1 265 0
 305              	@ 265 "../Generated_Code/Cpu.c" 1
 306 0084 62B6     		CPSIE i
 307              	@ 0 "" 2
 266:../Generated_Code/Cpu.c **** }
 308              		.loc 1 266 0
 309              		.code	16
 310              		@ sp needed for prologue
 311 0086 38BD     		pop	{r3, r4, r5, pc}
 312              	.L21:
 313              		.align	2
 314              	.L20:
 315 0088 00900440 		.word	1074040832
 316 008c FFF8FFFE 		.word	-16779009
 317 0090 00F00740 		.word	1074262016
 318 0094 00D00740 		.word	1074253824
 319 0098 00E00740 		.word	1074257920
 320 009c 00E100E0 		.word	-536813312
 321 00a0 FFFF00FF 		.word	-16711681
 322              		.cfi_endproc
 323              	.LFE3:
 325              		.global	SR_lock
 326              		.comm	SR_reg,1,1
 327              		.section	.bss.SR_lock,"aw",%nobits
 330              	SR_lock:
 331 0000 00       		.space	1
 332              		.text
 333              	.Letext0:
 334              		.file 2 "C:/Freescale/CW MCU v10.7/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 335              		.file 3 "C:/Freescale/CW MCU v10.7/MCU/ProcessorExpert/lib/Kinetis/iofiles/MKL25Z4.h"
 336              		.file 4 "../Generated_Code/Cpu.h"
DEFINED SYMBOLS
                            *ABS*:00000000 Cpu.c
C:\Users\burak\AppData\Local\Temp\ccRZeON2.s:18     .text.Cpu_INT_NMIInterrupt:00000000 $t
C:\Users\burak\AppData\Local\Temp\ccRZeON2.s:23     .text.Cpu_INT_NMIInterrupt:00000000 Cpu_INT_NMIInterrupt
C:\Users\burak\AppData\Local\Temp\ccRZeON2.s:43     .text.Cpu_Interrupt:00000000 $t
C:\Users\burak\AppData\Local\Temp\ccRZeON2.s:48     .text.Cpu_Interrupt:00000000 Cpu_Interrupt
C:\Users\burak\AppData\Local\Temp\ccRZeON2.s:64     .text.__init_hardware:00000000 $t
C:\Users\burak\AppData\Local\Temp\ccRZeON2.s:69     .text.__init_hardware:00000000 __init_hardware
C:\Users\burak\AppData\Local\Temp\ccRZeON2.s:186    .text.__init_hardware:00000090 $d
C:\Users\burak\AppData\Local\Temp\ccRZeON2.s:203    .text.PE_low_level_init:00000000 $t
C:\Users\burak\AppData\Local\Temp\ccRZeON2.s:208    .text.PE_low_level_init:00000000 PE_low_level_init
C:\Users\burak\AppData\Local\Temp\ccRZeON2.s:315    .text.PE_low_level_init:00000088 $d
C:\Users\burak\AppData\Local\Temp\ccRZeON2.s:330    .bss.SR_lock:00000000 SR_lock
                            *COM*:00000001 SR_reg
C:\Users\burak\AppData\Local\Temp\ccRZeON2.s:331    .bss.SR_lock:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
Cpu_OnNMIINT
__vect_table
BitIoLdd3_Init
LEDR_Init
BitIoLdd2_Init
LEDG_Init
BitIoLdd1_Init
LEDB_Init
WAIT1_Init
