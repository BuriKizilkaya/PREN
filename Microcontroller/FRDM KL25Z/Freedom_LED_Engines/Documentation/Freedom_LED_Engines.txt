=============================================================================
List of generated methods in project: Freedom_LED_Engines

This text description is generated by Processor Expert. Do not modify it.
=============================================================================

Module "WAIT1"     (component Wait)
   - WAIT1_Wait10Cycles -Wait for 10 CPU cycles.
   - WAIT1_Wait100Cycles -Wait for 100 CPU cycles.
   - WAIT1_WaitCycles -Wait for a specified number of CPU cycles (16bit data type).
   - WAIT1_WaitLongCycles -Wait for a specified number of CPU cycles (32bit data type).
   - WAIT1_Waitms -Wait for a specified time in milliseconds.
   - WAIT1_Waitus -Wait for a specified time in microseconds.
   - WAIT1_Waitns -Wait for a specified time in nano seconds.
   - WAIT1_WaitOSms -If an RTOS is enabled, this routine will use a non-blocking wait method. Otherwise it will do a 
                busy/blocking wait.
   - WAIT1_Init -Driver initialization routine.
   - WAIT1_DeInit -Driver de-initialization routine

Module "MCUC1"     (component McuLibConfig)

Module "LiftingMotor_MS1" (component BitIO)
   - LiftingMotor_MS1_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is 
                read and returned. If the direction is [output] then the last written value is returned (see <Safe mode> 
                property for limitations). This method cannot be disabled if direction is [input].
   - LiftingMotor_MS1_PutVal -The specified output value is set. If the direction is [input], the component saves the value to 
                a memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - LiftingMotor_MS1_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - LiftingMotor_MS1_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.

Module "DrivingMotor" (component PPG)
   - DrivingMotor_Enable -This method enables the component - it starts the signal generation. Events may be generated 
                (<DisableEvent>/<EnableEvent>).
   - DrivingMotor_Disable -This method disables the component - it stops the signal generation and events calling. When the 
                timer is disabled, it is possible to call <ClrValue> and <SetValue> methods.
   - DrivingMotor_SetPeriodUS -This method sets the new period of the output signal. The period is expressed in [microseconds] 
                as a 16-bit unsigned integer number. This method is available only if the runtime setting type 'from interval' 
                is selected in the <Timing dialog box> of the Runtime setting area.
   - DrivingMotor_SetPeriodMS -This method sets the new period of the output signal. The period is expressed in [milliseconds] 
                as a 16-bit unsigned integer number. This method is available only if the runtime setting type 'from interval' 
                is selected in the <Timing dialog box> of the Runtime setting area.
   - DrivingMotor_SetPeriodSec -This method sets the new period of the output signal. The period is expressed in [seconds] as a 
                16-bit unsigned integer number. This method is available only if the runtime setting type 'from interval' is 
                selected in the <Timing dialog box> of the Runtime setting area.
   - DrivingMotor_SetPeriodReal -This method sets the new period of the output signal. The period is expressed in [seconds] as 
                a real number. To use this method the compiler have to support floating point operations. This method is 
                available only if the runtime setting type 'from interval' is selected in the <Timing dialog box> of the 
                Runtime setting area.
   - DrivingMotor_SetFreqHz -This method sets the new frequency of the output signal. The frequency is expressed in [Hz] as a 
                16-bit unsigned integer number. This method is available only if the runtime setting type 'from interval' is 
                selected in the <Timing dialog box> of the Runtime setting area.
   - DrivingMotor_SetFreqkHz -This method sets the new frequency of the output signal. The frequency is expressed in [kHz] as a 
                16-bit unsigned integer number. This method is available only if the runtime setting type 'from interval' is 
                selected in the <Timing dialog box> of the Runtime setting area.
   - DrivingMotor_SetFreqMHz -This method sets the new frequency of the output signal. The frequency is expressed in [MHz] as a 
                16-bit unsigned integer number. This method is available only if the runtime setting type 'from interval' is 
                selected in the <Timing dialog box> of the Runtime setting area.
   - DrivingMotor_SetRatio16 -This method sets a new duty-cycle ratio. Ratio is expressed as a 16-bit unsigned integer number. 
                Value 0 - 65535 value is proportional to ratio 0 - 100%.   Note: Calculated duty depends on the timer 
                possibilities and on the selected period.  The method is available only if method <SetPeriodMode> is not 
                selected.
   - DrivingMotor_SetDutyUS -This method sets the new duty value of the output signal. The duty is expressed in microseconds as 
                a 16-bit unsigned integer number.  The method is available only if method <SetPeriodMode> is not selected.
   - DrivingMotor_SetDutyMS -This method sets the new duty value of the output signal. The duty is expressed in milliseconds as 
                a 16-bit unsigned integer number.  The method is available only if method <SetPeriodMode> is not selected.

Module "LiftingMotor_MS2" (component BitIO)
   - LiftingMotor_MS2_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is 
                read and returned. If the direction is [output] then the last written value is returned (see <Safe mode> 
                property for limitations). This method cannot be disabled if direction is [input].
   - LiftingMotor_MS2_PutVal -The specified output value is set. If the direction is [input], the component saves the value to 
                a memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - LiftingMotor_MS2_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - LiftingMotor_MS2_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.

Module "LiftingMotor_Enable" (component BitIO)
   - LiftingMotor_Enable_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is 
                read and returned. If the direction is [output] then the last written value is returned (see <Safe mode> 
                property for limitations). This method cannot be disabled if direction is [input].
   - LiftingMotor_Enable_PutVal -The specified output value is set. If the direction is [input], the component saves the value 
                to a memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - LiftingMotor_Enable_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - LiftingMotor_Enable_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.

Module "LiftingMotor_Direction" (component BitIO)
   - LiftingMotor_Direction_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin 
                is read and returned. If the direction is [output] then the last written value is returned (see <Safe mode> 
                property for limitations). This method cannot be disabled if direction is [input].
   - LiftingMotor_Direction_PutVal -The specified output value is set. If the direction is [input], the component saves the 
                value to a memory or a register and this value will be written to the pin after switching to the output mode 
                (using [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the 
                value to the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - LiftingMotor_Direction_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method 
                is available only if the direction = _[output]_ or _[input/output]_.
   - LiftingMotor_Direction_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.

Module "DrivingMotor_MS1" (component BitIO)
   - DrivingMotor_MS1_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is 
                read and returned. If the direction is [output] then the last written value is returned (see <Safe mode> 
                property for limitations). This method cannot be disabled if direction is [input].
   - DrivingMotor_MS1_PutVal -The specified output value is set. If the direction is [input], the component saves the value to 
                a memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - DrivingMotor_MS1_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - DrivingMotor_MS1_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.

Module "DrivingMotor_MS2" (component BitIO)
   - DrivingMotor_MS2_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is 
                read and returned. If the direction is [output] then the last written value is returned (see <Safe mode> 
                property for limitations). This method cannot be disabled if direction is [input].
   - DrivingMotor_MS2_PutVal -The specified output value is set. If the direction is [input], the component saves the value to 
                a memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - DrivingMotor_MS2_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - DrivingMotor_MS2_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.

Module "DrivingMotor_Enable" (component BitIO)
   - DrivingMotor_Enable_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is 
                read and returned. If the direction is [output] then the last written value is returned (see <Safe mode> 
                property for limitations). This method cannot be disabled if direction is [input].
   - DrivingMotor_Enable_PutVal -The specified output value is set. If the direction is [input], the component saves the value 
                to a memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - DrivingMotor_Enable_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - DrivingMotor_Enable_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.

Module "DrivingMotor_Direction" (component BitIO)
   - DrivingMotor_Direction_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin 
                is read and returned. If the direction is [output] then the last written value is returned (see <Safe mode> 
                property for limitations). This method cannot be disabled if direction is [input].
   - DrivingMotor_Direction_PutVal -The specified output value is set. If the direction is [input], the component saves the 
                value to a memory or a register and this value will be written to the pin after switching to the output mode 
                (using [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the 
                value to the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - DrivingMotor_Direction_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method 
                is available only if the direction = _[output]_ or _[input/output]_.
   - DrivingMotor_Direction_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.

Module "LiftingMotor" (component PPG)
   - LiftingMotor_Enable -This method enables the component - it starts the signal generation. Events may be generated 
                (<DisableEvent>/<EnableEvent>).
   - LiftingMotor_Disable -This method disables the component - it stops the signal generation and events calling. When the 
                timer is disabled, it is possible to call <ClrValue> and <SetValue> methods.
   - LiftingMotor_SetPeriodUS -This method sets the new period of the output signal. The period is expressed in [microseconds] 
                as a 16-bit unsigned integer number. This method is available only if the runtime setting type 'from interval' 
                is selected in the <Timing dialog box> of the Runtime setting area.
   - LiftingMotor_SetPeriodMS -This method sets the new period of the output signal. The period is expressed in [milliseconds] 
                as a 16-bit unsigned integer number. This method is available only if the runtime setting type 'from interval' 
                is selected in the <Timing dialog box> of the Runtime setting area.
   - LiftingMotor_SetPeriodSec -This method sets the new period of the output signal. The period is expressed in [seconds] as a 
                16-bit unsigned integer number. This method is available only if the runtime setting type 'from interval' is 
                selected in the <Timing dialog box> of the Runtime setting area.
   - LiftingMotor_SetPeriodReal -This method sets the new period of the output signal. The period is expressed in [seconds] as 
                a real number. To use this method the compiler have to support floating point operations. This method is 
                available only if the runtime setting type 'from interval' is selected in the <Timing dialog box> of the 
                Runtime setting area.
   - LiftingMotor_SetFreqHz -This method sets the new frequency of the output signal. The frequency is expressed in [Hz] as a 
                16-bit unsigned integer number. This method is available only if the runtime setting type 'from interval' is 
                selected in the <Timing dialog box> of the Runtime setting area.
   - LiftingMotor_SetFreqkHz -This method sets the new frequency of the output signal. The frequency is expressed in [kHz] as a 
                16-bit unsigned integer number. This method is available only if the runtime setting type 'from interval' is 
                selected in the <Timing dialog box> of the Runtime setting area.
   - LiftingMotor_SetFreqMHz -This method sets the new frequency of the output signal. The frequency is expressed in [MHz] as a 
                16-bit unsigned integer number. This method is available only if the runtime setting type 'from interval' is 
                selected in the <Timing dialog box> of the Runtime setting area.
   - LiftingMotor_SetRatio8 -This method sets a new duty-cycle ratio. The ratio is expressed as an 8-bit unsigned integer 
                number. Value 0 - 255 is proportional to ratio 0 - 100%.   Note: Calculated duty depends on the timer 
                possibilities and on the selected period.  The method is available only if method <SetPeriodMode> is not 
                selected.
   - LiftingMotor_SetRatio16 -This method sets a new duty-cycle ratio. Ratio is expressed as a 16-bit unsigned integer number. 
                Value 0 - 65535 value is proportional to ratio 0 - 100%.   Note: Calculated duty depends on the timer 
                possibilities and on the selected period.  The method is available only if method <SetPeriodMode> is not 
                selected.
   - LiftingMotor_SetDutyUS -This method sets the new duty value of the output signal. The duty is expressed in microseconds as 
                a 16-bit unsigned integer number.  The method is available only if method <SetPeriodMode> is not selected.
   - LiftingMotor_SetDutyMS -This method sets the new duty value of the output signal. The duty is expressed in milliseconds as 
                a 16-bit unsigned integer number.  The method is available only if method <SetPeriodMode> is not selected.

Module "TU1"       (component TimerUnit_LDD)
   - TU1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.
   - TU1_SetPeriodTicks -The method sets timer re-initialization period (in timer ticks). This method is available only if the 
                property <"Counter restart"> is switched to 'on-match' value.
   - TU1_ResetCounter -Resets counter. If counter is counting up then it is set to zero. If counter is counting down then 
                counter is updated to the reload value.   The method is not available if HW doesn't allow resetting of the 
                counter.
   - TU1_GetCounterValue -Returns the content of counter register. This method can be used both if counter is enabled and if 
                counter is disabled. The method is not available if HW doesn't allow reading of the counter.
   - TU1_SetOffsetTicks -Sets the new offset value to channel specified by the parameter ChannelIdx. It is user responsibility 
                to use value below selected period. This method is available when at least one channel is configured.
   - TU1_GetCaptureValue -Returns the content of capture register specified by the parameter ChannelIdx. This method is 
                available when at least one channel is configured.

Module "Cpu"       (component MKL25Z128LK4)

===================================================================================
