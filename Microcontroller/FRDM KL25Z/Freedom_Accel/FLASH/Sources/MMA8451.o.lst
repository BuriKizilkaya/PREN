   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"MMA8451.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.bss.deviceData,"aw",%nobits
  18              		.align	2
  21              	deviceData:
  22 0000 00000000 		.space	8
  22      00000000 
  23              		.section	.text.MMA8451_ReadReg,"ax",%progbits
  24              		.align	2
  25              		.global	MMA8451_ReadReg
  26              		.code	16
  27              		.thumb_func
  29              	MMA8451_ReadReg:
  30              	.LFB0:
  31              		.file 1 "../Sources/MMA8451.c"
   1:../Sources/MMA8451.c **** /*
   2:../Sources/MMA8451.c ****  * MMA8451.c
   3:../Sources/MMA8451.c ****  *
   4:../Sources/MMA8451.c ****  *  Created on: Aug 17, 2012
   5:../Sources/MMA8451.c ****  *      Author: Erich Styger
   6:../Sources/MMA8451.c ****  */
   7:../Sources/MMA8451.c **** #include "MMA8451.h"
   8:../Sources/MMA8451.c **** #include "I2C2.h"
   9:../Sources/MMA8451.c **** #include "LED1.h"
  10:../Sources/MMA8451.c **** #include "LED2.h"
  11:../Sources/MMA8451.c **** #include "LED3.h"
  12:../Sources/MMA8451.c **** 
  13:../Sources/MMA8451.c **** /* External 3-axis accelerometer control register addresses */
  14:../Sources/MMA8451.c **** #define MMA8451_CTRL_REG_1 0x2A
  15:../Sources/MMA8451.c **** /* MMA8451 3-axis accelerometer control register bit masks */
  16:../Sources/MMA8451.c **** #define MMA8451_ACTIVE_BIT_MASK 0x01
  17:../Sources/MMA8451.c **** #define MMA8451_F_READ_BIT_MASK 0x02
  18:../Sources/MMA8451.c **** 
  19:../Sources/MMA8451.c **** /* External 3-axis accelerometer data register addresses */
  20:../Sources/MMA8451.c **** #define MMA8451_OUT_X_MSB 0x01
  21:../Sources/MMA8451.c **** #define MMA8451_OUT_X_LSB 0x02
  22:../Sources/MMA8451.c **** #define MMA8451_OUT_Y_MSB 0x03
  23:../Sources/MMA8451.c **** #define MMA8451_OUT_Y_LSB 0x04
  24:../Sources/MMA8451.c **** #define MMA8451_OUT_Z_MSB 0x05
  25:../Sources/MMA8451.c **** #define MMA8451_OUT_Z_LSB 0x06
  26:../Sources/MMA8451.c **** 
  27:../Sources/MMA8451.c **** static MMA8451_TDataState deviceData;
  28:../Sources/MMA8451.c **** 
  29:../Sources/MMA8451.c **** uint8_t MMA8451_ReadReg(uint8_t addr, uint8_t *data, short dataSize) {
  32              		.loc 1 29 0
  33              		.cfi_startproc
  34 0000 80B5     		push	{r7, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 7, -8
  38              		.cfi_offset 14, -4
  39 0002 84B0     		sub	sp, sp, #16
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 24
  42 0004 00AF     		add	r7, sp, #0
  43              	.LCFI2:
  44              		.cfi_def_cfa_register 7
  45 0006 3960     		str	r1, [r7]
  46 0008 FB1D     		add	r3, r7, #7
  47 000a 011C     		add	r1, r0, #0
  48 000c 1970     		strb	r1, [r3]
  49 000e 3B1D     		add	r3, r7, #4
  50 0010 1A80     		strh	r2, [r3]
  30:../Sources/MMA8451.c ****   uint8_t res;
  31:../Sources/MMA8451.c ****   
  32:../Sources/MMA8451.c ****   /* Send I2C address plus register address to the I2C bus *without* a stop condition */
  33:../Sources/MMA8451.c ****   res = I2C2_MasterSendBlock(deviceData.handle, &addr, 1U, LDD_I2C_NO_SEND_STOP);
  51              		.loc 1 33 0
  52 0012 214B     		ldr	r3, .L9
  53 0014 5A68     		ldr	r2, [r3, #4]
  54 0016 FB1D     		add	r3, r7, #7
  55 0018 101C     		mov	r0, r2
  56 001a 191C     		mov	r1, r3
  57 001c 0122     		mov	r2, #1
  58 001e 0023     		mov	r3, #0
  59 0020 FFF7FEFF 		bl	I2C2_MasterSendBlock
  60 0024 031C     		mov	r3, r0
  61 0026 1A1C     		mov	r2, r3
  62 0028 3B1C     		mov	r3, r7
  63 002a 0F33     		add	r3, r3, #15
  64 002c 1A70     		strb	r2, [r3]
  34:../Sources/MMA8451.c ****   if (res!=ERR_OK) {
  65              		.loc 1 34 0
  66 002e 3B1C     		mov	r3, r7
  67 0030 0F33     		add	r3, r3, #15
  68 0032 1B78     		ldrb	r3, [r3]
  69 0034 002B     		cmp	r3, #0
  70 0036 01D0     		beq	.L7
  35:../Sources/MMA8451.c ****     return ERR_FAILED;
  71              		.loc 1 35 0
  72 0038 1B23     		mov	r3, #27
  73 003a 29E0     		b	.L3
  74              	.L7:
  36:../Sources/MMA8451.c ****   }
  37:../Sources/MMA8451.c ****   while (!deviceData.dataTransmittedFlg) {} /* Wait until data is sent */
  75              		.loc 1 37 0
  76 003c C046     		mov	r8, r8
  77              	.L4:
  78              		.loc 1 37 0 is_stmt 0
  79 003e 164B     		ldr	r3, .L9
  80 0040 5B78     		ldrb	r3, [r3, #1]
  81 0042 DBB2     		uxtb	r3, r3
  82 0044 002B     		cmp	r3, #0
  83 0046 FAD0     		beq	.L4
  38:../Sources/MMA8451.c ****   deviceData.dataTransmittedFlg = FALSE;
  84              		.loc 1 38 0 is_stmt 1
  85 0048 134B     		ldr	r3, .L9
  86 004a 0022     		mov	r2, #0
  87 004c 5A70     		strb	r2, [r3, #1]
  39:../Sources/MMA8451.c **** 
  40:../Sources/MMA8451.c ****   /* Receive InpData (1 byte) from the I2C bus and generates a stop condition to end transmission *
  41:../Sources/MMA8451.c ****   res = I2C2_MasterReceiveBlock(deviceData.handle, data, dataSize, LDD_I2C_SEND_STOP);
  88              		.loc 1 41 0
  89 004e 124B     		ldr	r3, .L9
  90 0050 5968     		ldr	r1, [r3, #4]
  91 0052 3B1D     		add	r3, r7, #4
  92 0054 1B88     		ldrh	r3, [r3]
  93 0056 3A68     		ldr	r2, [r7]
  94 0058 081C     		mov	r0, r1
  95 005a 111C     		mov	r1, r2
  96 005c 1A1C     		mov	r2, r3
  97 005e 0123     		mov	r3, #1
  98 0060 FFF7FEFF 		bl	I2C2_MasterReceiveBlock
  99 0064 031C     		mov	r3, r0
 100 0066 1A1C     		mov	r2, r3
 101 0068 3B1C     		mov	r3, r7
 102 006a 0F33     		add	r3, r3, #15
 103 006c 1A70     		strb	r2, [r3]
  42:../Sources/MMA8451.c ****   if (res!=ERR_OK) {
 104              		.loc 1 42 0
 105 006e 3B1C     		mov	r3, r7
 106 0070 0F33     		add	r3, r3, #15
 107 0072 1B78     		ldrb	r3, [r3]
 108 0074 002B     		cmp	r3, #0
 109 0076 01D0     		beq	.L8
  43:../Sources/MMA8451.c **** 	  return ERR_FAILED;
 110              		.loc 1 43 0
 111 0078 1B23     		mov	r3, #27
 112 007a 09E0     		b	.L3
 113              	.L8:
  44:../Sources/MMA8451.c ****   }
  45:../Sources/MMA8451.c ****   while (!deviceData.dataReceivedFlg) {} /* Wait until data is received received */
 114              		.loc 1 45 0
 115 007c C046     		mov	r8, r8
 116              	.L6:
 117              		.loc 1 45 0 is_stmt 0
 118 007e 064B     		ldr	r3, .L9
 119 0080 1B78     		ldrb	r3, [r3]
 120 0082 DBB2     		uxtb	r3, r3
 121 0084 002B     		cmp	r3, #0
 122 0086 FAD0     		beq	.L6
  46:../Sources/MMA8451.c ****   deviceData.dataReceivedFlg = FALSE;
 123              		.loc 1 46 0 is_stmt 1
 124 0088 034B     		ldr	r3, .L9
 125 008a 0022     		mov	r2, #0
 126 008c 1A70     		strb	r2, [r3]
  47:../Sources/MMA8451.c ****   return ERR_OK;
 127              		.loc 1 47 0
 128 008e 0023     		mov	r3, #0
 129              	.L3:
  48:../Sources/MMA8451.c **** }
 130              		.loc 1 48 0
 131 0090 181C     		mov	r0, r3
 132 0092 BD46     		mov	sp, r7
 133 0094 04B0     		add	sp, sp, #16
 134              		@ sp needed for prologue
 135 0096 80BD     		pop	{r7, pc}
 136              	.L10:
 137              		.align	2
 138              	.L9:
 139 0098 00000000 		.word	deviceData
 140              		.cfi_endproc
 141              	.LFE0:
 143              		.section	.text.MMA8451_WriteReg,"ax",%progbits
 144              		.align	2
 145              		.global	MMA8451_WriteReg
 146              		.code	16
 147              		.thumb_func
 149              	MMA8451_WriteReg:
 150              	.LFB1:
  49:../Sources/MMA8451.c **** 
  50:../Sources/MMA8451.c **** uint8_t MMA8451_WriteReg(uint8_t addr, uint8_t val) {
 151              		.loc 1 50 0
 152              		.cfi_startproc
 153 0000 80B5     		push	{r7, lr}
 154              	.LCFI3:
 155              		.cfi_def_cfa_offset 8
 156              		.cfi_offset 7, -8
 157              		.cfi_offset 14, -4
 158 0002 84B0     		sub	sp, sp, #16
 159              	.LCFI4:
 160              		.cfi_def_cfa_offset 24
 161 0004 00AF     		add	r7, sp, #0
 162              	.LCFI5:
 163              		.cfi_def_cfa_register 7
 164 0006 0A1C     		mov	r2, r1
 165 0008 FB1D     		add	r3, r7, #7
 166 000a 011C     		add	r1, r0, #0
 167 000c 1970     		strb	r1, [r3]
 168 000e BB1D     		add	r3, r7, #6
 169 0010 1A70     		strb	r2, [r3]
  51:../Sources/MMA8451.c ****   uint8_t buf[2], res;
  52:../Sources/MMA8451.c **** 
  53:../Sources/MMA8451.c ****   buf[0] = addr;
 170              		.loc 1 53 0
 171 0012 3B1C     		mov	r3, r7
 172 0014 0C33     		add	r3, r3, #12
 173 0016 FA1D     		add	r2, r7, #7
 174 0018 1278     		ldrb	r2, [r2]
 175 001a 1A70     		strb	r2, [r3]
  54:../Sources/MMA8451.c ****   buf[1] = val;
 176              		.loc 1 54 0
 177 001c 3B1C     		mov	r3, r7
 178 001e 0C33     		add	r3, r3, #12
 179 0020 BA1D     		add	r2, r7, #6
 180 0022 1278     		ldrb	r2, [r2]
 181 0024 5A70     		strb	r2, [r3, #1]
  55:../Sources/MMA8451.c **** 	res = I2C2_MasterSendBlock(deviceData.handle, &buf, 2U, LDD_I2C_SEND_STOP); /* Send OutData (3 byt
 182              		.loc 1 55 0
 183 0026 124B     		ldr	r3, .L17
 184 0028 5A68     		ldr	r2, [r3, #4]
 185 002a 3B1C     		mov	r3, r7
 186 002c 0C33     		add	r3, r3, #12
 187 002e 101C     		mov	r0, r2
 188 0030 191C     		mov	r1, r3
 189 0032 0222     		mov	r2, #2
 190 0034 0123     		mov	r3, #1
 191 0036 FFF7FEFF 		bl	I2C2_MasterSendBlock
 192 003a 031C     		mov	r3, r0
 193 003c 1A1C     		mov	r2, r3
 194 003e 3B1C     		mov	r3, r7
 195 0040 0F33     		add	r3, r3, #15
 196 0042 1A70     		strb	r2, [r3]
  56:../Sources/MMA8451.c **** 	if (res!=ERR_OK) {
 197              		.loc 1 56 0
 198 0044 3B1C     		mov	r3, r7
 199 0046 0F33     		add	r3, r3, #15
 200 0048 1B78     		ldrb	r3, [r3]
 201 004a 002B     		cmp	r3, #0
 202 004c 01D0     		beq	.L16
  57:../Sources/MMA8451.c **** 	  return ERR_FAILED;
 203              		.loc 1 57 0
 204 004e 1B23     		mov	r3, #27
 205 0050 09E0     		b	.L15
 206              	.L16:
  58:../Sources/MMA8451.c **** 	}
  59:../Sources/MMA8451.c ****   while (!deviceData.dataTransmittedFlg) {}  /* Wait until date is sent */
 207              		.loc 1 59 0
 208 0052 C046     		mov	r8, r8
 209              	.L14:
 210              		.loc 1 59 0 is_stmt 0
 211 0054 064B     		ldr	r3, .L17
 212 0056 5B78     		ldrb	r3, [r3, #1]
 213 0058 DBB2     		uxtb	r3, r3
 214 005a 002B     		cmp	r3, #0
 215 005c FAD0     		beq	.L14
  60:../Sources/MMA8451.c **** 	deviceData.dataTransmittedFlg = FALSE;
 216              		.loc 1 60 0 is_stmt 1
 217 005e 044B     		ldr	r3, .L17
 218 0060 0022     		mov	r2, #0
 219 0062 5A70     		strb	r2, [r3, #1]
  61:../Sources/MMA8451.c **** 	return ERR_OK;
 220              		.loc 1 61 0
 221 0064 0023     		mov	r3, #0
 222              	.L15:
  62:../Sources/MMA8451.c **** }
 223              		.loc 1 62 0
 224 0066 181C     		mov	r0, r3
 225 0068 BD46     		mov	sp, r7
 226 006a 04B0     		add	sp, sp, #16
 227              		@ sp needed for prologue
 228 006c 80BD     		pop	{r7, pc}
 229              	.L18:
 230 006e C046     		.align	2
 231              	.L17:
 232 0070 00000000 		.word	deviceData
 233              		.cfi_endproc
 234              	.LFE1:
 236              		.section	.bss.xyz,"aw",%nobits
 237              		.align	2
 240              	xyz:
 241 0000 000000   		.space	3
 242 0003 00       		.section	.text.MMA8451_Run,"ax",%progbits
 243              		.align	2
 244              		.global	MMA8451_Run
 245              		.code	16
 246              		.thumb_func
 248              	MMA8451_Run:
 249              	.LFB2:
  63:../Sources/MMA8451.c **** 
  64:../Sources/MMA8451.c **** static int8_t xyz[3];
  65:../Sources/MMA8451.c **** 
  66:../Sources/MMA8451.c **** void MMA8451_Run(void) {
 250              		.loc 1 66 0
 251              		.cfi_startproc
 252 0000 90B5     		push	{r4, r7, lr}
 253              	.LCFI6:
 254              		.cfi_def_cfa_offset 12
 255              		.cfi_offset 4, -12
 256              		.cfi_offset 7, -8
 257              		.cfi_offset 14, -4
 258 0002 83B0     		sub	sp, sp, #12
 259              	.LCFI7:
 260              		.cfi_def_cfa_offset 24
 261 0004 00AF     		add	r7, sp, #0
 262              	.LCFI8:
 263              		.cfi_def_cfa_register 7
  67:../Sources/MMA8451.c ****   uint8_t res;
  68:../Sources/MMA8451.c ****   
  69:../Sources/MMA8451.c ****   LED1_On();
 264              		.loc 1 69 0
 265 0006 394B     		ldr	r3, .L28
 266 0008 1B68     		ldr	r3, [r3]
 267 000a 181C     		mov	r0, r3
 268 000c FFF7FEFF 		bl	BitIoLdd4_ClrVal
  70:../Sources/MMA8451.c ****   LED2_On();
 269              		.loc 1 70 0
 270 0010 364B     		ldr	r3, .L28
 271 0012 5B68     		ldr	r3, [r3, #4]
 272 0014 181C     		mov	r0, r3
 273 0016 FFF7FEFF 		bl	BitIoLdd5_ClrVal
  71:../Sources/MMA8451.c ****   LED3_On();
 274              		.loc 1 71 0
 275 001a 344B     		ldr	r3, .L28
 276 001c 9B68     		ldr	r3, [r3, #8]
 277 001e 181C     		mov	r0, r3
 278 0020 FFF7FEFF 		bl	BitIoLdd6_ClrVal
  72:../Sources/MMA8451.c ****   deviceData.handle = I2C2_Init(&deviceData);
 279              		.loc 1 72 0
 280 0024 324B     		ldr	r3, .L28+4
 281 0026 181C     		mov	r0, r3
 282 0028 FFF7FEFF 		bl	I2C2_Init
 283 002c 021C     		mov	r2, r0
 284 002e 304B     		ldr	r3, .L28+4
 285 0030 5A60     		str	r2, [r3, #4]
  73:../Sources/MMA8451.c ****   /* F_READ: Fast read mode, data format limited to single byte (auto increment counter will skip L
  74:../Sources/MMA8451.c ****    * ACTIVE: Full scale selection
  75:../Sources/MMA8451.c ****    */
  76:../Sources/MMA8451.c ****   res = MMA8451_WriteReg(MMA8451_CTRL_REG_1,  MMA8451_F_READ_BIT_MASK|MMA8451_ACTIVE_BIT_MASK);
 286              		.loc 1 76 0
 287 0032 FC1D     		add	r4, r7, #7
 288 0034 2A20     		mov	r0, #42
 289 0036 0321     		mov	r1, #3
 290 0038 FFF7FEFF 		bl	MMA8451_WriteReg
 291 003c 031C     		mov	r3, r0
 292 003e 2370     		strb	r3, [r4]
  77:../Sources/MMA8451.c ****   if (res==ERR_OK) {
 293              		.loc 1 77 0
 294 0040 FB1D     		add	r3, r7, #7
 295 0042 1B78     		ldrb	r3, [r3]
 296 0044 002B     		cmp	r3, #0
 297 0046 39D1     		bne	.L20
 298              	.L27:
  78:../Sources/MMA8451.c ****     for(;;) {
  79:../Sources/MMA8451.c ****       res = MMA8451_ReadReg(MMA8451_OUT_X_MSB, (uint8_t*)&xyz, 3);
 299              		.loc 1 79 0
 300 0048 FC1D     		add	r4, r7, #7
 301 004a 2A4B     		ldr	r3, .L28+8
 302 004c 0120     		mov	r0, #1
 303 004e 191C     		mov	r1, r3
 304 0050 0322     		mov	r2, #3
 305 0052 FFF7FEFF 		bl	MMA8451_ReadReg
 306 0056 031C     		mov	r3, r0
 307 0058 2370     		strb	r3, [r4]
  80:../Sources/MMA8451.c ****       LED1_Put(xyz[0]>50);
 308              		.loc 1 80 0
 309 005a 264B     		ldr	r3, .L28+8
 310 005c 1B78     		ldrb	r3, [r3]
 311 005e 5BB2     		sxtb	r3, r3
 312 0060 322B     		cmp	r3, #50
 313 0062 05DD     		ble	.L21
 314              		.loc 1 80 0 is_stmt 0
 315 0064 214B     		ldr	r3, .L28
 316 0066 1B68     		ldr	r3, [r3]
 317 0068 181C     		mov	r0, r3
 318 006a FFF7FEFF 		bl	BitIoLdd4_ClrVal
 319 006e 04E0     		b	.L22
 320              	.L21:
 321              		.loc 1 80 0
 322 0070 1E4B     		ldr	r3, .L28
 323 0072 1B68     		ldr	r3, [r3]
 324 0074 181C     		mov	r0, r3
 325 0076 FFF7FEFF 		bl	BitIoLdd4_SetVal
 326              	.L22:
  81:../Sources/MMA8451.c ****       LED2_Put(xyz[1]>50);
 327              		.loc 1 81 0 is_stmt 1
 328 007a 1E4B     		ldr	r3, .L28+8
 329 007c 5B78     		ldrb	r3, [r3, #1]
 330 007e 5BB2     		sxtb	r3, r3
 331 0080 322B     		cmp	r3, #50
 332 0082 05DD     		ble	.L23
 333              		.loc 1 81 0 is_stmt 0
 334 0084 194B     		ldr	r3, .L28
 335 0086 5B68     		ldr	r3, [r3, #4]
 336 0088 181C     		mov	r0, r3
 337 008a FFF7FEFF 		bl	BitIoLdd5_ClrVal
 338 008e 04E0     		b	.L24
 339              	.L23:
 340              		.loc 1 81 0
 341 0090 164B     		ldr	r3, .L28
 342 0092 5B68     		ldr	r3, [r3, #4]
 343 0094 181C     		mov	r0, r3
 344 0096 FFF7FEFF 		bl	BitIoLdd5_SetVal
 345              	.L24:
  82:../Sources/MMA8451.c ****       LED3_Put(xyz[2]>50);
 346              		.loc 1 82 0 is_stmt 1
 347 009a 164B     		ldr	r3, .L28+8
 348 009c 9B78     		ldrb	r3, [r3, #2]
 349 009e 5BB2     		sxtb	r3, r3
 350 00a0 322B     		cmp	r3, #50
 351 00a2 05DD     		ble	.L25
 352              		.loc 1 82 0 is_stmt 0
 353 00a4 114B     		ldr	r3, .L28
 354 00a6 9B68     		ldr	r3, [r3, #8]
 355 00a8 181C     		mov	r0, r3
 356 00aa FFF7FEFF 		bl	BitIoLdd6_ClrVal
  83:../Sources/MMA8451.c ****     }
 357              		.loc 1 83 0 is_stmt 1
 358 00ae CBE7     		b	.L27
 359              	.L25:
  82:../Sources/MMA8451.c ****       LED3_Put(xyz[2]>50);
 360              		.loc 1 82 0
 361 00b0 0E4B     		ldr	r3, .L28
 362 00b2 9B68     		ldr	r3, [r3, #8]
 363 00b4 181C     		mov	r0, r3
 364 00b6 FFF7FEFF 		bl	BitIoLdd6_SetVal
 365              		.loc 1 83 0
 366 00ba C5E7     		b	.L27
 367              	.L20:
  84:../Sources/MMA8451.c ****   }
  85:../Sources/MMA8451.c ****   I2C2_Deinit(deviceData.handle);
 368              		.loc 1 85 0
 369 00bc 0C4B     		ldr	r3, .L28+4
 370 00be 5B68     		ldr	r3, [r3, #4]
 371 00c0 181C     		mov	r0, r3
 372 00c2 FFF7FEFF 		bl	I2C2_Deinit
  86:../Sources/MMA8451.c ****   LED1_Off();
 373              		.loc 1 86 0
 374 00c6 094B     		ldr	r3, .L28
 375 00c8 1B68     		ldr	r3, [r3]
 376 00ca 181C     		mov	r0, r3
 377 00cc FFF7FEFF 		bl	BitIoLdd4_SetVal
  87:../Sources/MMA8451.c ****   LED2_Off();
 378              		.loc 1 87 0
 379 00d0 064B     		ldr	r3, .L28
 380 00d2 5B68     		ldr	r3, [r3, #4]
 381 00d4 181C     		mov	r0, r3
 382 00d6 FFF7FEFF 		bl	BitIoLdd5_SetVal
  88:../Sources/MMA8451.c ****   LED3_Off();
 383              		.loc 1 88 0
 384 00da 044B     		ldr	r3, .L28
 385 00dc 9B68     		ldr	r3, [r3, #8]
 386 00de 181C     		mov	r0, r3
 387 00e0 FFF7FEFF 		bl	BitIoLdd6_SetVal
  89:../Sources/MMA8451.c **** }
 388              		.loc 1 89 0
 389 00e4 BD46     		mov	sp, r7
 390 00e6 03B0     		add	sp, sp, #12
 391              		@ sp needed for prologue
 392 00e8 90BD     		pop	{r4, r7, pc}
 393              	.L29:
 394 00ea C046     		.align	2
 395              	.L28:
 396 00ec 00000000 		.word	PE_LDD_DeviceDataList
 397 00f0 00000000 		.word	deviceData
 398 00f4 00000000 		.word	xyz
 399              		.cfi_endproc
 400              	.LFE2:
 402              		.text
 403              	.Letext0:
 404              		.file 2 "C:/Freescale/CW MCU v10.7/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 405              		.file 3 "D:/15. MyFactory/MC - Microcontroller/HSLU/MC_Uebungen/Freedom_Accel/Generated_Code/PE_Ty
 406              		.file 4 "../Sources/MMA8451.h"
 407              		.file 5 "D:/15. MyFactory/MC - Microcontroller/HSLU/MC_Uebungen/Freedom_Accel/Generated_Code/PE_LD
DEFINED SYMBOLS
                            *ABS*:00000000 MMA8451.c
C:\Users\burak\AppData\Local\Temp\cciZEyWL.s:18     .bss.deviceData:00000000 $d
C:\Users\burak\AppData\Local\Temp\cciZEyWL.s:21     .bss.deviceData:00000000 deviceData
C:\Users\burak\AppData\Local\Temp\cciZEyWL.s:24     .text.MMA8451_ReadReg:00000000 $t
C:\Users\burak\AppData\Local\Temp\cciZEyWL.s:29     .text.MMA8451_ReadReg:00000000 MMA8451_ReadReg
C:\Users\burak\AppData\Local\Temp\cciZEyWL.s:139    .text.MMA8451_ReadReg:00000098 $d
C:\Users\burak\AppData\Local\Temp\cciZEyWL.s:144    .text.MMA8451_WriteReg:00000000 $t
C:\Users\burak\AppData\Local\Temp\cciZEyWL.s:149    .text.MMA8451_WriteReg:00000000 MMA8451_WriteReg
C:\Users\burak\AppData\Local\Temp\cciZEyWL.s:232    .text.MMA8451_WriteReg:00000070 $d
C:\Users\burak\AppData\Local\Temp\cciZEyWL.s:237    .bss.xyz:00000000 $d
C:\Users\burak\AppData\Local\Temp\cciZEyWL.s:240    .bss.xyz:00000000 xyz
C:\Users\burak\AppData\Local\Temp\cciZEyWL.s:243    .text.MMA8451_Run:00000000 $t
C:\Users\burak\AppData\Local\Temp\cciZEyWL.s:248    .text.MMA8451_Run:00000000 MMA8451_Run
C:\Users\burak\AppData\Local\Temp\cciZEyWL.s:396    .text.MMA8451_Run:000000ec $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
I2C2_MasterSendBlock
I2C2_MasterReceiveBlock
BitIoLdd4_ClrVal
BitIoLdd5_ClrVal
BitIoLdd6_ClrVal
I2C2_Init
BitIoLdd4_SetVal
BitIoLdd5_SetVal
BitIoLdd6_SetVal
I2C2_Deinit
PE_LDD_DeviceDataList
