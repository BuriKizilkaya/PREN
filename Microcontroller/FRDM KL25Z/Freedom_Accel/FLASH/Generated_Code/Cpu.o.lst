   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"Cpu.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	SR_reg,1,1
  18              		.global	SR_lock
  19              		.section	.bss.SR_lock,"aw",%nobits
  22              	SR_lock:
  23 0000 00       		.space	1
  24              		.section	.text.Cpu_INT_NMIInterrupt,"ax",%progbits
  25              		.align	2
  26              		.global	Cpu_INT_NMIInterrupt
  27              		.code	16
  28              		.thumb_func
  30              	Cpu_INT_NMIInterrupt:
  31              	.LFB0:
  32              		.file 1 "../Generated_Code/Cpu.c"
   1:../Generated_Code/Cpu.c **** /** ###################################################################
   2:../Generated_Code/Cpu.c **** **     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
   3:../Generated_Code/Cpu.c **** **     Filename    : Cpu.c
   4:../Generated_Code/Cpu.c **** **     Project     : ProcessorExpert
   5:../Generated_Code/Cpu.c **** **     Processor   : MKL25Z128VLK4
   6:../Generated_Code/Cpu.c **** **     Component   : MKL25Z128LK4
   7:../Generated_Code/Cpu.c **** **     Version     : Component 01.025, Driver 01.04, CPU db: 3.00.000
   8:../Generated_Code/Cpu.c **** **     Datasheet   : KL25P80M48SF0RM, Rev.3, Sep 2012
   9:../Generated_Code/Cpu.c **** **     Compiler    : GNU C Compiler
  10:../Generated_Code/Cpu.c **** **     Date/Time   : 2012-12-25, 18:56, # CodeGen: 13
  11:../Generated_Code/Cpu.c **** **     Abstract    :
  12:../Generated_Code/Cpu.c **** **
  13:../Generated_Code/Cpu.c **** **     Settings    :
  14:../Generated_Code/Cpu.c **** **
  15:../Generated_Code/Cpu.c **** **     Contents    :
  16:../Generated_Code/Cpu.c **** **         No public methods
  17:../Generated_Code/Cpu.c **** **
  18:../Generated_Code/Cpu.c **** **     Copyright : 1997 - 2012 Freescale, Inc. All Rights Reserved.
  19:../Generated_Code/Cpu.c **** **     
  20:../Generated_Code/Cpu.c **** **     http      : www.freescale.com
  21:../Generated_Code/Cpu.c **** **     mail      : support@freescale.com
  22:../Generated_Code/Cpu.c **** ** ###################################################################*/
  23:../Generated_Code/Cpu.c **** 
  24:../Generated_Code/Cpu.c **** /* MODULE Cpu. */
  25:../Generated_Code/Cpu.c **** #include "LED1.h"
  26:../Generated_Code/Cpu.c **** #include "LEDpin4.h"
  27:../Generated_Code/Cpu.c **** #include "BitIoLdd4.h"
  28:../Generated_Code/Cpu.c **** #include "LED2.h"
  29:../Generated_Code/Cpu.c **** #include "LEDpin5.h"
  30:../Generated_Code/Cpu.c **** #include "BitIoLdd5.h"
  31:../Generated_Code/Cpu.c **** #include "LED3.h"
  32:../Generated_Code/Cpu.c **** #include "LEDpin6.h"
  33:../Generated_Code/Cpu.c **** #include "BitIoLdd6.h"
  34:../Generated_Code/Cpu.c **** #include "I2C2.h"
  35:../Generated_Code/Cpu.c **** #include "PE_Types.h"
  36:../Generated_Code/Cpu.c **** #include "PE_Error.h"
  37:../Generated_Code/Cpu.c **** #include "PE_Const.h"
  38:../Generated_Code/Cpu.c **** #include "IO_Map.h"
  39:../Generated_Code/Cpu.c **** #include "Events.h"
  40:../Generated_Code/Cpu.c **** #include "Cpu.h"
  41:../Generated_Code/Cpu.c **** 
  42:../Generated_Code/Cpu.c **** /* Global variables */
  43:../Generated_Code/Cpu.c **** volatile uint8_t SR_reg;               /* Current value of the FAULTMASK register */
  44:../Generated_Code/Cpu.c **** volatile uint8_t SR_lock = 0x00U;      /* Lock */
  45:../Generated_Code/Cpu.c **** 
  46:../Generated_Code/Cpu.c **** 
  47:../Generated_Code/Cpu.c **** /*
  48:../Generated_Code/Cpu.c **** ** ===================================================================
  49:../Generated_Code/Cpu.c **** **     Method      :  Cpu_INT_NMIInterrupt (component MKL25Z128LK4)
  50:../Generated_Code/Cpu.c **** **
  51:../Generated_Code/Cpu.c **** **     Description :
  52:../Generated_Code/Cpu.c **** **         This ISR services the Non Maskable Interrupt interrupt.
  53:../Generated_Code/Cpu.c **** **         This method is internal. It is used by Processor Expert only.
  54:../Generated_Code/Cpu.c **** ** ===================================================================
  55:../Generated_Code/Cpu.c **** */
  56:../Generated_Code/Cpu.c **** PE_ISR(Cpu_INT_NMIInterrupt)
  57:../Generated_Code/Cpu.c **** {
  33              		.loc 1 57 0
  34              		.cfi_startproc
  35 0000 80B5     		push	{r7, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 8
  38              		.cfi_offset 7, -8
  39              		.cfi_offset 14, -4
  40 0002 00AF     		add	r7, sp, #0
  41              	.LCFI1:
  42              		.cfi_def_cfa_register 7
  58:../Generated_Code/Cpu.c ****   Cpu_OnNMIINT();
  43              		.loc 1 58 0
  44 0004 FFF7FEFF 		bl	Cpu_OnNMIINT
  59:../Generated_Code/Cpu.c **** }
  45              		.loc 1 59 0
  46 0008 BD46     		mov	sp, r7
  47              		@ sp needed for prologue
  48 000a 80BD     		pop	{r7, pc}
  49              		.cfi_endproc
  50              	.LFE0:
  52              		.section	.text.Cpu_Interrupt,"ax",%progbits
  53              		.align	2
  54              		.global	Cpu_Interrupt
  55              		.code	16
  56              		.thumb_func
  58              	Cpu_Interrupt:
  59              	.LFB1:
  60:../Generated_Code/Cpu.c **** 
  61:../Generated_Code/Cpu.c **** /*
  62:../Generated_Code/Cpu.c **** ** ===================================================================
  63:../Generated_Code/Cpu.c **** **     Method      :  Cpu_Cpu_Interrupt (component MKL25Z128LK4)
  64:../Generated_Code/Cpu.c **** **
  65:../Generated_Code/Cpu.c **** **     Description :
  66:../Generated_Code/Cpu.c **** **         This ISR services an unused interrupt/exception vector.
  67:../Generated_Code/Cpu.c **** **         This method is internal. It is used by Processor Expert only.
  68:../Generated_Code/Cpu.c **** ** ===================================================================
  69:../Generated_Code/Cpu.c **** */
  70:../Generated_Code/Cpu.c **** PE_ISR(Cpu_Interrupt)
  71:../Generated_Code/Cpu.c **** {
  60              		.loc 1 71 0
  61              		.cfi_startproc
  62 0000 80B5     		push	{r7, lr}
  63              	.LCFI2:
  64              		.cfi_def_cfa_offset 8
  65              		.cfi_offset 7, -8
  66              		.cfi_offset 14, -4
  67 0002 00AF     		add	r7, sp, #0
  68              	.LCFI3:
  69              		.cfi_def_cfa_register 7
  72:../Generated_Code/Cpu.c ****   /* This code can be changed using the CPU component property "Build Options / Unhandled int code"
  73:../Generated_Code/Cpu.c ****   PE_DEBUGHALT();
  70              		.loc 1 73 0
  71              	@ 73 "../Generated_Code/Cpu.c" 1
  72 0004 FFBE     		BKPT 255
  73              	@ 0 "" 2
  74:../Generated_Code/Cpu.c **** }
  74              		.loc 1 74 0
  75              		.code	16
  76 0006 BD46     		mov	sp, r7
  77              		@ sp needed for prologue
  78 0008 80BD     		pop	{r7, pc}
  79              		.cfi_endproc
  80              	.LFE1:
  82 000a C046     		.section	.text.__init_hardware,"ax",%progbits
  83              		.align	2
  84              		.global	__init_hardware
  85              		.code	16
  86              		.thumb_func
  88              	__init_hardware:
  89              	.LFB2:
  75:../Generated_Code/Cpu.c **** 
  76:../Generated_Code/Cpu.c **** 
  77:../Generated_Code/Cpu.c **** /*** !!! Here you can place your own code using property "User data declarations" on the build opti
  78:../Generated_Code/Cpu.c **** 
  79:../Generated_Code/Cpu.c **** /*lint -esym(765,__init_hardware) Disable MISRA rule (8.10) checking for symbols (__init_hardware).
  80:../Generated_Code/Cpu.c **** /*lint -esym(765,Cpu_Interrupt) Disable MISRA rule (8.10) checking for symbols (Cpu_Interrupt). */
  81:../Generated_Code/Cpu.c **** void __init_hardware(void)
  82:../Generated_Code/Cpu.c **** {
  90              		.loc 1 82 0
  91              		.cfi_startproc
  92 0000 80B5     		push	{r7, lr}
  93              	.LCFI4:
  94              		.cfi_def_cfa_offset 8
  95              		.cfi_offset 7, -8
  96              		.cfi_offset 14, -4
  97 0002 00AF     		add	r7, sp, #0
  98              	.LCFI5:
  99              		.cfi_def_cfa_register 7
  83:../Generated_Code/Cpu.c **** 
  84:../Generated_Code/Cpu.c ****   /*** !!! Here you can place your own code before PE initialization using property "User code befo
  85:../Generated_Code/Cpu.c **** 
  86:../Generated_Code/Cpu.c ****   /*** ### MKL25Z128VLK4 "Cpu" init code ... ***/
  87:../Generated_Code/Cpu.c ****   /*** PE initialization code after reset ***/
  88:../Generated_Code/Cpu.c ****   SCB_VTOR = (uint32_t)(&__vect_table); /* Set the interrupt vector table position */
 100              		.loc 1 88 0
 101 0004 2B4A     		ldr	r2, .L6
 102 0006 2C49     		ldr	r1, .L6+4
 103 0008 2C4B     		ldr	r3, .L6+8
 104 000a D150     		str	r1, [r2, r3]
  89:../Generated_Code/Cpu.c ****   /* Disable the WDOG module */
  90:../Generated_Code/Cpu.c ****   /* SIM_COPC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0
  91:../Generated_Code/Cpu.c ****   SIM_COPC = 0x00U;                                                   
 105              		.loc 1 91 0
 106 000c 2C4A     		ldr	r2, .L6+12
 107 000e 8823     		mov	r3, #136
 108 0010 5B01     		lsl	r3, r3, #5
 109 0012 0021     		mov	r1, #0
 110 0014 D150     		str	r1, [r2, r3]
  92:../Generated_Code/Cpu.c ****   /* System clock initialization */
  93:../Generated_Code/Cpu.c ****   /* SIM_SCGC5: PORTE=1,PORTD=1,PORTB=1,PORTA=1 */
  94:../Generated_Code/Cpu.c ****   SIM_SCGC5 |= SIM_SCGC5_PORTE_MASK |
 111              		.loc 1 94 0
 112 0016 2A4A     		ldr	r2, .L6+12
 113 0018 2949     		ldr	r1, .L6+12
 114 001a 2A4B     		ldr	r3, .L6+16
 115 001c CB58     		ldr	r3, [r1, r3]
 116 001e D821     		mov	r1, #216
 117 0020 8901     		lsl	r1, r1, #6
 118 0022 1943     		orr	r1, r3
 119 0024 274B     		ldr	r3, .L6+16
 120 0026 D150     		str	r1, [r2, r3]
  95:../Generated_Code/Cpu.c ****                SIM_SCGC5_PORTD_MASK |
  96:../Generated_Code/Cpu.c ****                SIM_SCGC5_PORTB_MASK |
  97:../Generated_Code/Cpu.c ****                SIM_SCGC5_PORTA_MASK;   /* Enable clock gate for ports to enable pin routing */
  98:../Generated_Code/Cpu.c ****   /* SIM_CLKDIV1: OUTDIV1=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,OUTDIV4=0,??=0,??=0,??=0,?
  99:../Generated_Code/Cpu.c ****   SIM_CLKDIV1 = 0x00U;                 /* Update system prescalers */
 121              		.loc 1 99 0
 122 0028 254A     		ldr	r2, .L6+12
 123 002a 274B     		ldr	r3, .L6+20
 124 002c 0021     		mov	r1, #0
 125 002e D150     		str	r1, [r2, r3]
 100:../Generated_Code/Cpu.c ****   /* SIM_SOPT2: PLLFLLSEL=0 */
 101:../Generated_Code/Cpu.c ****   SIM_SOPT2 &= (uint32_t)~(uint32_t)(SIM_SOPT2_PLLFLLSEL_MASK); /* Select FLL as a clock source for
 126              		.loc 1 101 0
 127 0030 234A     		ldr	r2, .L6+12
 128 0032 2349     		ldr	r1, .L6+12
 129 0034 254B     		ldr	r3, .L6+24
 130 0036 C958     		ldr	r1, [r1, r3]
 131 0038 254B     		ldr	r3, .L6+28
 132 003a 1940     		and	r1, r3
 133 003c 234B     		ldr	r3, .L6+24
 134 003e D150     		str	r1, [r2, r3]
 102:../Generated_Code/Cpu.c ****   /* SIM_SOPT1: OSC32KSEL=0 */
 103:../Generated_Code/Cpu.c ****   SIM_SOPT1 &= (uint32_t)~(uint32_t)(SIM_SOPT1_OSC32KSEL(0x03)); /* System oscillator drives 32 kHz
 135              		.loc 1 103 0
 136 0040 1F4B     		ldr	r3, .L6+12
 137 0042 1F4A     		ldr	r2, .L6+12
 138 0044 1168     		ldr	r1, [r2]
 139 0046 234A     		ldr	r2, .L6+32
 140 0048 0A40     		and	r2, r1
 141 004a 1A60     		str	r2, [r3]
 104:../Generated_Code/Cpu.c ****   /* SIM_SOPT2: TPMSRC=1 */
 105:../Generated_Code/Cpu.c ****   SIM_SOPT2 = (uint32_t)((SIM_SOPT2 & (uint32_t)~(uint32_t)(
 142              		.loc 1 105 0
 143 004c 1C4A     		ldr	r2, .L6+12
 144 004e 1C49     		ldr	r1, .L6+12
 145 0050 1E4B     		ldr	r3, .L6+24
 146 0052 C958     		ldr	r1, [r1, r3]
 147 0054 204B     		ldr	r3, .L6+36
 148 0056 0B40     		and	r3, r1
 149 0058 8021     		mov	r1, #128
 150 005a 4904     		lsl	r1, r1, #17
 151 005c 1943     		orr	r1, r3
 152 005e 1B4B     		ldr	r3, .L6+24
 153 0060 D150     		str	r1, [r2, r3]
 106:../Generated_Code/Cpu.c ****                SIM_SOPT2_TPMSRC(0x02)
 107:../Generated_Code/Cpu.c ****               )) | (uint32_t)(
 108:../Generated_Code/Cpu.c ****                SIM_SOPT2_TPMSRC(0x01)
 109:../Generated_Code/Cpu.c ****               ));                      /* Set the TPM clock */
 110:../Generated_Code/Cpu.c ****   /* Switch to FEI Mode */
 111:../Generated_Code/Cpu.c ****   /* MCG_C1: CLKS=0,FRDIV=0,IREFS=1,IRCLKEN=1,IREFSTEN=0 */
 112:../Generated_Code/Cpu.c ****   MCG_C1 = (MCG_C1_IREFS_MASK | MCG_C1_IRCLKEN_MASK);                                              
 154              		.loc 1 112 0
 155 0062 1E4B     		ldr	r3, .L6+40
 156 0064 0622     		mov	r2, #6
 157 0066 1A70     		strb	r2, [r3]
 113:../Generated_Code/Cpu.c ****   /* MCG_C2: LOCRE0=0,??=0,RANGE0=0,HGO0=0,EREFS0=0,LP=0,IRCS=0 */
 114:../Generated_Code/Cpu.c ****   MCG_C2 = 0x00U;                                                   
 158              		.loc 1 114 0
 159 0068 1C4B     		ldr	r3, .L6+40
 160 006a 0022     		mov	r2, #0
 161 006c 5A70     		strb	r2, [r3, #1]
 115:../Generated_Code/Cpu.c ****   /* MCG_C4: DMX32=0,DRST_DRS=0 */
 116:../Generated_Code/Cpu.c ****   MCG_C4 &= (uint8_t)~(uint8_t)((MCG_C4_DMX32_MASK | MCG_C4_DRST_DRS(0x03)));                      
 162              		.loc 1 116 0
 163 006e 1B4B     		ldr	r3, .L6+40
 164 0070 1A4A     		ldr	r2, .L6+40
 165 0072 D278     		ldrb	r2, [r2, #3]
 166 0074 D1B2     		uxtb	r1, r2
 167 0076 1F22     		mov	r2, #31
 168 0078 0A40     		and	r2, r1
 169 007a D2B2     		uxtb	r2, r2
 170 007c DA70     		strb	r2, [r3, #3]
 117:../Generated_Code/Cpu.c ****   /* OSC0_CR: ERCLKEN=1,??=0,EREFSTEN=0,??=0,SC2P=0,SC4P=0,SC8P=0,SC16P=0 */
 118:../Generated_Code/Cpu.c ****   OSC0_CR = OSC_CR_ERCLKEN_MASK;                                                   
 171              		.loc 1 118 0
 172 007e 184B     		ldr	r3, .L6+44
 173 0080 8022     		mov	r2, #128
 174 0082 1A70     		strb	r2, [r3]
 119:../Generated_Code/Cpu.c ****   /* MCG_C5: ??=0,PLLCLKEN0=0,PLLSTEN0=0,PRDIV0=0 */
 120:../Generated_Code/Cpu.c ****   MCG_C5 = 0x00U;                                                   
 175              		.loc 1 120 0
 176 0084 154B     		ldr	r3, .L6+40
 177 0086 0022     		mov	r2, #0
 178 0088 1A71     		strb	r2, [r3, #4]
 121:../Generated_Code/Cpu.c ****   /* MCG_C6: LOLIE0=0,PLLS=0,CME0=0,VDIV0=0 */
 122:../Generated_Code/Cpu.c ****   MCG_C6 = 0x00U;                                                   
 179              		.loc 1 122 0
 180 008a 144B     		ldr	r3, .L6+40
 181 008c 0022     		mov	r2, #0
 182 008e 5A71     		strb	r2, [r3, #5]
 123:../Generated_Code/Cpu.c ****   while((MCG_S & MCG_S_IREFST_MASK) == 0x00U) { /* Check that the source of the FLL reference clock
 183              		.loc 1 123 0
 184 0090 C046     		mov	r8, r8
 185              	.L4:
 186              		.loc 1 123 0 is_stmt 0
 187 0092 124B     		ldr	r3, .L6+40
 188 0094 9B79     		ldrb	r3, [r3, #6]
 189 0096 DBB2     		uxtb	r3, r3
 190 0098 1A1C     		mov	r2, r3
 191 009a 1023     		mov	r3, #16
 192 009c 1340     		and	r3, r2
 193 009e F8D0     		beq	.L4
 124:../Generated_Code/Cpu.c ****   }
 125:../Generated_Code/Cpu.c ****   while((MCG_S & 0x0CU) != 0x00U) {    /* Wait until output of the FLL is selected */
 194              		.loc 1 125 0 is_stmt 1
 195 00a0 C046     		mov	r8, r8
 196              	.L5:
 197              		.loc 1 125 0 is_stmt 0
 198 00a2 0E4B     		ldr	r3, .L6+40
 199 00a4 9B79     		ldrb	r3, [r3, #6]
 200 00a6 DBB2     		uxtb	r3, r3
 201 00a8 1A1C     		mov	r2, r3
 202 00aa 0C23     		mov	r3, #12
 203 00ac 1340     		and	r3, r2
 204 00ae F8D1     		bne	.L5
 126:../Generated_Code/Cpu.c ****   }
 127:../Generated_Code/Cpu.c ****   /*** End of PE initialization code after reset ***/
 128:../Generated_Code/Cpu.c **** 
 129:../Generated_Code/Cpu.c ****   /*** !!! Here you can place your own code after PE initialization using property "User code after
 130:../Generated_Code/Cpu.c **** 
 131:../Generated_Code/Cpu.c **** }
 205              		.loc 1 131 0 is_stmt 1
 206 00b0 BD46     		mov	sp, r7
 207              		@ sp needed for prologue
 208 00b2 80BD     		pop	{r7, pc}
 209              	.L7:
 210              		.align	2
 211              	.L6:
 212 00b4 00E000E0 		.word	-536813568
 213 00b8 00000000 		.word	__vect_table
 214 00bc 080D0000 		.word	3336
 215 00c0 00700440 		.word	1074032640
 216 00c4 38100000 		.word	4152
 217 00c8 44100000 		.word	4164
 218 00cc 04100000 		.word	4100
 219 00d0 FFFFFEFF 		.word	-65537
 220 00d4 FFFFF3FF 		.word	-786433
 221 00d8 FFFFFFFC 		.word	-50331649
 222 00dc 00400640 		.word	1074151424
 223 00e0 00500640 		.word	1074155520
 224              		.cfi_endproc
 225              	.LFE2:
 227              		.section	.text.PE_low_level_init,"ax",%progbits
 228              		.align	2
 229              		.global	PE_low_level_init
 230              		.code	16
 231              		.thumb_func
 233              	PE_low_level_init:
 234              	.LFB3:
 132:../Generated_Code/Cpu.c **** 
 133:../Generated_Code/Cpu.c **** 
 134:../Generated_Code/Cpu.c **** 
 135:../Generated_Code/Cpu.c **** /*
 136:../Generated_Code/Cpu.c **** ** ===================================================================
 137:../Generated_Code/Cpu.c **** **     Method      :  PE_low_level_init (component MKL25Z128LK4)
 138:../Generated_Code/Cpu.c **** **
 139:../Generated_Code/Cpu.c **** **     Description :
 140:../Generated_Code/Cpu.c **** **         Initializes beans and provides common register initialization. 
 141:../Generated_Code/Cpu.c **** **         The method is called automatically as a part of the 
 142:../Generated_Code/Cpu.c **** **         application initialization code.
 143:../Generated_Code/Cpu.c **** **         This method is internal. It is used by Processor Expert only.
 144:../Generated_Code/Cpu.c **** ** ===================================================================
 145:../Generated_Code/Cpu.c **** */
 146:../Generated_Code/Cpu.c **** void PE_low_level_init(void)
 147:../Generated_Code/Cpu.c **** {
 235              		.loc 1 147 0
 236              		.cfi_startproc
 237 0000 80B5     		push	{r7, lr}
 238              	.LCFI6:
 239              		.cfi_def_cfa_offset 8
 240              		.cfi_offset 7, -8
 241              		.cfi_offset 14, -4
 242 0002 00AF     		add	r7, sp, #0
 243              	.LCFI7:
 244              		.cfi_def_cfa_register 7
 148:../Generated_Code/Cpu.c ****   #ifdef PEX_RTOS_INIT
 149:../Generated_Code/Cpu.c ****     PEX_RTOS_INIT();                   /* Initialization of the selected RTOS. Macro is defined by 
 150:../Generated_Code/Cpu.c ****   #endif
 151:../Generated_Code/Cpu.c ****       /* Initialization of the SIM module */
 152:../Generated_Code/Cpu.c ****   /* PORTA_PCR4: ISF=0,MUX=7 */
 153:../Generated_Code/Cpu.c ****   PORTA_PCR4 = (uint32_t)((PORTA_PCR4 & (uint32_t)~(uint32_t)(
 245              		.loc 1 153 0
 246 0004 354B     		ldr	r3, .L9
 247 0006 354A     		ldr	r2, .L9
 248 0008 1169     		ldr	r1, [r2, #16]
 249 000a 354A     		ldr	r2, .L9+4
 250 000c 0A40     		and	r2, r1
 251 000e E021     		mov	r1, #224
 252 0010 C900     		lsl	r1, r1, #3
 253 0012 0A43     		orr	r2, r1
 254 0014 1A61     		str	r2, [r3, #16]
 154:../Generated_Code/Cpu.c ****                 PORT_PCR_ISF_MASK
 155:../Generated_Code/Cpu.c ****                )) | (uint32_t)(
 156:../Generated_Code/Cpu.c ****                 PORT_PCR_MUX(0x07)
 157:../Generated_Code/Cpu.c ****                ));                                                  
 158:../Generated_Code/Cpu.c ****         /* Initialization of the RCM module */
 159:../Generated_Code/Cpu.c ****   /* RCM_RPFW: RSTFLTSEL=0 */
 160:../Generated_Code/Cpu.c ****   RCM_RPFW &= (uint8_t)~(uint8_t)(RCM_RPFW_RSTFLTSEL(0x1F));                                       
 255              		.loc 1 160 0
 256 0016 334B     		ldr	r3, .L9+8
 257 0018 324A     		ldr	r2, .L9+8
 258 001a 5279     		ldrb	r2, [r2, #5]
 259 001c D2B2     		uxtb	r2, r2
 260 001e 1F21     		mov	r1, #31
 261 0020 8A43     		bic	r2, r1
 262 0022 D2B2     		uxtb	r2, r2
 263 0024 5A71     		strb	r2, [r3, #5]
 161:../Generated_Code/Cpu.c ****   /* RCM_RPFC: RSTFLTSS=0,RSTFLTSRW=0 */
 162:../Generated_Code/Cpu.c ****   RCM_RPFC &= (uint8_t)~(uint8_t)(
 264              		.loc 1 162 0
 265 0026 2F4B     		ldr	r3, .L9+8
 266 0028 2E4A     		ldr	r2, .L9+8
 267 002a 1279     		ldrb	r2, [r2, #4]
 268 002c D2B2     		uxtb	r2, r2
 269 002e 0721     		mov	r1, #7
 270 0030 8A43     		bic	r2, r1
 271 0032 D2B2     		uxtb	r2, r2
 272 0034 1A71     		strb	r2, [r3, #4]
 163:../Generated_Code/Cpu.c ****                RCM_RPFC_RSTFLTSS_MASK |
 164:../Generated_Code/Cpu.c ****                RCM_RPFC_RSTFLTSRW(0x03)
 165:../Generated_Code/Cpu.c ****               );                                                   
 166:../Generated_Code/Cpu.c ****       /* Initialization of the PMC module */
 167:../Generated_Code/Cpu.c ****   /* PMC_LVDSC1: LVDACK=1,LVDIE=0,LVDRE=1,LVDV=0 */
 168:../Generated_Code/Cpu.c ****   PMC_LVDSC1 = (uint8_t)((PMC_LVDSC1 & (uint8_t)~(uint8_t)(
 273              		.loc 1 168 0
 274 0036 2C4B     		ldr	r3, .L9+12
 275 0038 2B4A     		ldr	r2, .L9+12
 276 003a 1278     		ldrb	r2, [r2]
 277 003c D2B2     		uxtb	r2, r2
 278 003e D2B2     		uxtb	r2, r2
 279 0040 7321     		mov	r1, #115
 280 0042 8A43     		bic	r2, r1
 281 0044 D2B2     		uxtb	r2, r2
 282 0046 5021     		mov	r1, #80
 283 0048 0A43     		orr	r2, r1
 284 004a D2B2     		uxtb	r2, r2
 285 004c D2B2     		uxtb	r2, r2
 286 004e 1A70     		strb	r2, [r3]
 169:../Generated_Code/Cpu.c ****                 PMC_LVDSC1_LVDIE_MASK |
 170:../Generated_Code/Cpu.c ****                 PMC_LVDSC1_LVDV(0x03)
 171:../Generated_Code/Cpu.c ****                )) | (uint8_t)(
 172:../Generated_Code/Cpu.c ****                 PMC_LVDSC1_LVDACK_MASK |
 173:../Generated_Code/Cpu.c ****                 PMC_LVDSC1_LVDRE_MASK
 174:../Generated_Code/Cpu.c ****                ));                                                  
 175:../Generated_Code/Cpu.c ****   /* PMC_LVDSC2: LVWACK=1,LVWIE=0,LVWV=0 */
 176:../Generated_Code/Cpu.c ****   PMC_LVDSC2 = (uint8_t)((PMC_LVDSC2 & (uint8_t)~(uint8_t)(
 287              		.loc 1 176 0
 288 0050 254B     		ldr	r3, .L9+12
 289 0052 254A     		ldr	r2, .L9+12
 290 0054 5278     		ldrb	r2, [r2, #1]
 291 0056 D2B2     		uxtb	r2, r2
 292 0058 D2B2     		uxtb	r2, r2
 293 005a 6321     		mov	r1, #99
 294 005c 8A43     		bic	r2, r1
 295 005e D2B2     		uxtb	r2, r2
 296 0060 4021     		mov	r1, #64
 297 0062 0A43     		orr	r2, r1
 298 0064 D2B2     		uxtb	r2, r2
 299 0066 D2B2     		uxtb	r2, r2
 300 0068 5A70     		strb	r2, [r3, #1]
 177:../Generated_Code/Cpu.c ****                 PMC_LVDSC2_LVWIE_MASK |
 178:../Generated_Code/Cpu.c ****                 PMC_LVDSC2_LVWV(0x03)
 179:../Generated_Code/Cpu.c ****                )) | (uint8_t)(
 180:../Generated_Code/Cpu.c ****                 PMC_LVDSC2_LVWACK_MASK
 181:../Generated_Code/Cpu.c ****                ));                                                  
 182:../Generated_Code/Cpu.c ****   /* PMC_REGSC: BGEN=0,ACKISO=0,BGBE=0 */
 183:../Generated_Code/Cpu.c ****   PMC_REGSC &= (uint8_t)~(uint8_t)(
 301              		.loc 1 183 0
 302 006a 1F4B     		ldr	r3, .L9+12
 303 006c 1E4A     		ldr	r2, .L9+12
 304 006e 9278     		ldrb	r2, [r2, #2]
 305 0070 D2B2     		uxtb	r2, r2
 306 0072 1921     		mov	r1, #25
 307 0074 8A43     		bic	r2, r1
 308 0076 D2B2     		uxtb	r2, r2
 309 0078 9A70     		strb	r2, [r3, #2]
 184:../Generated_Code/Cpu.c ****                 PMC_REGSC_BGEN_MASK |
 185:../Generated_Code/Cpu.c ****                 PMC_REGSC_ACKISO_MASK |
 186:../Generated_Code/Cpu.c ****                 PMC_REGSC_BGBE_MASK
 187:../Generated_Code/Cpu.c ****                );                                                   
 188:../Generated_Code/Cpu.c ****   /* SMC_PMPROT: ??=0,??=0,AVLP=0,??=0,ALLS=0,??=0,AVLLS=0,??=0 */
 189:../Generated_Code/Cpu.c ****   SMC_PMPROT = 0x00U;                  /* Setup Power mode protection register */
 310              		.loc 1 189 0
 311 007a 1C4B     		ldr	r3, .L9+16
 312 007c 0022     		mov	r2, #0
 313 007e 1A70     		strb	r2, [r3]
 190:../Generated_Code/Cpu.c ****   /* Common initialization of the CPU registers */
 191:../Generated_Code/Cpu.c ****   /* PORTA_PCR20: ISF=0,MUX=7 */
 192:../Generated_Code/Cpu.c ****   PORTA_PCR20 = (uint32_t)((PORTA_PCR20 & (uint32_t)~(uint32_t)(
 314              		.loc 1 192 0
 315 0080 164B     		ldr	r3, .L9
 316 0082 164A     		ldr	r2, .L9
 317 0084 116D     		ldr	r1, [r2, #80]
 318 0086 164A     		ldr	r2, .L9+4
 319 0088 0A40     		and	r2, r1
 320 008a E021     		mov	r1, #224
 321 008c C900     		lsl	r1, r1, #3
 322 008e 0A43     		orr	r2, r1
 323 0090 1A65     		str	r2, [r3, #80]
 193:../Generated_Code/Cpu.c ****                  PORT_PCR_ISF_MASK
 194:../Generated_Code/Cpu.c ****                 )) | (uint32_t)(
 195:../Generated_Code/Cpu.c ****                  PORT_PCR_MUX(0x07)
 196:../Generated_Code/Cpu.c ****                 ));                                                  
 197:../Generated_Code/Cpu.c ****   /* NVIC_IPR1: PRI_6=0 */
 198:../Generated_Code/Cpu.c ****   NVIC_IPR1 &= (uint32_t)~(uint32_t)(NVIC_IP_PRI_6(0xFF));                                         
 324              		.loc 1 198 0
 325 0092 174A     		ldr	r2, .L9+20
 326 0094 1649     		ldr	r1, .L9+20
 327 0096 C123     		mov	r3, #193
 328 0098 9B00     		lsl	r3, r3, #2
 329 009a C958     		ldr	r1, [r1, r3]
 330 009c 154B     		ldr	r3, .L9+24
 331 009e 1940     		and	r1, r3
 332 00a0 C123     		mov	r3, #193
 333 00a2 9B00     		lsl	r3, r3, #2
 334 00a4 D150     		str	r1, [r2, r3]
 199:../Generated_Code/Cpu.c ****   /* ### BitIO_LDD "BitIoLdd4" component auto initialization. Auto initialization feature can be di
 200:../Generated_Code/Cpu.c ****   (void)BitIoLdd4_Init(NULL);
 335              		.loc 1 200 0
 336 00a6 0020     		mov	r0, #0
 337 00a8 FFF7FEFF 		bl	BitIoLdd4_Init
 201:../Generated_Code/Cpu.c ****   /* ### LED "LED1" init code ... */
 202:../Generated_Code/Cpu.c ****   LED1_Init(); /* initializes the driver */
 338              		.loc 1 202 0
 339 00ac 124B     		ldr	r3, .L9+28
 340 00ae 1B68     		ldr	r3, [r3]
 341 00b0 181C     		mov	r0, r3
 342 00b2 FFF7FEFF 		bl	BitIoLdd4_SetVal
 203:../Generated_Code/Cpu.c ****   /* ### BitIO_LDD "BitIoLdd5" component auto initialization. Auto initialization feature can be di
 204:../Generated_Code/Cpu.c ****   (void)BitIoLdd5_Init(NULL);
 343              		.loc 1 204 0
 344 00b6 0020     		mov	r0, #0
 345 00b8 FFF7FEFF 		bl	BitIoLdd5_Init
 205:../Generated_Code/Cpu.c ****   /* ### LED "LED2" init code ... */
 206:../Generated_Code/Cpu.c ****   LED2_Init(); /* initializes the driver */
 346              		.loc 1 206 0
 347 00bc 0E4B     		ldr	r3, .L9+28
 348 00be 5B68     		ldr	r3, [r3, #4]
 349 00c0 181C     		mov	r0, r3
 350 00c2 FFF7FEFF 		bl	BitIoLdd5_SetVal
 207:../Generated_Code/Cpu.c ****   /* ### BitIO_LDD "BitIoLdd6" component auto initialization. Auto initialization feature can be di
 208:../Generated_Code/Cpu.c ****   (void)BitIoLdd6_Init(NULL);
 351              		.loc 1 208 0
 352 00c6 0020     		mov	r0, #0
 353 00c8 FFF7FEFF 		bl	BitIoLdd6_Init
 209:../Generated_Code/Cpu.c ****   /* ### LED "LED3" init code ... */
 210:../Generated_Code/Cpu.c ****   LED3_Init(); /* initializes the driver */
 354              		.loc 1 210 0
 355 00cc 0A4B     		ldr	r3, .L9+28
 356 00ce 9B68     		ldr	r3, [r3, #8]
 357 00d0 181C     		mov	r0, r3
 358 00d2 FFF7FEFF 		bl	BitIoLdd6_SetVal
 211:../Generated_Code/Cpu.c ****   __EI();
 359              		.loc 1 211 0
 360              	@ 211 "../Generated_Code/Cpu.c" 1
 361 00d6 62B6     		CPSIE i
 362              	@ 0 "" 2
 212:../Generated_Code/Cpu.c **** }
 363              		.loc 1 212 0
 364              		.code	16
 365 00d8 BD46     		mov	sp, r7
 366              		@ sp needed for prologue
 367 00da 80BD     		pop	{r7, pc}
 368              	.L10:
 369              		.align	2
 370              	.L9:
 371 00dc 00900440 		.word	1074040832
 372 00e0 FFF8FFFE 		.word	-16779009
 373 00e4 00F00740 		.word	1074262016
 374 00e8 00D00740 		.word	1074253824
 375 00ec 00E00740 		.word	1074257920
 376 00f0 00E100E0 		.word	-536813312
 377 00f4 FFFF00FF 		.word	-16711681
 378 00f8 00000000 		.word	PE_LDD_DeviceDataList
 379              		.cfi_endproc
 380              	.LFE3:
 382              		.text
 383              	.Letext0:
 384              		.file 2 "C:/Freescale/CW MCU v10.7/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 385              		.file 3 "../Generated_Code/IO_Map.h"
 386              		.file 4 "../Generated_Code/Cpu.h"
 387              		.file 5 "../Generated_Code/PE_LDD.h"
DEFINED SYMBOLS
                            *ABS*:00000000 Cpu.c
                            *COM*:00000001 SR_reg
C:\Users\burak\AppData\Local\Temp\cc7W8dHF.s:22     .bss.SR_lock:00000000 SR_lock
C:\Users\burak\AppData\Local\Temp\cc7W8dHF.s:23     .bss.SR_lock:00000000 $d
C:\Users\burak\AppData\Local\Temp\cc7W8dHF.s:25     .text.Cpu_INT_NMIInterrupt:00000000 $t
C:\Users\burak\AppData\Local\Temp\cc7W8dHF.s:30     .text.Cpu_INT_NMIInterrupt:00000000 Cpu_INT_NMIInterrupt
C:\Users\burak\AppData\Local\Temp\cc7W8dHF.s:53     .text.Cpu_Interrupt:00000000 $t
C:\Users\burak\AppData\Local\Temp\cc7W8dHF.s:58     .text.Cpu_Interrupt:00000000 Cpu_Interrupt
C:\Users\burak\AppData\Local\Temp\cc7W8dHF.s:83     .text.__init_hardware:00000000 $t
C:\Users\burak\AppData\Local\Temp\cc7W8dHF.s:88     .text.__init_hardware:00000000 __init_hardware
C:\Users\burak\AppData\Local\Temp\cc7W8dHF.s:212    .text.__init_hardware:000000b4 $d
C:\Users\burak\AppData\Local\Temp\cc7W8dHF.s:228    .text.PE_low_level_init:00000000 $t
C:\Users\burak\AppData\Local\Temp\cc7W8dHF.s:233    .text.PE_low_level_init:00000000 PE_low_level_init
C:\Users\burak\AppData\Local\Temp\cc7W8dHF.s:371    .text.PE_low_level_init:000000dc $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
Cpu_OnNMIINT
__vect_table
BitIoLdd4_Init
BitIoLdd4_SetVal
BitIoLdd5_Init
BitIoLdd5_SetVal
BitIoLdd6_Init
BitIoLdd6_SetVal
PE_LDD_DeviceDataList
