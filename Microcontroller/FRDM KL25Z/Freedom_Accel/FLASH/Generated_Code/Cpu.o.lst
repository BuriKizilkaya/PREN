   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"Cpu.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	SR_reg,1,1
  18              		.global	SR_lock
  19              		.section	.bss.SR_lock,"aw",%nobits
  22              	SR_lock:
  23 0000 00       		.space	1
  24              		.section	.text.Cpu_INT_NMIInterrupt,"ax",%progbits
  25              		.align	2
  26              		.global	Cpu_INT_NMIInterrupt
  27              		.code	16
  28              		.thumb_func
  30              	Cpu_INT_NMIInterrupt:
  31              	.LFB0:
  32              		.file 1 "../Generated_Code/Cpu.c"
   1:../Generated_Code/Cpu.c **** /* ###################################################################
   2:../Generated_Code/Cpu.c **** **     This component module is generated by Processor Expert. Do not modify it.
   3:../Generated_Code/Cpu.c **** **     Filename    : Cpu.c
   4:../Generated_Code/Cpu.c **** **     Project     : ProcessorExpert
   5:../Generated_Code/Cpu.c **** **     Processor   : MKL25Z128VLK4
   6:../Generated_Code/Cpu.c **** **     Component   : MKL25Z128LK4
   7:../Generated_Code/Cpu.c **** **     Version     : Component 01.025, Driver 01.04, CPU db: 3.00.000
   8:../Generated_Code/Cpu.c **** **     Datasheet   : KL25P80M48SF0RM, Rev.3, Sep 2012
   9:../Generated_Code/Cpu.c **** **     Compiler    : GNU C Compiler
  10:../Generated_Code/Cpu.c **** **     Date/Time   : 2017-11-04, 02:10, # CodeGen: 0
  11:../Generated_Code/Cpu.c **** **     Abstract    :
  12:../Generated_Code/Cpu.c **** **
  13:../Generated_Code/Cpu.c **** **     Settings    :
  14:../Generated_Code/Cpu.c **** **
  15:../Generated_Code/Cpu.c **** **     Contents    :
  16:../Generated_Code/Cpu.c **** **         No public methods
  17:../Generated_Code/Cpu.c **** **
  18:../Generated_Code/Cpu.c **** **     Copyright : 1997 - 2014 Freescale Semiconductor, Inc. 
  19:../Generated_Code/Cpu.c **** **     All Rights Reserved.
  20:../Generated_Code/Cpu.c **** **     
  21:../Generated_Code/Cpu.c **** **     Redistribution and use in source and binary forms, with or without modification,
  22:../Generated_Code/Cpu.c **** **     are permitted provided that the following conditions are met:
  23:../Generated_Code/Cpu.c **** **     
  24:../Generated_Code/Cpu.c **** **     o Redistributions of source code must retain the above copyright notice, this list
  25:../Generated_Code/Cpu.c **** **       of conditions and the following disclaimer.
  26:../Generated_Code/Cpu.c **** **     
  27:../Generated_Code/Cpu.c **** **     o Redistributions in binary form must reproduce the above copyright notice, this
  28:../Generated_Code/Cpu.c **** **       list of conditions and the following disclaimer in the documentation and/or
  29:../Generated_Code/Cpu.c **** **       other materials provided with the distribution.
  30:../Generated_Code/Cpu.c **** **     
  31:../Generated_Code/Cpu.c **** **     o Neither the name of Freescale Semiconductor, Inc. nor the names of its
  32:../Generated_Code/Cpu.c **** **       contributors may be used to endorse or promote products derived from this
  33:../Generated_Code/Cpu.c **** **       software without specific prior written permission.
  34:../Generated_Code/Cpu.c **** **     
  35:../Generated_Code/Cpu.c **** **     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  36:../Generated_Code/Cpu.c **** **     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  37:../Generated_Code/Cpu.c **** **     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  38:../Generated_Code/Cpu.c **** **     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  39:../Generated_Code/Cpu.c **** **     ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  40:../Generated_Code/Cpu.c **** **     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  41:../Generated_Code/Cpu.c **** **     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  42:../Generated_Code/Cpu.c **** **     ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  43:../Generated_Code/Cpu.c **** **     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  44:../Generated_Code/Cpu.c **** **     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  45:../Generated_Code/Cpu.c **** **     
  46:../Generated_Code/Cpu.c **** **     http: www.freescale.com
  47:../Generated_Code/Cpu.c **** **     mail: support@freescale.com
  48:../Generated_Code/Cpu.c **** ** ###################################################################*/
  49:../Generated_Code/Cpu.c **** /*!
  50:../Generated_Code/Cpu.c **** ** @file Cpu.c
  51:../Generated_Code/Cpu.c **** ** @version 01.04
  52:../Generated_Code/Cpu.c **** ** @brief
  53:../Generated_Code/Cpu.c **** **
  54:../Generated_Code/Cpu.c **** */         
  55:../Generated_Code/Cpu.c **** /*!
  56:../Generated_Code/Cpu.c **** **  @addtogroup Cpu_module Cpu module documentation
  57:../Generated_Code/Cpu.c **** **  @{
  58:../Generated_Code/Cpu.c **** */         
  59:../Generated_Code/Cpu.c **** 
  60:../Generated_Code/Cpu.c **** /* MODULE Cpu. */
  61:../Generated_Code/Cpu.c **** 
  62:../Generated_Code/Cpu.c **** /* {Default RTOS Adapter} No RTOS includes */
  63:../Generated_Code/Cpu.c **** #include "LED1.h"
  64:../Generated_Code/Cpu.c **** #include "LEDpin4.h"
  65:../Generated_Code/Cpu.c **** #include "BitIoLdd4.h"
  66:../Generated_Code/Cpu.c **** #include "LED2.h"
  67:../Generated_Code/Cpu.c **** #include "LEDpin5.h"
  68:../Generated_Code/Cpu.c **** #include "BitIoLdd5.h"
  69:../Generated_Code/Cpu.c **** #include "LED3.h"
  70:../Generated_Code/Cpu.c **** #include "LEDpin6.h"
  71:../Generated_Code/Cpu.c **** #include "BitIoLdd6.h"
  72:../Generated_Code/Cpu.c **** #include "I2C2.h"
  73:../Generated_Code/Cpu.c **** #include "MCUC1.h"
  74:../Generated_Code/Cpu.c **** #include "PE_Types.h"
  75:../Generated_Code/Cpu.c **** #include "PE_Error.h"
  76:../Generated_Code/Cpu.c **** #include "PE_Const.h"
  77:../Generated_Code/Cpu.c **** #include "IO_Map.h"
  78:../Generated_Code/Cpu.c **** #include "Events.h"
  79:../Generated_Code/Cpu.c **** #include "Cpu.h"
  80:../Generated_Code/Cpu.c **** 
  81:../Generated_Code/Cpu.c **** #ifdef __cplusplus
  82:../Generated_Code/Cpu.c **** extern "C" {
  83:../Generated_Code/Cpu.c **** #endif
  84:../Generated_Code/Cpu.c **** 
  85:../Generated_Code/Cpu.c **** /* Global variables */
  86:../Generated_Code/Cpu.c **** volatile uint8_t SR_reg;               /* Current value of the FAULTMASK register */
  87:../Generated_Code/Cpu.c **** volatile uint8_t SR_lock = 0x00U;      /* Lock */
  88:../Generated_Code/Cpu.c **** 
  89:../Generated_Code/Cpu.c **** 
  90:../Generated_Code/Cpu.c **** /*
  91:../Generated_Code/Cpu.c **** ** ===================================================================
  92:../Generated_Code/Cpu.c **** **     Method      :  Cpu_INT_NMIInterrupt (component MKL25Z128LK4)
  93:../Generated_Code/Cpu.c **** **
  94:../Generated_Code/Cpu.c **** **     Description :
  95:../Generated_Code/Cpu.c **** **         This ISR services the Non Maskable Interrupt interrupt.
  96:../Generated_Code/Cpu.c **** **         This method is internal. It is used by Processor Expert only.
  97:../Generated_Code/Cpu.c **** ** ===================================================================
  98:../Generated_Code/Cpu.c **** */
  99:../Generated_Code/Cpu.c **** PE_ISR(Cpu_INT_NMIInterrupt)
 100:../Generated_Code/Cpu.c **** {
  33              		.loc 1 100 0
  34              		.cfi_startproc
  35 0000 80B5     		push	{r7, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 8
  38              		.cfi_offset 7, -8
  39              		.cfi_offset 14, -4
  40 0002 00AF     		add	r7, sp, #0
  41              	.LCFI1:
  42              		.cfi_def_cfa_register 7
 101:../Generated_Code/Cpu.c ****   Cpu_OnNMIINT();
  43              		.loc 1 101 0
  44 0004 FFF7FEFF 		bl	Cpu_OnNMIINT
 102:../Generated_Code/Cpu.c **** }
  45              		.loc 1 102 0
  46 0008 BD46     		mov	sp, r7
  47              		@ sp needed for prologue
  48 000a 80BD     		pop	{r7, pc}
  49              		.cfi_endproc
  50              	.LFE0:
  52              		.section	.text.Cpu_Interrupt,"ax",%progbits
  53              		.align	2
  54              		.global	Cpu_Interrupt
  55              		.code	16
  56              		.thumb_func
  58              	Cpu_Interrupt:
  59              	.LFB1:
 103:../Generated_Code/Cpu.c **** 
 104:../Generated_Code/Cpu.c **** /*
 105:../Generated_Code/Cpu.c **** ** ===================================================================
 106:../Generated_Code/Cpu.c **** **     Method      :  Cpu_Cpu_Interrupt (component MKL25Z128LK4)
 107:../Generated_Code/Cpu.c **** **
 108:../Generated_Code/Cpu.c **** **     Description :
 109:../Generated_Code/Cpu.c **** **         This ISR services an unused interrupt/exception vector.
 110:../Generated_Code/Cpu.c **** **         This method is internal. It is used by Processor Expert only.
 111:../Generated_Code/Cpu.c **** ** ===================================================================
 112:../Generated_Code/Cpu.c **** */
 113:../Generated_Code/Cpu.c **** PE_ISR(Cpu_Interrupt)
 114:../Generated_Code/Cpu.c **** {
  60              		.loc 1 114 0
  61              		.cfi_startproc
  62 0000 80B5     		push	{r7, lr}
  63              	.LCFI2:
  64              		.cfi_def_cfa_offset 8
  65              		.cfi_offset 7, -8
  66              		.cfi_offset 14, -4
  67 0002 00AF     		add	r7, sp, #0
  68              	.LCFI3:
  69              		.cfi_def_cfa_register 7
 115:../Generated_Code/Cpu.c ****   /* This code can be changed using the CPU component property "Build Options / Unhandled int code"
 116:../Generated_Code/Cpu.c ****   PE_DEBUGHALT();
  70              		.loc 1 116 0
  71              	@ 116 "../Generated_Code/Cpu.c" 1
  72 0004 FFBE     		BKPT 255
  73              	@ 0 "" 2
 117:../Generated_Code/Cpu.c **** }
  74              		.loc 1 117 0
  75              		.code	16
  76 0006 BD46     		mov	sp, r7
  77              		@ sp needed for prologue
  78 0008 80BD     		pop	{r7, pc}
  79              		.cfi_endproc
  80              	.LFE1:
  82 000a C046     		.section	.text.__init_hardware,"ax",%progbits
  83              		.align	2
  84              		.global	__init_hardware
  85              		.code	16
  86              		.thumb_func
  88              	__init_hardware:
  89              	.LFB2:
 118:../Generated_Code/Cpu.c **** 
 119:../Generated_Code/Cpu.c **** 
 120:../Generated_Code/Cpu.c **** /*** !!! Here you can place your own code using property "User data declarations" on the build opti
 121:../Generated_Code/Cpu.c **** 
 122:../Generated_Code/Cpu.c **** /*lint -esym(765,__init_hardware) Disable MISRA rule (8.10) checking for symbols (__init_hardware).
 123:../Generated_Code/Cpu.c **** /*lint -esym(765,Cpu_Interrupt) Disable MISRA rule (8.10) checking for symbols (Cpu_Interrupt). */
 124:../Generated_Code/Cpu.c **** void __init_hardware(void)
 125:../Generated_Code/Cpu.c **** {
  90              		.loc 1 125 0
  91              		.cfi_startproc
  92 0000 80B5     		push	{r7, lr}
  93              	.LCFI4:
  94              		.cfi_def_cfa_offset 8
  95              		.cfi_offset 7, -8
  96              		.cfi_offset 14, -4
  97 0002 00AF     		add	r7, sp, #0
  98              	.LCFI5:
  99              		.cfi_def_cfa_register 7
 126:../Generated_Code/Cpu.c **** 
 127:../Generated_Code/Cpu.c ****   /*** !!! Here you can place your own code before PE initialization using property "User code befo
 128:../Generated_Code/Cpu.c **** 
 129:../Generated_Code/Cpu.c ****   /*** ### MKL25Z128VLK4 "Cpu" init code ... ***/
 130:../Generated_Code/Cpu.c ****   /*** PE initialization code after reset ***/
 131:../Generated_Code/Cpu.c ****   SCB_VTOR = (uint32_t)(&__vect_table); /* Set the interrupt vector table position */
 100              		.loc 1 131 0
 101 0004 354A     		ldr	r2, .L7
 102 0006 3649     		ldr	r1, .L7+4
 103 0008 364B     		ldr	r3, .L7+8
 104 000a D150     		str	r1, [r2, r3]
 132:../Generated_Code/Cpu.c ****   /* Disable the WDOG module */
 133:../Generated_Code/Cpu.c ****   /* SIM_COPC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0
 134:../Generated_Code/Cpu.c ****   SIM_COPC = SIM_COPC_COPT(0x00);
 105              		.loc 1 134 0
 106 000c 364A     		ldr	r2, .L7+12
 107 000e 8823     		mov	r3, #136
 108 0010 5B01     		lsl	r3, r3, #5
 109 0012 0021     		mov	r1, #0
 110 0014 D150     		str	r1, [r2, r3]
 135:../Generated_Code/Cpu.c **** 
 136:../Generated_Code/Cpu.c ****   /* System clock initialization */
 137:../Generated_Code/Cpu.c ****   /* SIM_CLKDIV1: OUTDIV1=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,OUTDIV4=3,??=0,??=0,??=0,?
 138:../Generated_Code/Cpu.c ****   SIM_CLKDIV1 = (SIM_CLKDIV1_OUTDIV1(0x00) | SIM_CLKDIV1_OUTDIV4(0x03)); /* Set the system prescale
 111              		.loc 1 138 0
 112 0016 344A     		ldr	r2, .L7+12
 113 0018 344B     		ldr	r3, .L7+16
 114 001a C021     		mov	r1, #192
 115 001c 8902     		lsl	r1, r1, #10
 116 001e D150     		str	r1, [r2, r3]
 139:../Generated_Code/Cpu.c ****   /* SIM_SCGC5: PORTE=1,PORTD=1,PORTB=1,PORTA=1 */
 140:../Generated_Code/Cpu.c ****   SIM_SCGC5 |= SIM_SCGC5_PORTE_MASK |
 117              		.loc 1 140 0
 118 0020 314A     		ldr	r2, .L7+12
 119 0022 3149     		ldr	r1, .L7+12
 120 0024 324B     		ldr	r3, .L7+20
 121 0026 CB58     		ldr	r3, [r1, r3]
 122 0028 D821     		mov	r1, #216
 123 002a 8901     		lsl	r1, r1, #6
 124 002c 1943     		orr	r1, r3
 125 002e 304B     		ldr	r3, .L7+20
 126 0030 D150     		str	r1, [r2, r3]
 141:../Generated_Code/Cpu.c ****                SIM_SCGC5_PORTD_MASK |
 142:../Generated_Code/Cpu.c ****                SIM_SCGC5_PORTB_MASK |
 143:../Generated_Code/Cpu.c ****                SIM_SCGC5_PORTA_MASK;   /* Enable clock gate for ports to enable pin routing */
 144:../Generated_Code/Cpu.c ****   if ((PMC_REGSC & PMC_REGSC_ACKISO_MASK) != 0x0U) {
 127              		.loc 1 144 0
 128 0032 304B     		ldr	r3, .L7+24
 129 0034 9B78     		ldrb	r3, [r3, #2]
 130 0036 DBB2     		uxtb	r3, r3
 131 0038 1A1C     		mov	r2, r3
 132 003a 0823     		mov	r3, #8
 133 003c 1340     		and	r3, r2
 134 003e 07D0     		beq	.L4
 145:../Generated_Code/Cpu.c ****     /* PMC_REGSC: ACKISO=1 */
 146:../Generated_Code/Cpu.c ****     PMC_REGSC |= PMC_REGSC_ACKISO_MASK; /* Release IO pads after wakeup from VLLS mode. */
 135              		.loc 1 146 0
 136 0040 2C4B     		ldr	r3, .L7+24
 137 0042 2C4A     		ldr	r2, .L7+24
 138 0044 9278     		ldrb	r2, [r2, #2]
 139 0046 D2B2     		uxtb	r2, r2
 140 0048 0821     		mov	r1, #8
 141 004a 0A43     		orr	r2, r1
 142 004c D2B2     		uxtb	r2, r2
 143 004e 9A70     		strb	r2, [r3, #2]
 144              	.L4:
 147:../Generated_Code/Cpu.c ****   }
 148:../Generated_Code/Cpu.c ****   /* SIM_CLKDIV1: OUTDIV1=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,OUTDIV4=0,??=0,??=0,??=0,?
 149:../Generated_Code/Cpu.c ****   SIM_CLKDIV1 = (SIM_CLKDIV1_OUTDIV1(0x00) | SIM_CLKDIV1_OUTDIV4(0x00)); /* Update system prescaler
 145              		.loc 1 149 0
 146 0050 254A     		ldr	r2, .L7+12
 147 0052 264B     		ldr	r3, .L7+16
 148 0054 0021     		mov	r1, #0
 149 0056 D150     		str	r1, [r2, r3]
 150:../Generated_Code/Cpu.c ****   /* SIM_SOPT2: PLLFLLSEL=0 */
 151:../Generated_Code/Cpu.c ****   SIM_SOPT2 &= (uint32_t)~(uint32_t)(SIM_SOPT2_PLLFLLSEL_MASK); /* Select FLL as a clock source for
 150              		.loc 1 151 0
 151 0058 234A     		ldr	r2, .L7+12
 152 005a 2349     		ldr	r1, .L7+12
 153 005c 264B     		ldr	r3, .L7+28
 154 005e C958     		ldr	r1, [r1, r3]
 155 0060 264B     		ldr	r3, .L7+32
 156 0062 1940     		and	r1, r3
 157 0064 244B     		ldr	r3, .L7+28
 158 0066 D150     		str	r1, [r2, r3]
 152:../Generated_Code/Cpu.c ****   /* SIM_SOPT1: OSC32KSEL=0 */
 153:../Generated_Code/Cpu.c ****   SIM_SOPT1 &= (uint32_t)~(uint32_t)(SIM_SOPT1_OSC32KSEL(0x03)); /* System oscillator drives 32 kHz
 159              		.loc 1 153 0
 160 0068 1F4B     		ldr	r3, .L7+12
 161 006a 1F4A     		ldr	r2, .L7+12
 162 006c 1168     		ldr	r1, [r2]
 163 006e 244A     		ldr	r2, .L7+36
 164 0070 0A40     		and	r2, r1
 165 0072 1A60     		str	r2, [r3]
 154:../Generated_Code/Cpu.c ****   /* SIM_SOPT2: TPMSRC=1 */
 155:../Generated_Code/Cpu.c ****   SIM_SOPT2 = (uint32_t)((SIM_SOPT2 & (uint32_t)~(uint32_t)(
 166              		.loc 1 155 0
 167 0074 1C4A     		ldr	r2, .L7+12
 168 0076 1C49     		ldr	r1, .L7+12
 169 0078 1F4B     		ldr	r3, .L7+28
 170 007a C958     		ldr	r1, [r1, r3]
 171 007c 214B     		ldr	r3, .L7+40
 172 007e 0B40     		and	r3, r1
 173 0080 8021     		mov	r1, #128
 174 0082 4904     		lsl	r1, r1, #17
 175 0084 1943     		orr	r1, r3
 176 0086 1C4B     		ldr	r3, .L7+28
 177 0088 D150     		str	r1, [r2, r3]
 156:../Generated_Code/Cpu.c ****                SIM_SOPT2_TPMSRC(0x02)
 157:../Generated_Code/Cpu.c ****               )) | (uint32_t)(
 158:../Generated_Code/Cpu.c ****                SIM_SOPT2_TPMSRC(0x01)
 159:../Generated_Code/Cpu.c ****               ));                      /* Set the TPM clock */
 160:../Generated_Code/Cpu.c ****   /* Switch to FEI Mode */
 161:../Generated_Code/Cpu.c ****   /* MCG_C1: CLKS=0,FRDIV=0,IREFS=1,IRCLKEN=1,IREFSTEN=0 */
 162:../Generated_Code/Cpu.c ****   MCG_C1 = MCG_C1_CLKS(0x00) |
 178              		.loc 1 162 0
 179 008a 1F4B     		ldr	r3, .L7+44
 180 008c 0622     		mov	r2, #6
 181 008e 1A70     		strb	r2, [r3]
 163:../Generated_Code/Cpu.c ****            MCG_C1_FRDIV(0x00) |
 164:../Generated_Code/Cpu.c ****            MCG_C1_IREFS_MASK |
 165:../Generated_Code/Cpu.c ****            MCG_C1_IRCLKEN_MASK;
 166:../Generated_Code/Cpu.c ****   /* MCG_C2: LOCRE0=0,??=0,RANGE0=0,HGO0=0,EREFS0=0,LP=0,IRCS=0 */
 167:../Generated_Code/Cpu.c ****   MCG_C2 = MCG_C2_RANGE0(0x00);
 182              		.loc 1 167 0
 183 0090 1D4B     		ldr	r3, .L7+44
 184 0092 0022     		mov	r2, #0
 185 0094 5A70     		strb	r2, [r3, #1]
 168:../Generated_Code/Cpu.c ****   /* MCG_C4: DMX32=0,DRST_DRS=0 */
 169:../Generated_Code/Cpu.c ****   MCG_C4 &= (uint8_t)~(uint8_t)((MCG_C4_DMX32_MASK | MCG_C4_DRST_DRS(0x03)));
 186              		.loc 1 169 0
 187 0096 1C4B     		ldr	r3, .L7+44
 188 0098 1B4A     		ldr	r2, .L7+44
 189 009a D278     		ldrb	r2, [r2, #3]
 190 009c D1B2     		uxtb	r1, r2
 191 009e 1F22     		mov	r2, #31
 192 00a0 0A40     		and	r2, r1
 193 00a2 D2B2     		uxtb	r2, r2
 194 00a4 DA70     		strb	r2, [r3, #3]
 170:../Generated_Code/Cpu.c ****   /* OSC0_CR: ERCLKEN=1,??=0,EREFSTEN=0,??=0,SC2P=0,SC4P=0,SC8P=0,SC16P=0 */
 171:../Generated_Code/Cpu.c ****   OSC0_CR = OSC_CR_ERCLKEN_MASK;
 195              		.loc 1 171 0
 196 00a6 194B     		ldr	r3, .L7+48
 197 00a8 8022     		mov	r2, #128
 198 00aa 1A70     		strb	r2, [r3]
 172:../Generated_Code/Cpu.c ****   /* MCG_C5: ??=0,PLLCLKEN0=0,PLLSTEN0=0,PRDIV0=0 */
 173:../Generated_Code/Cpu.c ****   MCG_C5 = MCG_C5_PRDIV0(0x00);
 199              		.loc 1 173 0
 200 00ac 164B     		ldr	r3, .L7+44
 201 00ae 0022     		mov	r2, #0
 202 00b0 1A71     		strb	r2, [r3, #4]
 174:../Generated_Code/Cpu.c ****   /* MCG_C6: LOLIE0=0,PLLS=0,CME0=0,VDIV0=0 */
 175:../Generated_Code/Cpu.c ****   MCG_C6 = MCG_C6_VDIV0(0x00);
 203              		.loc 1 175 0
 204 00b2 154B     		ldr	r3, .L7+44
 205 00b4 0022     		mov	r2, #0
 206 00b6 5A71     		strb	r2, [r3, #5]
 176:../Generated_Code/Cpu.c ****   while((MCG_S & MCG_S_IREFST_MASK) == 0x00U) { /* Check that the source of the FLL reference clock
 207              		.loc 1 176 0
 208 00b8 C046     		mov	r8, r8
 209              	.L5:
 210              		.loc 1 176 0 is_stmt 0
 211 00ba 134B     		ldr	r3, .L7+44
 212 00bc 9B79     		ldrb	r3, [r3, #6]
 213 00be DBB2     		uxtb	r3, r3
 214 00c0 1A1C     		mov	r2, r3
 215 00c2 1023     		mov	r3, #16
 216 00c4 1340     		and	r3, r2
 217 00c6 F8D0     		beq	.L5
 177:../Generated_Code/Cpu.c ****   }
 178:../Generated_Code/Cpu.c ****   while((MCG_S & 0x0CU) != 0x00U) {    /* Wait until output of the FLL is selected */
 218              		.loc 1 178 0 is_stmt 1
 219 00c8 C046     		mov	r8, r8
 220              	.L6:
 221              		.loc 1 178 0 is_stmt 0
 222 00ca 0F4B     		ldr	r3, .L7+44
 223 00cc 9B79     		ldrb	r3, [r3, #6]
 224 00ce DBB2     		uxtb	r3, r3
 225 00d0 1A1C     		mov	r2, r3
 226 00d2 0C23     		mov	r3, #12
 227 00d4 1340     		and	r3, r2
 228 00d6 F8D1     		bne	.L6
 179:../Generated_Code/Cpu.c ****   }
 180:../Generated_Code/Cpu.c ****   /*** End of PE initialization code after reset ***/
 181:../Generated_Code/Cpu.c **** 
 182:../Generated_Code/Cpu.c ****   /*** !!! Here you can place your own code after PE initialization using property "User code after
 183:../Generated_Code/Cpu.c **** 
 184:../Generated_Code/Cpu.c **** }
 229              		.loc 1 184 0 is_stmt 1
 230 00d8 BD46     		mov	sp, r7
 231              		@ sp needed for prologue
 232 00da 80BD     		pop	{r7, pc}
 233              	.L8:
 234              		.align	2
 235              	.L7:
 236 00dc 00E000E0 		.word	-536813568
 237 00e0 00000000 		.word	__vect_table
 238 00e4 080D0000 		.word	3336
 239 00e8 00700440 		.word	1074032640
 240 00ec 44100000 		.word	4164
 241 00f0 38100000 		.word	4152
 242 00f4 00D00740 		.word	1074253824
 243 00f8 04100000 		.word	4100
 244 00fc FFFFFEFF 		.word	-65537
 245 0100 FFFFF3FF 		.word	-786433
 246 0104 FFFFFFFC 		.word	-50331649
 247 0108 00400640 		.word	1074151424
 248 010c 00500640 		.word	1074155520
 249              		.cfi_endproc
 250              	.LFE2:
 252              		.section	.text.PE_low_level_init,"ax",%progbits
 253              		.align	2
 254              		.global	PE_low_level_init
 255              		.code	16
 256              		.thumb_func
 258              	PE_low_level_init:
 259              	.LFB3:
 185:../Generated_Code/Cpu.c **** 
 186:../Generated_Code/Cpu.c **** 
 187:../Generated_Code/Cpu.c **** 
 188:../Generated_Code/Cpu.c **** /*
 189:../Generated_Code/Cpu.c **** ** ===================================================================
 190:../Generated_Code/Cpu.c **** **     Method      :  PE_low_level_init (component MKL25Z128LK4)
 191:../Generated_Code/Cpu.c **** **
 192:../Generated_Code/Cpu.c **** **     Description :
 193:../Generated_Code/Cpu.c **** **         Initializes beans and provides common register initialization. 
 194:../Generated_Code/Cpu.c **** **         The method is called automatically as a part of the 
 195:../Generated_Code/Cpu.c **** **         application initialization code.
 196:../Generated_Code/Cpu.c **** **         This method is internal. It is used by Processor Expert only.
 197:../Generated_Code/Cpu.c **** ** ===================================================================
 198:../Generated_Code/Cpu.c **** */
 199:../Generated_Code/Cpu.c **** void PE_low_level_init(void)
 200:../Generated_Code/Cpu.c **** {
 260              		.loc 1 200 0
 261              		.cfi_startproc
 262 0000 80B5     		push	{r7, lr}
 263              	.LCFI6:
 264              		.cfi_def_cfa_offset 8
 265              		.cfi_offset 7, -8
 266              		.cfi_offset 14, -4
 267 0002 00AF     		add	r7, sp, #0
 268              	.LCFI7:
 269              		.cfi_def_cfa_register 7
 201:../Generated_Code/Cpu.c ****   #ifdef PEX_RTOS_INIT
 202:../Generated_Code/Cpu.c ****     PEX_RTOS_INIT();                   /* Initialization of the selected RTOS. Macro is defined by 
 203:../Generated_Code/Cpu.c ****   #endif
 204:../Generated_Code/Cpu.c ****       /* Initialization of the SIM module */
 205:../Generated_Code/Cpu.c ****   /* PORTA_PCR4: ISF=0,MUX=7 */
 206:../Generated_Code/Cpu.c ****   PORTA_PCR4 = (uint32_t)((PORTA_PCR4 & (uint32_t)~(uint32_t)(
 270              		.loc 1 206 0
 271 0004 314B     		ldr	r3, .L10
 272 0006 314A     		ldr	r2, .L10
 273 0008 1169     		ldr	r1, [r2, #16]
 274 000a 314A     		ldr	r2, .L10+4
 275 000c 0A40     		and	r2, r1
 276 000e E021     		mov	r1, #224
 277 0010 C900     		lsl	r1, r1, #3
 278 0012 0A43     		orr	r2, r1
 279 0014 1A61     		str	r2, [r3, #16]
 207:../Generated_Code/Cpu.c ****                 PORT_PCR_ISF_MASK
 208:../Generated_Code/Cpu.c ****                )) | (uint32_t)(
 209:../Generated_Code/Cpu.c ****                 PORT_PCR_MUX(0x07)
 210:../Generated_Code/Cpu.c ****                ));
 211:../Generated_Code/Cpu.c ****         /* Initialization of the RCM module */
 212:../Generated_Code/Cpu.c ****   /* RCM_RPFW: RSTFLTSEL=0 */
 213:../Generated_Code/Cpu.c ****   RCM_RPFW &= (uint8_t)~(uint8_t)(RCM_RPFW_RSTFLTSEL(0x1F));
 280              		.loc 1 213 0
 281 0016 2F4B     		ldr	r3, .L10+8
 282 0018 2E4A     		ldr	r2, .L10+8
 283 001a 5279     		ldrb	r2, [r2, #5]
 284 001c D2B2     		uxtb	r2, r2
 285 001e 1F21     		mov	r1, #31
 286 0020 8A43     		bic	r2, r1
 287 0022 D2B2     		uxtb	r2, r2
 288 0024 5A71     		strb	r2, [r3, #5]
 214:../Generated_Code/Cpu.c ****   /* RCM_RPFC: RSTFLTSS=0,RSTFLTSRW=0 */
 215:../Generated_Code/Cpu.c ****   RCM_RPFC &= (uint8_t)~(uint8_t)(
 289              		.loc 1 215 0
 290 0026 2B4B     		ldr	r3, .L10+8
 291 0028 2A4A     		ldr	r2, .L10+8
 292 002a 1279     		ldrb	r2, [r2, #4]
 293 002c D2B2     		uxtb	r2, r2
 294 002e 0721     		mov	r1, #7
 295 0030 8A43     		bic	r2, r1
 296 0032 D2B2     		uxtb	r2, r2
 297 0034 1A71     		strb	r2, [r3, #4]
 216:../Generated_Code/Cpu.c ****                RCM_RPFC_RSTFLTSS_MASK |
 217:../Generated_Code/Cpu.c ****                RCM_RPFC_RSTFLTSRW(0x03)
 218:../Generated_Code/Cpu.c ****               );
 219:../Generated_Code/Cpu.c ****       /* Initialization of the PMC module */
 220:../Generated_Code/Cpu.c ****   /* PMC_LVDSC1: LVDACK=1,LVDIE=0,LVDRE=1,LVDV=0 */
 221:../Generated_Code/Cpu.c ****   PMC_LVDSC1 = (uint8_t)((PMC_LVDSC1 & (uint8_t)~(uint8_t)(
 298              		.loc 1 221 0
 299 0036 284B     		ldr	r3, .L10+12
 300 0038 274A     		ldr	r2, .L10+12
 301 003a 1278     		ldrb	r2, [r2]
 302 003c D2B2     		uxtb	r2, r2
 303 003e D2B2     		uxtb	r2, r2
 304 0040 7321     		mov	r1, #115
 305 0042 8A43     		bic	r2, r1
 306 0044 D2B2     		uxtb	r2, r2
 307 0046 5021     		mov	r1, #80
 308 0048 0A43     		orr	r2, r1
 309 004a D2B2     		uxtb	r2, r2
 310 004c D2B2     		uxtb	r2, r2
 311 004e 1A70     		strb	r2, [r3]
 222:../Generated_Code/Cpu.c ****                 PMC_LVDSC1_LVDIE_MASK |
 223:../Generated_Code/Cpu.c ****                 PMC_LVDSC1_LVDV(0x03)
 224:../Generated_Code/Cpu.c ****                )) | (uint8_t)(
 225:../Generated_Code/Cpu.c ****                 PMC_LVDSC1_LVDACK_MASK |
 226:../Generated_Code/Cpu.c ****                 PMC_LVDSC1_LVDRE_MASK
 227:../Generated_Code/Cpu.c ****                ));
 228:../Generated_Code/Cpu.c ****   /* PMC_LVDSC2: LVWACK=1,LVWIE=0,LVWV=0 */
 229:../Generated_Code/Cpu.c ****   PMC_LVDSC2 = (uint8_t)((PMC_LVDSC2 & (uint8_t)~(uint8_t)(
 312              		.loc 1 229 0
 313 0050 214B     		ldr	r3, .L10+12
 314 0052 214A     		ldr	r2, .L10+12
 315 0054 5278     		ldrb	r2, [r2, #1]
 316 0056 D2B2     		uxtb	r2, r2
 317 0058 D2B2     		uxtb	r2, r2
 318 005a 6321     		mov	r1, #99
 319 005c 8A43     		bic	r2, r1
 320 005e D2B2     		uxtb	r2, r2
 321 0060 4021     		mov	r1, #64
 322 0062 0A43     		orr	r2, r1
 323 0064 D2B2     		uxtb	r2, r2
 324 0066 D2B2     		uxtb	r2, r2
 325 0068 5A70     		strb	r2, [r3, #1]
 230:../Generated_Code/Cpu.c ****                 PMC_LVDSC2_LVWIE_MASK |
 231:../Generated_Code/Cpu.c ****                 PMC_LVDSC2_LVWV(0x03)
 232:../Generated_Code/Cpu.c ****                )) | (uint8_t)(
 233:../Generated_Code/Cpu.c ****                 PMC_LVDSC2_LVWACK_MASK
 234:../Generated_Code/Cpu.c ****                ));
 235:../Generated_Code/Cpu.c ****   /* PMC_REGSC: BGEN=0,ACKISO=0,BGBE=0 */
 236:../Generated_Code/Cpu.c ****   PMC_REGSC &= (uint8_t)~(uint8_t)(
 326              		.loc 1 236 0
 327 006a 1B4B     		ldr	r3, .L10+12
 328 006c 1A4A     		ldr	r2, .L10+12
 329 006e 9278     		ldrb	r2, [r2, #2]
 330 0070 D2B2     		uxtb	r2, r2
 331 0072 1921     		mov	r1, #25
 332 0074 8A43     		bic	r2, r1
 333 0076 D2B2     		uxtb	r2, r2
 334 0078 9A70     		strb	r2, [r3, #2]
 237:../Generated_Code/Cpu.c ****                 PMC_REGSC_BGEN_MASK |
 238:../Generated_Code/Cpu.c ****                 PMC_REGSC_ACKISO_MASK |
 239:../Generated_Code/Cpu.c ****                 PMC_REGSC_BGBE_MASK
 240:../Generated_Code/Cpu.c ****                );
 241:../Generated_Code/Cpu.c ****   /* SMC_PMPROT: ??=0,??=0,AVLP=0,??=0,ALLS=0,??=0,AVLLS=0,??=0 */
 242:../Generated_Code/Cpu.c ****   SMC_PMPROT = 0x00U;                  /* Setup Power mode protection register */
 335              		.loc 1 242 0
 336 007a 184B     		ldr	r3, .L10+16
 337 007c 0022     		mov	r2, #0
 338 007e 1A70     		strb	r2, [r3]
 243:../Generated_Code/Cpu.c ****   /* Common initialization of the CPU registers */
 244:../Generated_Code/Cpu.c ****   /* PORTA_PCR20: ISF=0,MUX=7 */
 245:../Generated_Code/Cpu.c ****   PORTA_PCR20 = (uint32_t)((PORTA_PCR20 & (uint32_t)~(uint32_t)(
 339              		.loc 1 245 0
 340 0080 124B     		ldr	r3, .L10
 341 0082 124A     		ldr	r2, .L10
 342 0084 116D     		ldr	r1, [r2, #80]
 343 0086 124A     		ldr	r2, .L10+4
 344 0088 0A40     		and	r2, r1
 345 008a E021     		mov	r1, #224
 346 008c C900     		lsl	r1, r1, #3
 347 008e 0A43     		orr	r2, r1
 348 0090 1A65     		str	r2, [r3, #80]
 246:../Generated_Code/Cpu.c ****                  PORT_PCR_ISF_MASK
 247:../Generated_Code/Cpu.c ****                 )) | (uint32_t)(
 248:../Generated_Code/Cpu.c ****                  PORT_PCR_MUX(0x07)
 249:../Generated_Code/Cpu.c ****                 ));
 250:../Generated_Code/Cpu.c ****   /* NVIC_IPR1: PRI_6=0 */
 251:../Generated_Code/Cpu.c ****   NVIC_IPR1 &= (uint32_t)~(uint32_t)(NVIC_IP_PRI_6(0xFF));
 349              		.loc 1 251 0
 350 0092 134A     		ldr	r2, .L10+20
 351 0094 1249     		ldr	r1, .L10+20
 352 0096 C123     		mov	r3, #193
 353 0098 9B00     		lsl	r3, r3, #2
 354 009a C958     		ldr	r1, [r1, r3]
 355 009c 114B     		ldr	r3, .L10+24
 356 009e 1940     		and	r1, r3
 357 00a0 C123     		mov	r3, #193
 358 00a2 9B00     		lsl	r3, r3, #2
 359 00a4 D150     		str	r1, [r2, r3]
 252:../Generated_Code/Cpu.c ****   /* ### McuLibConfig "MCUC1" init code ... */
 253:../Generated_Code/Cpu.c ****   /* ### BitIO_LDD "BitIoLdd4" component auto initialization. Auto initialization feature can be di
 254:../Generated_Code/Cpu.c ****   (void)BitIoLdd4_Init(NULL);
 360              		.loc 1 254 0
 361 00a6 0020     		mov	r0, #0
 362 00a8 FFF7FEFF 		bl	BitIoLdd4_Init
 255:../Generated_Code/Cpu.c ****   /* ### LED "LED1" init code ... */
 256:../Generated_Code/Cpu.c ****   LED1_Init(); /* initialize LED driver */
 363              		.loc 1 256 0
 364 00ac FFF7FEFF 		bl	LED1_Init
 257:../Generated_Code/Cpu.c ****   /* ### BitIO_LDD "BitIoLdd5" component auto initialization. Auto initialization feature can be di
 258:../Generated_Code/Cpu.c ****   (void)BitIoLdd5_Init(NULL);
 365              		.loc 1 258 0
 366 00b0 0020     		mov	r0, #0
 367 00b2 FFF7FEFF 		bl	BitIoLdd5_Init
 259:../Generated_Code/Cpu.c ****   /* ### LED "LED2" init code ... */
 260:../Generated_Code/Cpu.c ****   LED2_Init(); /* initialize LED driver */
 368              		.loc 1 260 0
 369 00b6 FFF7FEFF 		bl	LED2_Init
 261:../Generated_Code/Cpu.c ****   /* ### BitIO_LDD "BitIoLdd6" component auto initialization. Auto initialization feature can be di
 262:../Generated_Code/Cpu.c ****   (void)BitIoLdd6_Init(NULL);
 370              		.loc 1 262 0
 371 00ba 0020     		mov	r0, #0
 372 00bc FFF7FEFF 		bl	BitIoLdd6_Init
 263:../Generated_Code/Cpu.c ****   /* ### LED "LED3" init code ... */
 264:../Generated_Code/Cpu.c ****   LED3_Init(); /* initialize LED driver */
 373              		.loc 1 264 0
 374 00c0 FFF7FEFF 		bl	LED3_Init
 265:../Generated_Code/Cpu.c ****   __EI();
 375              		.loc 1 265 0
 376              	@ 265 "../Generated_Code/Cpu.c" 1
 377 00c4 62B6     		CPSIE i
 378              	@ 0 "" 2
 266:../Generated_Code/Cpu.c **** }
 379              		.loc 1 266 0
 380              		.code	16
 381 00c6 BD46     		mov	sp, r7
 382              		@ sp needed for prologue
 383 00c8 80BD     		pop	{r7, pc}
 384              	.L11:
 385 00ca C046     		.align	2
 386              	.L10:
 387 00cc 00900440 		.word	1074040832
 388 00d0 FFF8FFFE 		.word	-16779009
 389 00d4 00F00740 		.word	1074262016
 390 00d8 00D00740 		.word	1074253824
 391 00dc 00E00740 		.word	1074257920
 392 00e0 00E100E0 		.word	-536813312
 393 00e4 FFFF00FF 		.word	-16711681
 394              		.cfi_endproc
 395              	.LFE3:
 397              		.text
 398              	.Letext0:
 399              		.file 2 "C:/Freescale/CW MCU v10.7/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 400              		.file 3 "C:/Freescale/CW MCU v10.7/MCU/ProcessorExpert/lib/Kinetis/iofiles/MKL25Z4.h"
 401              		.file 4 "../Generated_Code/Cpu.h"
DEFINED SYMBOLS
                            *ABS*:00000000 Cpu.c
                            *COM*:00000001 SR_reg
C:\Users\burak\AppData\Local\Temp\cc1C2AP1.s:22     .bss.SR_lock:00000000 SR_lock
C:\Users\burak\AppData\Local\Temp\cc1C2AP1.s:23     .bss.SR_lock:00000000 $d
C:\Users\burak\AppData\Local\Temp\cc1C2AP1.s:25     .text.Cpu_INT_NMIInterrupt:00000000 $t
C:\Users\burak\AppData\Local\Temp\cc1C2AP1.s:30     .text.Cpu_INT_NMIInterrupt:00000000 Cpu_INT_NMIInterrupt
C:\Users\burak\AppData\Local\Temp\cc1C2AP1.s:53     .text.Cpu_Interrupt:00000000 $t
C:\Users\burak\AppData\Local\Temp\cc1C2AP1.s:58     .text.Cpu_Interrupt:00000000 Cpu_Interrupt
C:\Users\burak\AppData\Local\Temp\cc1C2AP1.s:83     .text.__init_hardware:00000000 $t
C:\Users\burak\AppData\Local\Temp\cc1C2AP1.s:88     .text.__init_hardware:00000000 __init_hardware
C:\Users\burak\AppData\Local\Temp\cc1C2AP1.s:236    .text.__init_hardware:000000dc $d
C:\Users\burak\AppData\Local\Temp\cc1C2AP1.s:253    .text.PE_low_level_init:00000000 $t
C:\Users\burak\AppData\Local\Temp\cc1C2AP1.s:258    .text.PE_low_level_init:00000000 PE_low_level_init
C:\Users\burak\AppData\Local\Temp\cc1C2AP1.s:387    .text.PE_low_level_init:000000cc $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
Cpu_OnNMIINT
__vect_table
BitIoLdd4_Init
LED1_Init
BitIoLdd5_Init
LED2_Init
BitIoLdd6_Init
LED3_Init
