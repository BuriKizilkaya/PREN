   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"TU1.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.rodata.ChannelDevice,"a",%progbits
  18              		.align	2
  21              	ChannelDevice:
  22 0000 04       		.byte	4
  23 0001 000000   		.section	.rodata.ChannelMode,"a",%progbits
  24              		.align	2
  27              	ChannelMode:
  28 0000 01       		.byte	1
  29 0001 000000   		.section	.bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC,"aw",%nobits
  30              		.align	2
  33              	DeviceDataPrv__DEFAULT_RTOS_ALLOC:
  34 0000 00000000 		.space	8
  34      00000000 
  35              		.section	.bss.INT_TPM0__DEFAULT_RTOS_ISRPARAM,"aw",%nobits
  36              		.align	2
  39              	INT_TPM0__DEFAULT_RTOS_ISRPARAM:
  40 0000 00000000 		.space	4
  41              		.section	.text.TU1_Init,"ax",%progbits
  42              		.align	2
  43              		.global	TU1_Init
  44              		.code	16
  45              		.thumb_func
  47              	TU1_Init:
  48              	.LFB0:
  49              		.file 1 "../Generated_Code/TU1.c"
   1:../Generated_Code/TU1.c **** /* ###################################################################
   2:../Generated_Code/TU1.c **** **     This component module is generated by Processor Expert. Do not modify it.
   3:../Generated_Code/TU1.c **** **     Filename    : TU1.c
   4:../Generated_Code/TU1.c **** **     Project     : ProcessorExpert
   5:../Generated_Code/TU1.c **** **     Processor   : MKL25Z128VLK4
   6:../Generated_Code/TU1.c **** **     Component   : TimerUnit_LDD
   7:../Generated_Code/TU1.c **** **     Version     : Component 01.164, Driver 01.11, CPU db: 3.00.000
   8:../Generated_Code/TU1.c **** **     Compiler    : GNU C Compiler
   9:../Generated_Code/TU1.c **** **     Date/Time   : 2017-12-17, 19:56, # CodeGen: 44
  10:../Generated_Code/TU1.c **** **     Abstract    :
  11:../Generated_Code/TU1.c **** **          This TimerUnit component provides a low level API for unified hardware access across
  12:../Generated_Code/TU1.c **** **          various timer devices using the Prescaler-Counter-Compare-Capture timer structure.
  13:../Generated_Code/TU1.c **** **     Settings    :
  14:../Generated_Code/TU1.c **** **          Component name                                 : TU1
  15:../Generated_Code/TU1.c **** **          Module name                                    : TPM0
  16:../Generated_Code/TU1.c **** **          Counter                                        : TPM0_CNT
  17:../Generated_Code/TU1.c **** **          Counter direction                              : Up
  18:../Generated_Code/TU1.c **** **          Counter width                                  : 16 bits
  19:../Generated_Code/TU1.c **** **          Value type                                     : Optimal
  20:../Generated_Code/TU1.c **** **          Input clock source                             : Internal
  21:../Generated_Code/TU1.c **** **            Counter frequency                            : 2.62144 MHz
  22:../Generated_Code/TU1.c **** **          Counter restart                                : On-overrun
  23:../Generated_Code/TU1.c **** **            Overrun period                               : 25 ms
  24:../Generated_Code/TU1.c **** **            Interrupt                                    : Enabled
  25:../Generated_Code/TU1.c **** **              Interrupt                                  : INT_TPM0
  26:../Generated_Code/TU1.c **** **              Interrupt priority                         : medium priority
  27:../Generated_Code/TU1.c **** **          Channel list                                   : 1
  28:../Generated_Code/TU1.c **** **            Channel 0                                    : 
  29:../Generated_Code/TU1.c **** **              Mode                                       : Capture
  30:../Generated_Code/TU1.c **** **                Capture                                  : TPM0_C4V
  31:../Generated_Code/TU1.c **** **                Capture input pin                        : PTD4/LLWU_P14/SPI1_PCS0/UART2_RX/TPM0_
  32:../Generated_Code/TU1.c **** **                Capture input signal                     : US_Echo_D2
  33:../Generated_Code/TU1.c **** **                Edge                                     : both edges
  34:../Generated_Code/TU1.c **** **                Maximum time of event                    : 25.00001792 ms
  35:../Generated_Code/TU1.c **** **                Interrupt                                : Enabled
  36:../Generated_Code/TU1.c **** **                  Interrupt                              : INT_TPM0
  37:../Generated_Code/TU1.c **** **                  Interrupt priority                     : medium priority
  38:../Generated_Code/TU1.c **** **          Initialization                                 : 
  39:../Generated_Code/TU1.c **** **            Enabled in init. code                        : yes
  40:../Generated_Code/TU1.c **** **            Auto initialization                          : no
  41:../Generated_Code/TU1.c **** **            Event mask                                   : 
  42:../Generated_Code/TU1.c **** **              OnCounterRestart                           : Enabled
  43:../Generated_Code/TU1.c **** **              OnChannel0                                 : Enabled
  44:../Generated_Code/TU1.c **** **              OnChannel1                                 : Disabled
  45:../Generated_Code/TU1.c **** **              OnChannel2                                 : Disabled
  46:../Generated_Code/TU1.c **** **              OnChannel3                                 : Disabled
  47:../Generated_Code/TU1.c **** **              OnChannel4                                 : Disabled
  48:../Generated_Code/TU1.c **** **              OnChannel5                                 : Disabled
  49:../Generated_Code/TU1.c **** **              OnChannel6                                 : Disabled
  50:../Generated_Code/TU1.c **** **              OnChannel7                                 : Disabled
  51:../Generated_Code/TU1.c **** **          CPU clock/configuration selection              : 
  52:../Generated_Code/TU1.c **** **            Clock configuration 0                        : This component enabled
  53:../Generated_Code/TU1.c **** **            Clock configuration 1                        : This component disabled
  54:../Generated_Code/TU1.c **** **            Clock configuration 2                        : This component disabled
  55:../Generated_Code/TU1.c **** **            Clock configuration 3                        : This component disabled
  56:../Generated_Code/TU1.c **** **            Clock configuration 4                        : This component disabled
  57:../Generated_Code/TU1.c **** **            Clock configuration 5                        : This component disabled
  58:../Generated_Code/TU1.c **** **            Clock configuration 6                        : This component disabled
  59:../Generated_Code/TU1.c **** **            Clock configuration 7                        : This component disabled
  60:../Generated_Code/TU1.c **** **     Contents    :
  61:../Generated_Code/TU1.c **** **         Init            - LDD_TDeviceData* TU1_Init(LDD_TUserData *UserDataPtr);
  62:../Generated_Code/TU1.c **** **         Deinit          - void TU1_Deinit(LDD_TDeviceData *DeviceDataPtr);
  63:../Generated_Code/TU1.c **** **         ResetCounter    - LDD_TError TU1_ResetCounter(LDD_TDeviceData *DeviceDataPtr);
  64:../Generated_Code/TU1.c **** **         GetCaptureValue - LDD_TError TU1_GetCaptureValue(LDD_TDeviceData *DeviceDataPtr, uint8_t
  65:../Generated_Code/TU1.c **** **
  66:../Generated_Code/TU1.c **** **     Copyright : 1997 - 2014 Freescale Semiconductor, Inc. 
  67:../Generated_Code/TU1.c **** **     All Rights Reserved.
  68:../Generated_Code/TU1.c **** **     
  69:../Generated_Code/TU1.c **** **     Redistribution and use in source and binary forms, with or without modification,
  70:../Generated_Code/TU1.c **** **     are permitted provided that the following conditions are met:
  71:../Generated_Code/TU1.c **** **     
  72:../Generated_Code/TU1.c **** **     o Redistributions of source code must retain the above copyright notice, this list
  73:../Generated_Code/TU1.c **** **       of conditions and the following disclaimer.
  74:../Generated_Code/TU1.c **** **     
  75:../Generated_Code/TU1.c **** **     o Redistributions in binary form must reproduce the above copyright notice, this
  76:../Generated_Code/TU1.c **** **       list of conditions and the following disclaimer in the documentation and/or
  77:../Generated_Code/TU1.c **** **       other materials provided with the distribution.
  78:../Generated_Code/TU1.c **** **     
  79:../Generated_Code/TU1.c **** **     o Neither the name of Freescale Semiconductor, Inc. nor the names of its
  80:../Generated_Code/TU1.c **** **       contributors may be used to endorse or promote products derived from this
  81:../Generated_Code/TU1.c **** **       software without specific prior written permission.
  82:../Generated_Code/TU1.c **** **     
  83:../Generated_Code/TU1.c **** **     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  84:../Generated_Code/TU1.c **** **     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  85:../Generated_Code/TU1.c **** **     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  86:../Generated_Code/TU1.c **** **     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  87:../Generated_Code/TU1.c **** **     ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  88:../Generated_Code/TU1.c **** **     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  89:../Generated_Code/TU1.c **** **     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  90:../Generated_Code/TU1.c **** **     ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  91:../Generated_Code/TU1.c **** **     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  92:../Generated_Code/TU1.c **** **     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  93:../Generated_Code/TU1.c **** **     
  94:../Generated_Code/TU1.c **** **     http: www.freescale.com
  95:../Generated_Code/TU1.c **** **     mail: support@freescale.com
  96:../Generated_Code/TU1.c **** ** ###################################################################*/
  97:../Generated_Code/TU1.c **** /*!
  98:../Generated_Code/TU1.c **** ** @file TU1.c
  99:../Generated_Code/TU1.c **** ** @version 01.11
 100:../Generated_Code/TU1.c **** ** @brief
 101:../Generated_Code/TU1.c **** **          This TimerUnit component provides a low level API for unified hardware access across
 102:../Generated_Code/TU1.c **** **          various timer devices using the Prescaler-Counter-Compare-Capture timer structure.
 103:../Generated_Code/TU1.c **** */         
 104:../Generated_Code/TU1.c **** /*!
 105:../Generated_Code/TU1.c **** **  @addtogroup TU1_module TU1 module documentation
 106:../Generated_Code/TU1.c **** **  @{
 107:../Generated_Code/TU1.c **** */         
 108:../Generated_Code/TU1.c **** 
 109:../Generated_Code/TU1.c **** /* MODULE TU1. */
 110:../Generated_Code/TU1.c **** 
 111:../Generated_Code/TU1.c **** #include "Events.h"
 112:../Generated_Code/TU1.c **** #include "TU1.h"
 113:../Generated_Code/TU1.c **** /* {Default RTOS Adapter} No RTOS includes */
 114:../Generated_Code/TU1.c **** #include "IO_Map.h"
 115:../Generated_Code/TU1.c **** 
 116:../Generated_Code/TU1.c **** #ifdef __cplusplus
 117:../Generated_Code/TU1.c **** extern "C" {
 118:../Generated_Code/TU1.c **** #endif 
 119:../Generated_Code/TU1.c **** 
 120:../Generated_Code/TU1.c **** /* List of channels used by component */
 121:../Generated_Code/TU1.c **** static const uint8_t ChannelDevice[TU1_NUMBER_OF_CHANNELS] = {0x04U};
 122:../Generated_Code/TU1.c **** 
 123:../Generated_Code/TU1.c **** /* Table of channels mode / 0 - compare mode, 1 - capture mode */
 124:../Generated_Code/TU1.c **** static const uint8_t ChannelMode[TU1_NUMBER_OF_CHANNELS] = {0x01U};
 125:../Generated_Code/TU1.c **** 
 126:../Generated_Code/TU1.c **** 
 127:../Generated_Code/TU1.c **** typedef struct {
 128:../Generated_Code/TU1.c ****   LDD_TEventMask EnEvents;             /* Enable/Disable events mask */
 129:../Generated_Code/TU1.c ****   LDD_TUserData *UserDataPtr;          /* RTOS device data structure */
 130:../Generated_Code/TU1.c **** } TU1_TDeviceData;
 131:../Generated_Code/TU1.c **** 
 132:../Generated_Code/TU1.c **** typedef TU1_TDeviceData *TU1_TDeviceDataPtr; /* Pointer to the device data structure. */
 133:../Generated_Code/TU1.c **** 
 134:../Generated_Code/TU1.c **** /* {Default RTOS Adapter} Static object used for simulation of dynamic driver memory allocation */
 135:../Generated_Code/TU1.c **** static TU1_TDeviceData DeviceDataPrv__DEFAULT_RTOS_ALLOC;
 136:../Generated_Code/TU1.c **** /* {Default RTOS Adapter} Global variable used for passing a parameter into ISR */
 137:../Generated_Code/TU1.c **** static TU1_TDeviceDataPtr INT_TPM0__DEFAULT_RTOS_ISRPARAM;
 138:../Generated_Code/TU1.c **** 
 139:../Generated_Code/TU1.c **** #define AVAILABLE_EVENTS_MASK (LDD_TEventMask)(LDD_TIMERUNIT_ON_CHANNEL_0 | LDD_TIMERUNIT_ON_COUNTE
 140:../Generated_Code/TU1.c **** #define AVAILABLE_PIN_MASK (LDD_TPinMask)(TU1_CHANNEL_0_PIN)
 141:../Generated_Code/TU1.c **** #define LAST_CHANNEL 0x00U
 142:../Generated_Code/TU1.c **** 
 143:../Generated_Code/TU1.c **** /* Internal method prototypes */
 144:../Generated_Code/TU1.c **** /*
 145:../Generated_Code/TU1.c **** ** ===================================================================
 146:../Generated_Code/TU1.c **** **     Method      :  TU1_Init (component TimerUnit_LDD)
 147:../Generated_Code/TU1.c **** */
 148:../Generated_Code/TU1.c **** /*!
 149:../Generated_Code/TU1.c **** **     @brief
 150:../Generated_Code/TU1.c **** **         Initializes the device. Allocates memory for the device data
 151:../Generated_Code/TU1.c **** **         structure, allocates interrupt vectors and sets interrupt
 152:../Generated_Code/TU1.c **** **         priority, sets pin routing, sets timing, etc. If the
 153:../Generated_Code/TU1.c **** **         property ["Enable in init. code"] is set to "yes" value then
 154:../Generated_Code/TU1.c **** **         the device is also enabled (see the description of the
 155:../Generated_Code/TU1.c **** **         [Enable] method). In this case the [Enable] method is not
 156:../Generated_Code/TU1.c **** **         necessary and needn't to be generated. This method can be
 157:../Generated_Code/TU1.c **** **         called only once. Before the second call of Init the [Deinit]
 158:../Generated_Code/TU1.c **** **         must be called first.
 159:../Generated_Code/TU1.c **** **     @param
 160:../Generated_Code/TU1.c **** **         UserDataPtr     - Pointer to the user or
 161:../Generated_Code/TU1.c **** **                           RTOS specific data. This pointer will be
 162:../Generated_Code/TU1.c **** **                           passed as an event or callback parameter.
 163:../Generated_Code/TU1.c **** **     @return
 164:../Generated_Code/TU1.c **** **                         - Pointer to the dynamically allocated private
 165:../Generated_Code/TU1.c **** **                           structure or NULL if there was an error.
 166:../Generated_Code/TU1.c **** */
 167:../Generated_Code/TU1.c **** /* ===================================================================*/
 168:../Generated_Code/TU1.c **** LDD_TDeviceData* TU1_Init(LDD_TUserData *UserDataPtr)
 169:../Generated_Code/TU1.c **** {
  50              		.loc 1 169 0
  51              		.cfi_startproc
  52 0000 80B5     		push	{r7, lr}
  53              	.LCFI0:
  54              		.cfi_def_cfa_offset 8
  55              		.cfi_offset 7, -8
  56              		.cfi_offset 14, -4
  57 0002 84B0     		sub	sp, sp, #16
  58              	.LCFI1:
  59              		.cfi_def_cfa_offset 24
  60 0004 00AF     		add	r7, sp, #0
  61              	.LCFI2:
  62              		.cfi_def_cfa_register 7
  63 0006 7860     		str	r0, [r7, #4]
 170:../Generated_Code/TU1.c ****   /* Allocate device structure */
 171:../Generated_Code/TU1.c ****   TU1_TDeviceData *DeviceDataPrv;
 172:../Generated_Code/TU1.c ****   /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer 
 173:../Generated_Code/TU1.c ****   DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  64              		.loc 1 173 0
  65 0008 2C4B     		ldr	r3, .L3
  66 000a FB60     		str	r3, [r7, #12]
 174:../Generated_Code/TU1.c ****   DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
  67              		.loc 1 174 0
  68 000c FB68     		ldr	r3, [r7, #12]
  69 000e 7A68     		ldr	r2, [r7, #4]
  70 0010 5A60     		str	r2, [r3, #4]
 175:../Generated_Code/TU1.c ****   /* Interrupt vector(s) allocation */
 176:../Generated_Code/TU1.c ****   /* {Default RTOS Adapter} Set interrupt vector: IVT is static, ISR parameter is passed by the glo
 177:../Generated_Code/TU1.c ****   INT_TPM0__DEFAULT_RTOS_ISRPARAM = DeviceDataPrv;
  71              		.loc 1 177 0
  72 0012 2B4B     		ldr	r3, .L3+4
  73 0014 FA68     		ldr	r2, [r7, #12]
  74 0016 1A60     		str	r2, [r3]
 178:../Generated_Code/TU1.c ****   /* SIM_SCGC6: TPM0=1 */
 179:../Generated_Code/TU1.c ****   SIM_SCGC6 |= SIM_SCGC6_TPM0_MASK;
  75              		.loc 1 179 0
  76 0018 2A4A     		ldr	r2, .L3+8
  77 001a 2A49     		ldr	r1, .L3+8
  78 001c 2A4B     		ldr	r3, .L3+12
  79 001e CB58     		ldr	r3, [r1, r3]
  80 0020 8021     		mov	r1, #128
  81 0022 4904     		lsl	r1, r1, #17
  82 0024 1943     		orr	r1, r3
  83 0026 284B     		ldr	r3, .L3+12
  84 0028 D150     		str	r1, [r2, r3]
 180:../Generated_Code/TU1.c ****   /* TPM0_SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,
 181:../Generated_Code/TU1.c ****   TPM0_SC = (TPM_SC_CMOD(0x00) | TPM_SC_PS(0x00)); /* Clear status and control register */
  85              		.loc 1 181 0
  86 002a 284B     		ldr	r3, .L3+16
  87 002c 0022     		mov	r2, #0
  88 002e 1A60     		str	r2, [r3]
 182:../Generated_Code/TU1.c ****   /* TPM0_CNT: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,COUN
 183:../Generated_Code/TU1.c ****   TPM0_CNT = TPM_CNT_COUNT(0x00);      /* Reset counter register */
  89              		.loc 1 183 0
  90 0030 264B     		ldr	r3, .L3+16
  91 0032 0022     		mov	r2, #0
  92 0034 5A60     		str	r2, [r3, #4]
 184:../Generated_Code/TU1.c ****   /* TPM0_C0SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=
 185:../Generated_Code/TU1.c ****   TPM0_C0SC = 0x00U;                   /* Clear channel status and control register */
  93              		.loc 1 185 0
  94 0036 254B     		ldr	r3, .L3+16
  95 0038 0022     		mov	r2, #0
  96 003a DA60     		str	r2, [r3, #12]
 186:../Generated_Code/TU1.c ****   /* TPM0_C1SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=
 187:../Generated_Code/TU1.c ****   TPM0_C1SC = 0x00U;                   /* Clear channel status and control register */
  97              		.loc 1 187 0
  98 003c 234B     		ldr	r3, .L3+16
  99 003e 0022     		mov	r2, #0
 100 0040 5A61     		str	r2, [r3, #20]
 188:../Generated_Code/TU1.c ****   /* TPM0_C2SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=
 189:../Generated_Code/TU1.c ****   TPM0_C2SC = 0x00U;                   /* Clear channel status and control register */
 101              		.loc 1 189 0
 102 0042 224B     		ldr	r3, .L3+16
 103 0044 0022     		mov	r2, #0
 104 0046 DA61     		str	r2, [r3, #28]
 190:../Generated_Code/TU1.c ****   /* TPM0_C3SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=
 191:../Generated_Code/TU1.c ****   TPM0_C3SC = 0x00U;                   /* Clear channel status and control register */
 105              		.loc 1 191 0
 106 0048 204B     		ldr	r3, .L3+16
 107 004a 0022     		mov	r2, #0
 108 004c 5A62     		str	r2, [r3, #36]
 192:../Generated_Code/TU1.c ****   /* TPM0_C4SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=
 193:../Generated_Code/TU1.c ****   TPM0_C4SC = 0x00U;                   /* Clear channel status and control register */
 109              		.loc 1 193 0
 110 004e 1F4B     		ldr	r3, .L3+16
 111 0050 0022     		mov	r2, #0
 112 0052 DA62     		str	r2, [r3, #44]
 194:../Generated_Code/TU1.c ****   /* TPM0_C5SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=
 195:../Generated_Code/TU1.c ****   TPM0_C5SC = 0x00U;                   /* Clear channel status and control register */
 113              		.loc 1 195 0
 114 0054 1D4B     		ldr	r3, .L3+16
 115 0056 0022     		mov	r2, #0
 116 0058 5A63     		str	r2, [r3, #52]
 196:../Generated_Code/TU1.c ****   /* TPM0_MOD: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,MOD=
 197:../Generated_Code/TU1.c ****   TPM0_MOD = TPM_MOD_MOD(0xFFFF);      /* Set up modulo register */
 117              		.loc 1 197 0
 118 005a 1C4B     		ldr	r3, .L3+16
 119 005c 1C4A     		ldr	r2, .L3+20
 120 005e 9A60     		str	r2, [r3, #8]
 198:../Generated_Code/TU1.c ****   /* TPM0_C4SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=
 199:../Generated_Code/TU1.c ****   TPM0_C4SC = (TPM_CnSC_CHIE_MASK | TPM_CnSC_ELSB_MASK | TPM_CnSC_ELSA_MASK); /* Set up channel sta
 121              		.loc 1 199 0
 122 0060 1A4B     		ldr	r3, .L3+16
 123 0062 4C22     		mov	r2, #76
 124 0064 DA62     		str	r2, [r3, #44]
 200:../Generated_Code/TU1.c ****   /* PORTD_PCR4: ISF=0,MUX=4 */
 201:../Generated_Code/TU1.c ****   PORTD_PCR4 = (uint32_t)((PORTD_PCR4 & (uint32_t)~(uint32_t)(
 125              		.loc 1 201 0
 126 0066 1B4B     		ldr	r3, .L3+24
 127 0068 1A4A     		ldr	r2, .L3+24
 128 006a 1169     		ldr	r1, [r2, #16]
 129 006c 1A4A     		ldr	r2, .L3+28
 130 006e 0A40     		and	r2, r1
 131 0070 8021     		mov	r1, #128
 132 0072 C900     		lsl	r1, r1, #3
 133 0074 0A43     		orr	r2, r1
 134 0076 1A61     		str	r2, [r3, #16]
 202:../Generated_Code/TU1.c ****                 PORT_PCR_ISF_MASK |
 203:../Generated_Code/TU1.c ****                 PORT_PCR_MUX(0x03)
 204:../Generated_Code/TU1.c ****                )) | (uint32_t)(
 205:../Generated_Code/TU1.c ****                 PORT_PCR_MUX(0x04)
 206:../Generated_Code/TU1.c ****                ));
 207:../Generated_Code/TU1.c ****   DeviceDataPrv->EnEvents = 0x0101U;   /* Enable selected events */
 135              		.loc 1 207 0
 136 0078 FB68     		ldr	r3, [r7, #12]
 137 007a 184A     		ldr	r2, .L3+32
 138 007c 1A60     		str	r2, [r3]
 208:../Generated_Code/TU1.c ****   /* NVIC_IPR4: PRI_17=0x80 */
 209:../Generated_Code/TU1.c ****   NVIC_IPR4 = (uint32_t)((NVIC_IPR4 & (uint32_t)~(uint32_t)(
 139              		.loc 1 209 0
 140 007e 184A     		ldr	r2, .L3+36
 141 0080 1749     		ldr	r1, .L3+36
 142 0082 C423     		mov	r3, #196
 143 0084 9B00     		lsl	r3, r3, #2
 144 0086 C958     		ldr	r1, [r1, r3]
 145 0088 164B     		ldr	r3, .L3+40
 146 008a 0B40     		and	r3, r1
 147 008c 8021     		mov	r1, #128
 148 008e 0902     		lsl	r1, r1, #8
 149 0090 1943     		orr	r1, r3
 150 0092 C423     		mov	r3, #196
 151 0094 9B00     		lsl	r3, r3, #2
 152 0096 D150     		str	r1, [r2, r3]
 210:../Generated_Code/TU1.c ****                NVIC_IP_PRI_17(0x7F)
 211:../Generated_Code/TU1.c ****               )) | (uint32_t)(
 212:../Generated_Code/TU1.c ****                NVIC_IP_PRI_17(0x80)
 213:../Generated_Code/TU1.c ****               ));
 214:../Generated_Code/TU1.c ****   /* NVIC_ISER: SETENA|=0x00020000 */
 215:../Generated_Code/TU1.c ****   NVIC_ISER |= NVIC_ISER_SETENA(0x00020000);
 153              		.loc 1 215 0
 154 0098 114B     		ldr	r3, .L3+36
 155 009a 114A     		ldr	r2, .L3+36
 156 009c 1268     		ldr	r2, [r2]
 157 009e 8021     		mov	r1, #128
 158 00a0 8902     		lsl	r1, r1, #10
 159 00a2 0A43     		orr	r2, r1
 160 00a4 1A60     		str	r2, [r3]
 216:../Generated_Code/TU1.c ****   /* TPM0_SC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,
 217:../Generated_Code/TU1.c ****   TPM0_SC = (TPM_SC_TOIE_MASK | TPM_SC_CMOD(0x01) | TPM_SC_PS(0x03)); /* Set up status and control 
 161              		.loc 1 217 0
 162 00a6 094B     		ldr	r3, .L3+16
 163 00a8 4B22     		mov	r2, #75
 164 00aa 1A60     		str	r2, [r3]
 218:../Generated_Code/TU1.c ****   /* Registration of the device structure */
 219:../Generated_Code/TU1.c ****   PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_TU1_ID,DeviceDataPrv);
 165              		.loc 1 219 0
 166 00ac 0E4B     		ldr	r3, .L3+44
 167 00ae FA68     		ldr	r2, [r7, #12]
 168 00b0 5A60     		str	r2, [r3, #4]
 220:../Generated_Code/TU1.c ****   return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
 169              		.loc 1 220 0
 170 00b2 FB68     		ldr	r3, [r7, #12]
 221:../Generated_Code/TU1.c **** }
 171              		.loc 1 221 0
 172 00b4 181C     		mov	r0, r3
 173 00b6 BD46     		mov	sp, r7
 174 00b8 04B0     		add	sp, sp, #16
 175              		@ sp needed for prologue
 176 00ba 80BD     		pop	{r7, pc}
 177              	.L4:
 178              		.align	2
 179              	.L3:
 180 00bc 00000000 		.word	DeviceDataPrv__DEFAULT_RTOS_ALLOC
 181 00c0 00000000 		.word	INT_TPM0__DEFAULT_RTOS_ISRPARAM
 182 00c4 00700440 		.word	1074032640
 183 00c8 3C100000 		.word	4156
 184 00cc 00800340 		.word	1073971200
 185 00d0 FFFF0000 		.word	65535
 186 00d4 00C00440 		.word	1074053120
 187 00d8 FFF8FFFE 		.word	-16779009
 188 00dc 01010000 		.word	257
 189 00e0 00E100E0 		.word	-536813312
 190 00e4 FF00FFFF 		.word	-65281
 191 00e8 00000000 		.word	PE_LDD_DeviceDataList
 192              		.cfi_endproc
 193              	.LFE0:
 195              		.section	.text.TU1_Deinit,"ax",%progbits
 196              		.align	2
 197              		.global	TU1_Deinit
 198              		.code	16
 199              		.thumb_func
 201              	TU1_Deinit:
 202              	.LFB1:
 222:../Generated_Code/TU1.c **** 
 223:../Generated_Code/TU1.c **** /*
 224:../Generated_Code/TU1.c **** ** ===================================================================
 225:../Generated_Code/TU1.c **** **     Method      :  TU1_Deinit (component TimerUnit_LDD)
 226:../Generated_Code/TU1.c **** */
 227:../Generated_Code/TU1.c **** /*!
 228:../Generated_Code/TU1.c **** **     @brief
 229:../Generated_Code/TU1.c **** **         Deinitializes the device. Switches off the device, frees the
 230:../Generated_Code/TU1.c **** **         device data structure memory, interrupts vectors, etc.
 231:../Generated_Code/TU1.c **** **     @param
 232:../Generated_Code/TU1.c **** **         DeviceDataPtr   - Device data structure
 233:../Generated_Code/TU1.c **** **                           pointer returned by Init method
 234:../Generated_Code/TU1.c **** */
 235:../Generated_Code/TU1.c **** /* ===================================================================*/
 236:../Generated_Code/TU1.c **** void TU1_Deinit(LDD_TDeviceData *DeviceDataPtr)
 237:../Generated_Code/TU1.c **** {
 203              		.loc 1 237 0
 204              		.cfi_startproc
 205 0000 80B5     		push	{r7, lr}
 206              	.LCFI3:
 207              		.cfi_def_cfa_offset 8
 208              		.cfi_offset 7, -8
 209              		.cfi_offset 14, -4
 210 0002 84B0     		sub	sp, sp, #16
 211              	.LCFI4:
 212              		.cfi_def_cfa_offset 24
 213 0004 00AF     		add	r7, sp, #0
 214              	.LCFI5:
 215              		.cfi_def_cfa_register 7
 216 0006 7860     		str	r0, [r7, #4]
 238:../Generated_Code/TU1.c ****   TU1_TDeviceData *DeviceDataPrv = (TU1_TDeviceData *)DeviceDataPtr;
 217              		.loc 1 238 0
 218 0008 7B68     		ldr	r3, [r7, #4]
 219 000a FB60     		str	r3, [r7, #12]
 239:../Generated_Code/TU1.c **** 
 240:../Generated_Code/TU1.c ****   (void)DeviceDataPrv;
 241:../Generated_Code/TU1.c ****   TPM_PDD_SelectPrescalerSource(TPM0_BASE_PTR, TPM_PDD_DISABLED);
 220              		.loc 1 241 0
 221 000c 054B     		ldr	r3, .L6
 222 000e 054A     		ldr	r2, .L6
 223 0010 1268     		ldr	r2, [r2]
 224 0012 9821     		mov	r1, #152
 225 0014 8A43     		bic	r2, r1
 226 0016 1A60     		str	r2, [r3]
 242:../Generated_Code/TU1.c ****   /* Interrupt vector(s) deallocation */
 243:../Generated_Code/TU1.c ****   /* {Default RTOS Adapter} Restore interrupt vector: IVT is static, no code is generated */
 244:../Generated_Code/TU1.c ****   /* Unregistration of the device structure */
 245:../Generated_Code/TU1.c ****   PE_LDD_UnregisterDeviceStructure(PE_LDD_COMPONENT_TU1_ID);
 227              		.loc 1 245 0
 228 0018 034B     		ldr	r3, .L6+4
 229 001a 0022     		mov	r2, #0
 230 001c 5A60     		str	r2, [r3, #4]
 246:../Generated_Code/TU1.c ****   /* Deallocation of the device structure */
 247:../Generated_Code/TU1.c ****   /* {Default RTOS Adapter} Driver memory deallocation: Dynamic allocation is simulated, no dealloc
 248:../Generated_Code/TU1.c **** }
 231              		.loc 1 248 0
 232 001e BD46     		mov	sp, r7
 233 0020 04B0     		add	sp, sp, #16
 234              		@ sp needed for prologue
 235 0022 80BD     		pop	{r7, pc}
 236              	.L7:
 237              		.align	2
 238              	.L6:
 239 0024 00800340 		.word	1073971200
 240 0028 00000000 		.word	PE_LDD_DeviceDataList
 241              		.cfi_endproc
 242              	.LFE1:
 244              		.section	.text.TU1_ResetCounter,"ax",%progbits
 245              		.align	2
 246              		.global	TU1_ResetCounter
 247              		.code	16
 248              		.thumb_func
 250              	TU1_ResetCounter:
 251              	.LFB2:
 249:../Generated_Code/TU1.c **** 
 250:../Generated_Code/TU1.c **** /*
 251:../Generated_Code/TU1.c **** ** ===================================================================
 252:../Generated_Code/TU1.c **** **     Method      :  TU1_ResetCounter (component TimerUnit_LDD)
 253:../Generated_Code/TU1.c **** */
 254:../Generated_Code/TU1.c **** /*!
 255:../Generated_Code/TU1.c **** **     @brief
 256:../Generated_Code/TU1.c **** **         Resets counter. If counter is counting up then it is set to
 257:../Generated_Code/TU1.c **** **         zero. If counter is counting down then counter is updated to
 258:../Generated_Code/TU1.c **** **         the reload value.
 259:../Generated_Code/TU1.c **** **         The method is not available if HW doesn't allow resetting of
 260:../Generated_Code/TU1.c **** **         the counter.
 261:../Generated_Code/TU1.c **** **     @param
 262:../Generated_Code/TU1.c **** **         DeviceDataPtr   - Device data structure
 263:../Generated_Code/TU1.c **** **                           pointer returned by [Init] method.
 264:../Generated_Code/TU1.c **** **     @return
 265:../Generated_Code/TU1.c **** **                         - Error code, possible codes:
 266:../Generated_Code/TU1.c **** **                           ERR_OK - OK 
 267:../Generated_Code/TU1.c **** **                           ERR_SPEED - The component does not work in
 268:../Generated_Code/TU1.c **** **                           the active clock configuration
 269:../Generated_Code/TU1.c **** */
 270:../Generated_Code/TU1.c **** /* ===================================================================*/
 271:../Generated_Code/TU1.c **** LDD_TError TU1_ResetCounter(LDD_TDeviceData *DeviceDataPtr)
 272:../Generated_Code/TU1.c **** {
 252              		.loc 1 272 0
 253              		.cfi_startproc
 254 0000 80B5     		push	{r7, lr}
 255              	.LCFI6:
 256              		.cfi_def_cfa_offset 8
 257              		.cfi_offset 7, -8
 258              		.cfi_offset 14, -4
 259 0002 82B0     		sub	sp, sp, #8
 260              	.LCFI7:
 261              		.cfi_def_cfa_offset 16
 262 0004 00AF     		add	r7, sp, #0
 263              	.LCFI8:
 264              		.cfi_def_cfa_register 7
 265 0006 7860     		str	r0, [r7, #4]
 273:../Generated_Code/TU1.c ****   (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning *
 274:../Generated_Code/TU1.c ****   TPM_PDD_InitializeCounter(TPM0_BASE_PTR);
 266              		.loc 1 274 0
 267 0008 034B     		ldr	r3, .L10
 268 000a 0022     		mov	r2, #0
 269 000c 5A60     		str	r2, [r3, #4]
 275:../Generated_Code/TU1.c ****   return ERR_OK;                       /* OK */
 270              		.loc 1 275 0
 271 000e 0023     		mov	r3, #0
 276:../Generated_Code/TU1.c **** }
 272              		.loc 1 276 0
 273 0010 181C     		mov	r0, r3
 274 0012 BD46     		mov	sp, r7
 275 0014 02B0     		add	sp, sp, #8
 276              		@ sp needed for prologue
 277 0016 80BD     		pop	{r7, pc}
 278              	.L11:
 279              		.align	2
 280              	.L10:
 281 0018 00800340 		.word	1073971200
 282              		.cfi_endproc
 283              	.LFE2:
 285              		.section	.text.TU1_GetCaptureValue,"ax",%progbits
 286              		.align	2
 287              		.global	TU1_GetCaptureValue
 288              		.code	16
 289              		.thumb_func
 291              	TU1_GetCaptureValue:
 292              	.LFB3:
 277:../Generated_Code/TU1.c **** 
 278:../Generated_Code/TU1.c **** /*
 279:../Generated_Code/TU1.c **** ** ===================================================================
 280:../Generated_Code/TU1.c **** **     Method      :  TU1_GetCaptureValue (component TimerUnit_LDD)
 281:../Generated_Code/TU1.c **** */
 282:../Generated_Code/TU1.c **** /*!
 283:../Generated_Code/TU1.c **** **     @brief
 284:../Generated_Code/TU1.c **** **         Returns the content of capture register specified by the
 285:../Generated_Code/TU1.c **** **         parameter ChannelIdx. This method is available when at least
 286:../Generated_Code/TU1.c **** **         one channel is configured.
 287:../Generated_Code/TU1.c **** **     @param
 288:../Generated_Code/TU1.c **** **         DeviceDataPtr   - Device data structure
 289:../Generated_Code/TU1.c **** **                           pointer returned by [Init] method.
 290:../Generated_Code/TU1.c **** **     @param
 291:../Generated_Code/TU1.c **** **         ChannelIdx      - Index of the component
 292:../Generated_Code/TU1.c **** **                           channel.
 293:../Generated_Code/TU1.c **** **     @param
 294:../Generated_Code/TU1.c **** **         ValuePtr        - Pointer to return value of the
 295:../Generated_Code/TU1.c **** **                           capture register.
 296:../Generated_Code/TU1.c **** **     @return
 297:../Generated_Code/TU1.c **** **                         - Error code, possible codes:
 298:../Generated_Code/TU1.c **** **                           ERR_OK - OK 
 299:../Generated_Code/TU1.c **** **                           ERR_PARAM_INDEX - ChannelIdx parameter is
 300:../Generated_Code/TU1.c **** **                           out of possible range
 301:../Generated_Code/TU1.c **** **                           ERR_NOTAVAIL -  The capture mode is not
 302:../Generated_Code/TU1.c **** **                           selected for selected channel.
 303:../Generated_Code/TU1.c **** **                           ERR_SPEED - The component does not work in
 304:../Generated_Code/TU1.c **** **                           the active clock configuration
 305:../Generated_Code/TU1.c **** */
 306:../Generated_Code/TU1.c **** /* ===================================================================*/
 307:../Generated_Code/TU1.c **** LDD_TError TU1_GetCaptureValue(LDD_TDeviceData *DeviceDataPtr, uint8_t ChannelIdx, TU1_TValueType *
 308:../Generated_Code/TU1.c **** {
 293              		.loc 1 308 0
 294              		.cfi_startproc
 295 0000 80B5     		push	{r7, lr}
 296              	.LCFI9:
 297              		.cfi_def_cfa_offset 8
 298              		.cfi_offset 7, -8
 299              		.cfi_offset 14, -4
 300 0002 84B0     		sub	sp, sp, #16
 301              	.LCFI10:
 302              		.cfi_def_cfa_offset 24
 303 0004 00AF     		add	r7, sp, #0
 304              	.LCFI11:
 305              		.cfi_def_cfa_register 7
 306 0006 F860     		str	r0, [r7, #12]
 307 0008 7A60     		str	r2, [r7, #4]
 308 000a 3B1C     		mov	r3, r7
 309 000c 0B33     		add	r3, r3, #11
 310 000e 0A1C     		add	r2, r1, #0
 311 0010 1A70     		strb	r2, [r3]
 309:../Generated_Code/TU1.c ****   (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning *
 310:../Generated_Code/TU1.c ****   /* Parameter test - this test can be disabled by setting the "Ignore range checking"
 311:../Generated_Code/TU1.c ****      property to the "yes" value in the "Configuration inspector" */
 312:../Generated_Code/TU1.c ****   if (ChannelIdx > LAST_CHANNEL) {     /* Is the channel index out of range? */
 312              		.loc 1 312 0
 313 0012 3B1C     		mov	r3, r7
 314 0014 0B33     		add	r3, r3, #11
 315 0016 1B78     		ldrb	r3, [r3]
 316 0018 002B     		cmp	r3, #0
 317 001a 01D0     		beq	.L13
 313:../Generated_Code/TU1.c ****     return ERR_PARAM_INDEX;            /* If yes then error */
 318              		.loc 1 313 0
 319 001c 8223     		mov	r3, #130
 320 001e 15E0     		b	.L14
 321              	.L13:
 314:../Generated_Code/TU1.c ****   }
 315:../Generated_Code/TU1.c ****   if ((ChannelMode[ChannelIdx]) != 1u) { /* Is the channel in capture mode? */
 322              		.loc 1 315 0
 323 0020 3B1C     		mov	r3, r7
 324 0022 0B33     		add	r3, r3, #11
 325 0024 1B78     		ldrb	r3, [r3]
 326 0026 0B4A     		ldr	r2, .L16
 327 0028 D35C     		ldrb	r3, [r2, r3]
 328 002a 012B     		cmp	r3, #1
 329 002c 01D0     		beq	.L15
 316:../Generated_Code/TU1.c ****     return ERR_NOTAVAIL;               /* If not then error */
 330              		.loc 1 316 0
 331 002e 0923     		mov	r3, #9
 332 0030 0CE0     		b	.L14
 333              	.L15:
 317:../Generated_Code/TU1.c ****   }
 318:../Generated_Code/TU1.c ****   *ValuePtr = (TU1_TValueType)(TPM_PDD_ReadChannelValueReg(TPM0_BASE_PTR, ChannelDevice[ChannelIdx]
 334              		.loc 1 318 0
 335 0032 094A     		ldr	r2, .L16+4
 336 0034 3B1C     		mov	r3, r7
 337 0036 0B33     		add	r3, r3, #11
 338 0038 1B78     		ldrb	r3, [r3]
 339 003a 0849     		ldr	r1, .L16+8
 340 003c CB5C     		ldrb	r3, [r1, r3]
 341 003e 0133     		add	r3, r3, #1
 342 0040 DB00     		lsl	r3, r3, #3
 343 0042 D318     		add	r3, r2, r3
 344 0044 9A68     		ldr	r2, [r3, #8]
 345 0046 7B68     		ldr	r3, [r7, #4]
 346 0048 1A60     		str	r2, [r3]
 319:../Generated_Code/TU1.c ****   return ERR_OK;                       /* OK */
 347              		.loc 1 319 0
 348 004a 0023     		mov	r3, #0
 349              	.L14:
 320:../Generated_Code/TU1.c **** }
 350              		.loc 1 320 0
 351 004c 181C     		mov	r0, r3
 352 004e BD46     		mov	sp, r7
 353 0050 04B0     		add	sp, sp, #16
 354              		@ sp needed for prologue
 355 0052 80BD     		pop	{r7, pc}
 356              	.L17:
 357              		.align	2
 358              	.L16:
 359 0054 00000000 		.word	ChannelMode
 360 0058 00800340 		.word	1073971200
 361 005c 00000000 		.word	ChannelDevice
 362              		.cfi_endproc
 363              	.LFE3:
 365              		.section	.text.TU1_Interrupt,"ax",%progbits
 366              		.align	2
 367              		.global	TU1_Interrupt
 368              		.code	16
 369              		.thumb_func
 371              	TU1_Interrupt:
 372              	.LFB4:
 321:../Generated_Code/TU1.c **** 
 322:../Generated_Code/TU1.c **** /*
 323:../Generated_Code/TU1.c **** ** ===================================================================
 324:../Generated_Code/TU1.c **** **     Method      :  TU1_Interrupt (component TimerUnit_LDD)
 325:../Generated_Code/TU1.c **** **
 326:../Generated_Code/TU1.c **** **     Description :
 327:../Generated_Code/TU1.c **** **         The method services the interrupt of the selected peripheral(s)
 328:../Generated_Code/TU1.c **** **         and eventually invokes event(s) of the component.
 329:../Generated_Code/TU1.c **** **         This method is internal. It is used by Processor Expert only.
 330:../Generated_Code/TU1.c **** ** ===================================================================
 331:../Generated_Code/TU1.c **** */
 332:../Generated_Code/TU1.c **** PE_ISR(TU1_Interrupt)
 333:../Generated_Code/TU1.c **** {
 373              		.loc 1 333 0
 374              		.cfi_startproc
 375 0000 80B5     		push	{r7, lr}
 376              	.LCFI12:
 377              		.cfi_def_cfa_offset 8
 378              		.cfi_offset 7, -8
 379              		.cfi_offset 14, -4
 380 0002 82B0     		sub	sp, sp, #8
 381              	.LCFI13:
 382              		.cfi_def_cfa_offset 16
 383 0004 00AF     		add	r7, sp, #0
 384              	.LCFI14:
 385              		.cfi_def_cfa_register 7
 334:../Generated_Code/TU1.c ****   /* {Default RTOS Adapter} ISR parameter is passed through the global variable */
 335:../Generated_Code/TU1.c ****   TU1_TDeviceDataPtr DeviceDataPrv = INT_TPM0__DEFAULT_RTOS_ISRPARAM;
 386              		.loc 1 335 0
 387 0006 274B     		ldr	r3, .L23
 388 0008 1B68     		ldr	r3, [r3]
 389 000a 3B60     		str	r3, [r7]
 336:../Generated_Code/TU1.c **** 
 337:../Generated_Code/TU1.c ****   LDD_TEventMask State = 0U;
 390              		.loc 1 337 0
 391 000c 0023     		mov	r3, #0
 392 000e 7B60     		str	r3, [r7, #4]
 338:../Generated_Code/TU1.c **** 
 339:../Generated_Code/TU1.c ****   if ((TPM_PDD_GetOverflowInterruptFlag(TPM0_BASE_PTR)) != 0U) { /* Is the overflow interrupt flag 
 393              		.loc 1 339 0
 394 0010 254B     		ldr	r3, .L23+4
 395 0012 1A68     		ldr	r2, [r3]
 396 0014 8023     		mov	r3, #128
 397 0016 1340     		and	r3, r2
 398 0018 04D0     		beq	.L19
 340:../Generated_Code/TU1.c ****     State |= LDD_TIMERUNIT_ON_COUNTER_RESTART; /* and set mask */
 399              		.loc 1 340 0
 400 001a 7B68     		ldr	r3, [r7, #4]
 401 001c 8022     		mov	r2, #128
 402 001e 5200     		lsl	r2, r2, #1
 403 0020 1343     		orr	r3, r2
 404 0022 7B60     		str	r3, [r7, #4]
 405              	.L19:
 341:../Generated_Code/TU1.c ****   }
 342:../Generated_Code/TU1.c ****   if ((TPM_PDD_GetChannelInterruptFlag(TPM0_BASE_PTR, ChannelDevice[0])) != 0U) { /* Is the channel
 406              		.loc 1 342 0
 407 0024 204A     		ldr	r2, .L23+4
 408 0026 214B     		ldr	r3, .L23+8
 409 0028 1B78     		ldrb	r3, [r3]
 410 002a 0133     		add	r3, r3, #1
 411 002c DB00     		lsl	r3, r3, #3
 412 002e D318     		add	r3, r2, r3
 413 0030 5A68     		ldr	r2, [r3, #4]
 414 0032 8023     		mov	r3, #128
 415 0034 1340     		and	r3, r2
 416 0036 03D0     		beq	.L20
 343:../Generated_Code/TU1.c ****     State |= LDD_TIMERUNIT_ON_CHANNEL_0; /* and set mask */
 417              		.loc 1 343 0
 418 0038 7B68     		ldr	r3, [r7, #4]
 419 003a 0122     		mov	r2, #1
 420 003c 1343     		orr	r3, r2
 421 003e 7B60     		str	r3, [r7, #4]
 422              	.L20:
 344:../Generated_Code/TU1.c ****   }
 345:../Generated_Code/TU1.c ****   State &= DeviceDataPrv->EnEvents;    /* Handle only enabled interrupts */
 423              		.loc 1 345 0
 424 0040 3B68     		ldr	r3, [r7]
 425 0042 1A68     		ldr	r2, [r3]
 426 0044 7B68     		ldr	r3, [r7, #4]
 427 0046 1340     		and	r3, r2
 428 0048 7B60     		str	r3, [r7, #4]
 346:../Generated_Code/TU1.c ****   if (State & LDD_TIMERUNIT_ON_COUNTER_RESTART) { /* Is the overflow interrupt flag pending? */
 429              		.loc 1 346 0
 430 004a 7A68     		ldr	r2, [r7, #4]
 431 004c 8023     		mov	r3, #128
 432 004e 5B00     		lsl	r3, r3, #1
 433 0050 1340     		and	r3, r2
 434 0052 0AD0     		beq	.L21
 347:../Generated_Code/TU1.c ****     TPM_PDD_ClearOverflowInterruptFlag(TPM0_BASE_PTR); /* Clear flag */
 435              		.loc 1 347 0
 436 0054 144B     		ldr	r3, .L23+4
 437 0056 144A     		ldr	r2, .L23+4
 438 0058 1268     		ldr	r2, [r2]
 439 005a 8021     		mov	r1, #128
 440 005c 0A43     		orr	r2, r1
 441 005e 1A60     		str	r2, [r3]
 348:../Generated_Code/TU1.c ****     TU1_OnCounterRestart(DeviceDataPrv->UserDataPtr); /* Invoke OnCounterRestart event */
 442              		.loc 1 348 0
 443 0060 3B68     		ldr	r3, [r7]
 444 0062 5B68     		ldr	r3, [r3, #4]
 445 0064 181C     		mov	r0, r3
 446 0066 FFF7FEFF 		bl	TU1_OnCounterRestart
 447              	.L21:
 349:../Generated_Code/TU1.c ****   }
 350:../Generated_Code/TU1.c ****   if (State & LDD_TIMERUNIT_ON_CHANNEL_0) { /* Is the channel 0 interrupt flag pending? */
 448              		.loc 1 350 0
 449 006a 7A68     		ldr	r2, [r7, #4]
 450 006c 0123     		mov	r3, #1
 451 006e 1340     		and	r3, r2
 452 0070 15D0     		beq	.L18
 351:../Generated_Code/TU1.c ****     TPM_PDD_ClearChannelInterruptFlag(TPM0_BASE_PTR, ChannelDevice[0]); /* Clear flag */
 453              		.loc 1 351 0
 454 0072 0D49     		ldr	r1, .L23+4
 455 0074 0D4B     		ldr	r3, .L23+8
 456 0076 1B78     		ldrb	r3, [r3]
 457 0078 181C     		mov	r0, r3
 458 007a 0B4A     		ldr	r2, .L23+4
 459 007c 0B4B     		ldr	r3, .L23+8
 460 007e 1B78     		ldrb	r3, [r3]
 461 0080 0133     		add	r3, r3, #1
 462 0082 DB00     		lsl	r3, r3, #3
 463 0084 D318     		add	r3, r2, r3
 464 0086 5B68     		ldr	r3, [r3, #4]
 465 0088 8022     		mov	r2, #128
 466 008a 1A43     		orr	r2, r3
 467 008c 431C     		add	r3, r0, #1
 468 008e DB00     		lsl	r3, r3, #3
 469 0090 CB18     		add	r3, r1, r3
 470 0092 5A60     		str	r2, [r3, #4]
 352:../Generated_Code/TU1.c ****     TU1_OnChannel0(DeviceDataPrv->UserDataPtr); /* Invoke OnChannel0 event */
 471              		.loc 1 352 0
 472 0094 3B68     		ldr	r3, [r7]
 473 0096 5B68     		ldr	r3, [r3, #4]
 474 0098 181C     		mov	r0, r3
 475 009a FFF7FEFF 		bl	TU1_OnChannel0
 476              	.L18:
 353:../Generated_Code/TU1.c ****   }
 354:../Generated_Code/TU1.c **** }
 477              		.loc 1 354 0
 478 009e BD46     		mov	sp, r7
 479 00a0 02B0     		add	sp, sp, #8
 480              		@ sp needed for prologue
 481 00a2 80BD     		pop	{r7, pc}
 482              	.L24:
 483              		.align	2
 484              	.L23:
 485 00a4 00000000 		.word	INT_TPM0__DEFAULT_RTOS_ISRPARAM
 486 00a8 00800340 		.word	1073971200
 487 00ac 00000000 		.word	ChannelDevice
 488              		.cfi_endproc
 489              	.LFE4:
 491              		.text
 492              	.Letext0:
 493              		.file 2 "C:/Freescale/CW MCU v10.7/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 494              		.file 3 "D:/15_MyFactory/PREN/Microcontroller/FRDM KL25Z/Freedom_HC-SR04/Generated_Code/PE_Types.h
 495              		.file 4 "C:/Freescale/CW MCU v10.7/MCU/ProcessorExpert/lib/Kinetis/iofiles/MKL25Z4.h"
 496              		.file 5 "D:/15_MyFactory/PREN/Microcontroller/FRDM KL25Z/Freedom_HC-SR04/Generated_Code/TU1.h"
DEFINED SYMBOLS
                            *ABS*:00000000 TU1.c
C:\Users\burak\AppData\Local\Temp\cci3Oozf.s:18     .rodata.ChannelDevice:00000000 $d
C:\Users\burak\AppData\Local\Temp\cci3Oozf.s:21     .rodata.ChannelDevice:00000000 ChannelDevice
C:\Users\burak\AppData\Local\Temp\cci3Oozf.s:24     .rodata.ChannelMode:00000000 $d
C:\Users\burak\AppData\Local\Temp\cci3Oozf.s:27     .rodata.ChannelMode:00000000 ChannelMode
C:\Users\burak\AppData\Local\Temp\cci3Oozf.s:30     .bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC:00000000 $d
C:\Users\burak\AppData\Local\Temp\cci3Oozf.s:33     .bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC:00000000 DeviceDataPrv__DEFAULT_RTOS_ALLOC
C:\Users\burak\AppData\Local\Temp\cci3Oozf.s:36     .bss.INT_TPM0__DEFAULT_RTOS_ISRPARAM:00000000 $d
C:\Users\burak\AppData\Local\Temp\cci3Oozf.s:39     .bss.INT_TPM0__DEFAULT_RTOS_ISRPARAM:00000000 INT_TPM0__DEFAULT_RTOS_ISRPARAM
C:\Users\burak\AppData\Local\Temp\cci3Oozf.s:42     .text.TU1_Init:00000000 $t
C:\Users\burak\AppData\Local\Temp\cci3Oozf.s:47     .text.TU1_Init:00000000 TU1_Init
C:\Users\burak\AppData\Local\Temp\cci3Oozf.s:180    .text.TU1_Init:000000bc $d
C:\Users\burak\AppData\Local\Temp\cci3Oozf.s:196    .text.TU1_Deinit:00000000 $t
C:\Users\burak\AppData\Local\Temp\cci3Oozf.s:201    .text.TU1_Deinit:00000000 TU1_Deinit
C:\Users\burak\AppData\Local\Temp\cci3Oozf.s:239    .text.TU1_Deinit:00000024 $d
C:\Users\burak\AppData\Local\Temp\cci3Oozf.s:245    .text.TU1_ResetCounter:00000000 $t
C:\Users\burak\AppData\Local\Temp\cci3Oozf.s:250    .text.TU1_ResetCounter:00000000 TU1_ResetCounter
C:\Users\burak\AppData\Local\Temp\cci3Oozf.s:281    .text.TU1_ResetCounter:00000018 $d
C:\Users\burak\AppData\Local\Temp\cci3Oozf.s:286    .text.TU1_GetCaptureValue:00000000 $t
C:\Users\burak\AppData\Local\Temp\cci3Oozf.s:291    .text.TU1_GetCaptureValue:00000000 TU1_GetCaptureValue
C:\Users\burak\AppData\Local\Temp\cci3Oozf.s:359    .text.TU1_GetCaptureValue:00000054 $d
C:\Users\burak\AppData\Local\Temp\cci3Oozf.s:366    .text.TU1_Interrupt:00000000 $t
C:\Users\burak\AppData\Local\Temp\cci3Oozf.s:371    .text.TU1_Interrupt:00000000 TU1_Interrupt
C:\Users\burak\AppData\Local\Temp\cci3Oozf.s:485    .text.TU1_Interrupt:000000a4 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
PE_LDD_DeviceDataList
TU1_OnCounterRestart
TU1_OnChannel0
