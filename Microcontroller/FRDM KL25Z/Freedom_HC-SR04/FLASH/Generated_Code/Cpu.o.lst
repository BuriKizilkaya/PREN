   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"Cpu.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	SR_reg,1,1
  18              		.global	SR_lock
  19              		.section	.bss.SR_lock,"aw",%nobits
  22              	SR_lock:
  23 0000 00       		.space	1
  24              		.section	.text.Cpu_INT_NMIInterrupt,"ax",%progbits
  25              		.align	2
  26              		.global	Cpu_INT_NMIInterrupt
  27              		.code	16
  28              		.thumb_func
  30              	Cpu_INT_NMIInterrupt:
  31              	.LFB0:
  32              		.file 1 "../Generated_Code/Cpu.c"
   1:../Generated_Code/Cpu.c **** /* ###################################################################
   2:../Generated_Code/Cpu.c **** **     This component module is generated by Processor Expert. Do not modify it.
   3:../Generated_Code/Cpu.c **** **     Filename    : Cpu.c
   4:../Generated_Code/Cpu.c **** **     Project     : ProcessorExpert
   5:../Generated_Code/Cpu.c **** **     Processor   : MKL25Z128VLK4
   6:../Generated_Code/Cpu.c **** **     Component   : MKL25Z128LK4
   7:../Generated_Code/Cpu.c **** **     Version     : Component 01.025, Driver 01.04, CPU db: 3.00.000
   8:../Generated_Code/Cpu.c **** **     Datasheet   : KL25P80M48SF0RM, Rev.3, Sep 2012
   9:../Generated_Code/Cpu.c **** **     Compiler    : GNU C Compiler
  10:../Generated_Code/Cpu.c **** **     Date/Time   : 2017-12-17, 19:56, # CodeGen: 44
  11:../Generated_Code/Cpu.c **** **     Abstract    :
  12:../Generated_Code/Cpu.c **** **
  13:../Generated_Code/Cpu.c **** **     Settings    :
  14:../Generated_Code/Cpu.c **** **
  15:../Generated_Code/Cpu.c **** **     Contents    :
  16:../Generated_Code/Cpu.c **** **         No public methods
  17:../Generated_Code/Cpu.c **** **
  18:../Generated_Code/Cpu.c **** **     Copyright : 1997 - 2014 Freescale Semiconductor, Inc. 
  19:../Generated_Code/Cpu.c **** **     All Rights Reserved.
  20:../Generated_Code/Cpu.c **** **     
  21:../Generated_Code/Cpu.c **** **     Redistribution and use in source and binary forms, with or without modification,
  22:../Generated_Code/Cpu.c **** **     are permitted provided that the following conditions are met:
  23:../Generated_Code/Cpu.c **** **     
  24:../Generated_Code/Cpu.c **** **     o Redistributions of source code must retain the above copyright notice, this list
  25:../Generated_Code/Cpu.c **** **       of conditions and the following disclaimer.
  26:../Generated_Code/Cpu.c **** **     
  27:../Generated_Code/Cpu.c **** **     o Redistributions in binary form must reproduce the above copyright notice, this
  28:../Generated_Code/Cpu.c **** **       list of conditions and the following disclaimer in the documentation and/or
  29:../Generated_Code/Cpu.c **** **       other materials provided with the distribution.
  30:../Generated_Code/Cpu.c **** **     
  31:../Generated_Code/Cpu.c **** **     o Neither the name of Freescale Semiconductor, Inc. nor the names of its
  32:../Generated_Code/Cpu.c **** **       contributors may be used to endorse or promote products derived from this
  33:../Generated_Code/Cpu.c **** **       software without specific prior written permission.
  34:../Generated_Code/Cpu.c **** **     
  35:../Generated_Code/Cpu.c **** **     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  36:../Generated_Code/Cpu.c **** **     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  37:../Generated_Code/Cpu.c **** **     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  38:../Generated_Code/Cpu.c **** **     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  39:../Generated_Code/Cpu.c **** **     ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  40:../Generated_Code/Cpu.c **** **     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  41:../Generated_Code/Cpu.c **** **     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  42:../Generated_Code/Cpu.c **** **     ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  43:../Generated_Code/Cpu.c **** **     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  44:../Generated_Code/Cpu.c **** **     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  45:../Generated_Code/Cpu.c **** **     
  46:../Generated_Code/Cpu.c **** **     http: www.freescale.com
  47:../Generated_Code/Cpu.c **** **     mail: support@freescale.com
  48:../Generated_Code/Cpu.c **** ** ###################################################################*/
  49:../Generated_Code/Cpu.c **** /*!
  50:../Generated_Code/Cpu.c **** ** @file Cpu.c
  51:../Generated_Code/Cpu.c **** ** @version 01.04
  52:../Generated_Code/Cpu.c **** ** @brief
  53:../Generated_Code/Cpu.c **** **
  54:../Generated_Code/Cpu.c **** */         
  55:../Generated_Code/Cpu.c **** /*!
  56:../Generated_Code/Cpu.c **** **  @addtogroup Cpu_module Cpu module documentation
  57:../Generated_Code/Cpu.c **** **  @{
  58:../Generated_Code/Cpu.c **** */         
  59:../Generated_Code/Cpu.c **** 
  60:../Generated_Code/Cpu.c **** /* MODULE Cpu. */
  61:../Generated_Code/Cpu.c **** 
  62:../Generated_Code/Cpu.c **** /* {Default RTOS Adapter} No RTOS includes */
  63:../Generated_Code/Cpu.c **** #include "TRIG.h"
  64:../Generated_Code/Cpu.c **** #include "WAIT1.h"
  65:../Generated_Code/Cpu.c **** #include "TU1.h"
  66:../Generated_Code/Cpu.c **** #include "UTIL1.h"
  67:../Generated_Code/Cpu.c **** #include "LEDR.h"
  68:../Generated_Code/Cpu.c **** #include "LEDpin1.h"
  69:../Generated_Code/Cpu.c **** #include "BitIoLdd1.h"
  70:../Generated_Code/Cpu.c **** #include "LEDG.h"
  71:../Generated_Code/Cpu.c **** #include "LEDpin2.h"
  72:../Generated_Code/Cpu.c **** #include "BitIoLdd2.h"
  73:../Generated_Code/Cpu.c **** #include "LEDB.h"
  74:../Generated_Code/Cpu.c **** #include "LEDpin3.h"
  75:../Generated_Code/Cpu.c **** #include "BitIoLdd3.h"
  76:../Generated_Code/Cpu.c **** #include "LCD1.h"
  77:../Generated_Code/Cpu.c **** #include "RW1.h"
  78:../Generated_Code/Cpu.c **** #include "BitIoLdd15.h"
  79:../Generated_Code/Cpu.c **** #include "EN1.h"
  80:../Generated_Code/Cpu.c **** #include "BitIoLdd4.h"
  81:../Generated_Code/Cpu.c **** #include "RS1.h"
  82:../Generated_Code/Cpu.c **** #include "BitIoLdd5.h"
  83:../Generated_Code/Cpu.c **** #include "DB41.h"
  84:../Generated_Code/Cpu.c **** #include "BitIoLdd10.h"
  85:../Generated_Code/Cpu.c **** #include "DB51.h"
  86:../Generated_Code/Cpu.c **** #include "BitIoLdd11.h"
  87:../Generated_Code/Cpu.c **** #include "DB61.h"
  88:../Generated_Code/Cpu.c **** #include "BitIoLdd12.h"
  89:../Generated_Code/Cpu.c **** #include "DB71.h"
  90:../Generated_Code/Cpu.c **** #include "BitIoLdd13.h"
  91:../Generated_Code/Cpu.c **** #include "MCUC1.h"
  92:../Generated_Code/Cpu.c **** #include "PE_Types.h"
  93:../Generated_Code/Cpu.c **** #include "PE_Error.h"
  94:../Generated_Code/Cpu.c **** #include "PE_Const.h"
  95:../Generated_Code/Cpu.c **** #include "IO_Map.h"
  96:../Generated_Code/Cpu.c **** #include "Events.h"
  97:../Generated_Code/Cpu.c **** #include "Cpu.h"
  98:../Generated_Code/Cpu.c **** 
  99:../Generated_Code/Cpu.c **** #ifdef __cplusplus
 100:../Generated_Code/Cpu.c **** extern "C" {
 101:../Generated_Code/Cpu.c **** #endif
 102:../Generated_Code/Cpu.c **** 
 103:../Generated_Code/Cpu.c **** /* Global variables */
 104:../Generated_Code/Cpu.c **** volatile uint8_t SR_reg;               /* Current value of the FAULTMASK register */
 105:../Generated_Code/Cpu.c **** volatile uint8_t SR_lock = 0x00U;      /* Lock */
 106:../Generated_Code/Cpu.c **** 
 107:../Generated_Code/Cpu.c **** 
 108:../Generated_Code/Cpu.c **** /*
 109:../Generated_Code/Cpu.c **** ** ===================================================================
 110:../Generated_Code/Cpu.c **** **     Method      :  Cpu_INT_NMIInterrupt (component MKL25Z128LK4)
 111:../Generated_Code/Cpu.c **** **
 112:../Generated_Code/Cpu.c **** **     Description :
 113:../Generated_Code/Cpu.c **** **         This ISR services the Non Maskable Interrupt interrupt.
 114:../Generated_Code/Cpu.c **** **         This method is internal. It is used by Processor Expert only.
 115:../Generated_Code/Cpu.c **** ** ===================================================================
 116:../Generated_Code/Cpu.c **** */
 117:../Generated_Code/Cpu.c **** PE_ISR(Cpu_INT_NMIInterrupt)
 118:../Generated_Code/Cpu.c **** {
  33              		.loc 1 118 0
  34              		.cfi_startproc
  35 0000 80B5     		push	{r7, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 8
  38              		.cfi_offset 7, -8
  39              		.cfi_offset 14, -4
  40 0002 00AF     		add	r7, sp, #0
  41              	.LCFI1:
  42              		.cfi_def_cfa_register 7
 119:../Generated_Code/Cpu.c ****   Cpu_OnNMIINT();
  43              		.loc 1 119 0
  44 0004 FFF7FEFF 		bl	Cpu_OnNMIINT
 120:../Generated_Code/Cpu.c **** }
  45              		.loc 1 120 0
  46 0008 BD46     		mov	sp, r7
  47              		@ sp needed for prologue
  48 000a 80BD     		pop	{r7, pc}
  49              		.cfi_endproc
  50              	.LFE0:
  52              		.section	.text.Cpu_Interrupt,"ax",%progbits
  53              		.align	2
  54              		.global	Cpu_Interrupt
  55              		.code	16
  56              		.thumb_func
  58              	Cpu_Interrupt:
  59              	.LFB1:
 121:../Generated_Code/Cpu.c **** 
 122:../Generated_Code/Cpu.c **** /*
 123:../Generated_Code/Cpu.c **** ** ===================================================================
 124:../Generated_Code/Cpu.c **** **     Method      :  Cpu_Cpu_Interrupt (component MKL25Z128LK4)
 125:../Generated_Code/Cpu.c **** **
 126:../Generated_Code/Cpu.c **** **     Description :
 127:../Generated_Code/Cpu.c **** **         This ISR services an unused interrupt/exception vector.
 128:../Generated_Code/Cpu.c **** **         This method is internal. It is used by Processor Expert only.
 129:../Generated_Code/Cpu.c **** ** ===================================================================
 130:../Generated_Code/Cpu.c **** */
 131:../Generated_Code/Cpu.c **** PE_ISR(Cpu_Interrupt)
 132:../Generated_Code/Cpu.c **** {
  60              		.loc 1 132 0
  61              		.cfi_startproc
  62 0000 80B5     		push	{r7, lr}
  63              	.LCFI2:
  64              		.cfi_def_cfa_offset 8
  65              		.cfi_offset 7, -8
  66              		.cfi_offset 14, -4
  67 0002 00AF     		add	r7, sp, #0
  68              	.LCFI3:
  69              		.cfi_def_cfa_register 7
 133:../Generated_Code/Cpu.c ****   /* This code can be changed using the CPU component property "Build Options / Unhandled int code"
 134:../Generated_Code/Cpu.c ****   PE_DEBUGHALT();
  70              		.loc 1 134 0
  71              	@ 134 "../Generated_Code/Cpu.c" 1
  72 0004 FFBE     		BKPT 255
  73              	@ 0 "" 2
 135:../Generated_Code/Cpu.c **** }
  74              		.loc 1 135 0
  75              		.code	16
  76 0006 BD46     		mov	sp, r7
  77              		@ sp needed for prologue
  78 0008 80BD     		pop	{r7, pc}
  79              		.cfi_endproc
  80              	.LFE1:
  82 000a C046     		.section	.text.__init_hardware,"ax",%progbits
  83              		.align	2
  84              		.global	__init_hardware
  85              		.code	16
  86              		.thumb_func
  88              	__init_hardware:
  89              	.LFB2:
 136:../Generated_Code/Cpu.c **** 
 137:../Generated_Code/Cpu.c **** 
 138:../Generated_Code/Cpu.c **** /*** !!! Here you can place your own code using property "User data declarations" on the build opti
 139:../Generated_Code/Cpu.c **** 
 140:../Generated_Code/Cpu.c **** /*lint -esym(765,__init_hardware) Disable MISRA rule (8.10) checking for symbols (__init_hardware).
 141:../Generated_Code/Cpu.c **** /*lint -esym(765,Cpu_Interrupt) Disable MISRA rule (8.10) checking for symbols (Cpu_Interrupt). */
 142:../Generated_Code/Cpu.c **** void __init_hardware(void)
 143:../Generated_Code/Cpu.c **** {
  90              		.loc 1 143 0
  91              		.cfi_startproc
  92 0000 80B5     		push	{r7, lr}
  93              	.LCFI4:
  94              		.cfi_def_cfa_offset 8
  95              		.cfi_offset 7, -8
  96              		.cfi_offset 14, -4
  97 0002 00AF     		add	r7, sp, #0
  98              	.LCFI5:
  99              		.cfi_def_cfa_register 7
 144:../Generated_Code/Cpu.c **** 
 145:../Generated_Code/Cpu.c ****   /*** !!! Here you can place your own code before PE initialization using property "User code befo
 146:../Generated_Code/Cpu.c **** 
 147:../Generated_Code/Cpu.c ****   /*** ### MKL25Z128VLK4 "Cpu" init code ... ***/
 148:../Generated_Code/Cpu.c ****   /*** PE initialization code after reset ***/
 149:../Generated_Code/Cpu.c ****   SCB_VTOR = (uint32_t)(&__vect_table); /* Set the interrupt vector table position */
 100              		.loc 1 149 0
 101 0004 364A     		ldr	r2, .L7
 102 0006 3749     		ldr	r1, .L7+4
 103 0008 374B     		ldr	r3, .L7+8
 104 000a D150     		str	r1, [r2, r3]
 150:../Generated_Code/Cpu.c ****   /* Disable the WDOG module */
 151:../Generated_Code/Cpu.c ****   /* SIM_COPC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0
 152:../Generated_Code/Cpu.c ****   SIM_COPC = SIM_COPC_COPT(0x00);
 105              		.loc 1 152 0
 106 000c 374A     		ldr	r2, .L7+12
 107 000e 8823     		mov	r3, #136
 108 0010 5B01     		lsl	r3, r3, #5
 109 0012 0021     		mov	r1, #0
 110 0014 D150     		str	r1, [r2, r3]
 153:../Generated_Code/Cpu.c **** 
 154:../Generated_Code/Cpu.c ****   /* System clock initialization */
 155:../Generated_Code/Cpu.c ****   /* SIM_CLKDIV1: OUTDIV1=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,OUTDIV4=3,??=0,??=0,??=0,?
 156:../Generated_Code/Cpu.c ****   SIM_CLKDIV1 = (SIM_CLKDIV1_OUTDIV1(0x00) | SIM_CLKDIV1_OUTDIV4(0x03)); /* Set the system prescale
 111              		.loc 1 156 0
 112 0016 354A     		ldr	r2, .L7+12
 113 0018 354B     		ldr	r3, .L7+16
 114 001a C021     		mov	r1, #192
 115 001c 8902     		lsl	r1, r1, #10
 116 001e D150     		str	r1, [r2, r3]
 157:../Generated_Code/Cpu.c ****   /* SIM_SCGC5: PORTD=1,PORTC=1,PORTB=1,PORTA=1 */
 158:../Generated_Code/Cpu.c ****   SIM_SCGC5 |= SIM_SCGC5_PORTD_MASK |
 117              		.loc 1 158 0
 118 0020 324A     		ldr	r2, .L7+12
 119 0022 3249     		ldr	r1, .L7+12
 120 0024 334B     		ldr	r3, .L7+20
 121 0026 CB58     		ldr	r3, [r1, r3]
 122 0028 F021     		mov	r1, #240
 123 002a 4901     		lsl	r1, r1, #5
 124 002c 1943     		orr	r1, r3
 125 002e 314B     		ldr	r3, .L7+20
 126 0030 D150     		str	r1, [r2, r3]
 159:../Generated_Code/Cpu.c ****                SIM_SCGC5_PORTC_MASK |
 160:../Generated_Code/Cpu.c ****                SIM_SCGC5_PORTB_MASK |
 161:../Generated_Code/Cpu.c ****                SIM_SCGC5_PORTA_MASK;   /* Enable clock gate for ports to enable pin routing */
 162:../Generated_Code/Cpu.c ****   if ((PMC_REGSC & PMC_REGSC_ACKISO_MASK) != 0x0U) {
 127              		.loc 1 162 0
 128 0032 314B     		ldr	r3, .L7+24
 129 0034 9B78     		ldrb	r3, [r3, #2]
 130 0036 DBB2     		uxtb	r3, r3
 131 0038 1A1C     		mov	r2, r3
 132 003a 0823     		mov	r3, #8
 133 003c 1340     		and	r3, r2
 134 003e 07D0     		beq	.L4
 163:../Generated_Code/Cpu.c ****     /* PMC_REGSC: ACKISO=1 */
 164:../Generated_Code/Cpu.c ****     PMC_REGSC |= PMC_REGSC_ACKISO_MASK; /* Release IO pads after wakeup from VLLS mode. */
 135              		.loc 1 164 0
 136 0040 2D4B     		ldr	r3, .L7+24
 137 0042 2D4A     		ldr	r2, .L7+24
 138 0044 9278     		ldrb	r2, [r2, #2]
 139 0046 D2B2     		uxtb	r2, r2
 140 0048 0821     		mov	r1, #8
 141 004a 0A43     		orr	r2, r1
 142 004c D2B2     		uxtb	r2, r2
 143 004e 9A70     		strb	r2, [r3, #2]
 144              	.L4:
 165:../Generated_Code/Cpu.c ****   }
 166:../Generated_Code/Cpu.c ****   /* SIM_CLKDIV1: OUTDIV1=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,OUTDIV4=0,??=0,??=0,??=0,?
 167:../Generated_Code/Cpu.c ****   SIM_CLKDIV1 = (SIM_CLKDIV1_OUTDIV1(0x00) | SIM_CLKDIV1_OUTDIV4(0x00)); /* Update system prescaler
 145              		.loc 1 167 0
 146 0050 264A     		ldr	r2, .L7+12
 147 0052 274B     		ldr	r3, .L7+16
 148 0054 0021     		mov	r1, #0
 149 0056 D150     		str	r1, [r2, r3]
 168:../Generated_Code/Cpu.c ****   /* SIM_SOPT2: PLLFLLSEL=0 */
 169:../Generated_Code/Cpu.c ****   SIM_SOPT2 &= (uint32_t)~(uint32_t)(SIM_SOPT2_PLLFLLSEL_MASK); /* Select FLL as a clock source for
 150              		.loc 1 169 0
 151 0058 244A     		ldr	r2, .L7+12
 152 005a 2449     		ldr	r1, .L7+12
 153 005c 274B     		ldr	r3, .L7+28
 154 005e C958     		ldr	r1, [r1, r3]
 155 0060 274B     		ldr	r3, .L7+32
 156 0062 1940     		and	r1, r3
 157 0064 254B     		ldr	r3, .L7+28
 158 0066 D150     		str	r1, [r2, r3]
 170:../Generated_Code/Cpu.c ****   /* SIM_SOPT1: OSC32KSEL=3 */
 171:../Generated_Code/Cpu.c ****   SIM_SOPT1 |= SIM_SOPT1_OSC32KSEL(0x03); /* LPO 1kHz oscillator drives 32 kHz clock for various pe
 159              		.loc 1 171 0
 160 0068 204B     		ldr	r3, .L7+12
 161 006a 204A     		ldr	r2, .L7+12
 162 006c 1268     		ldr	r2, [r2]
 163 006e C021     		mov	r1, #192
 164 0070 0903     		lsl	r1, r1, #12
 165 0072 0A43     		orr	r2, r1
 166 0074 1A60     		str	r2, [r3]
 172:../Generated_Code/Cpu.c ****   /* SIM_SOPT2: TPMSRC=1 */
 173:../Generated_Code/Cpu.c ****   SIM_SOPT2 = (uint32_t)((SIM_SOPT2 & (uint32_t)~(uint32_t)(
 167              		.loc 1 173 0
 168 0076 1D4A     		ldr	r2, .L7+12
 169 0078 1C49     		ldr	r1, .L7+12
 170 007a 204B     		ldr	r3, .L7+28
 171 007c C958     		ldr	r1, [r1, r3]
 172 007e 214B     		ldr	r3, .L7+36
 173 0080 0B40     		and	r3, r1
 174 0082 8021     		mov	r1, #128
 175 0084 4904     		lsl	r1, r1, #17
 176 0086 1943     		orr	r1, r3
 177 0088 1C4B     		ldr	r3, .L7+28
 178 008a D150     		str	r1, [r2, r3]
 174:../Generated_Code/Cpu.c ****                SIM_SOPT2_TPMSRC(0x02)
 175:../Generated_Code/Cpu.c ****               )) | (uint32_t)(
 176:../Generated_Code/Cpu.c ****                SIM_SOPT2_TPMSRC(0x01)
 177:../Generated_Code/Cpu.c ****               ));                      /* Set the TPM clock */
 178:../Generated_Code/Cpu.c ****   /* Switch to FEI Mode */
 179:../Generated_Code/Cpu.c ****   /* MCG_C1: CLKS=0,FRDIV=0,IREFS=1,IRCLKEN=1,IREFSTEN=0 */
 180:../Generated_Code/Cpu.c ****   MCG_C1 = MCG_C1_CLKS(0x00) |
 179              		.loc 1 180 0
 180 008c 1E4B     		ldr	r3, .L7+40
 181 008e 0622     		mov	r2, #6
 182 0090 1A70     		strb	r2, [r3]
 181:../Generated_Code/Cpu.c ****            MCG_C1_FRDIV(0x00) |
 182:../Generated_Code/Cpu.c ****            MCG_C1_IREFS_MASK |
 183:../Generated_Code/Cpu.c ****            MCG_C1_IRCLKEN_MASK;
 184:../Generated_Code/Cpu.c ****   /* MCG_C2: LOCRE0=0,??=0,RANGE0=0,HGO0=0,EREFS0=0,LP=0,IRCS=0 */
 185:../Generated_Code/Cpu.c ****   MCG_C2 = MCG_C2_RANGE0(0x00);
 183              		.loc 1 185 0
 184 0092 1D4B     		ldr	r3, .L7+40
 185 0094 0022     		mov	r2, #0
 186 0096 5A70     		strb	r2, [r3, #1]
 186:../Generated_Code/Cpu.c ****   /* MCG_C4: DMX32=0,DRST_DRS=0 */
 187:../Generated_Code/Cpu.c ****   MCG_C4 &= (uint8_t)~(uint8_t)((MCG_C4_DMX32_MASK | MCG_C4_DRST_DRS(0x03)));
 187              		.loc 1 187 0
 188 0098 1B4B     		ldr	r3, .L7+40
 189 009a 1B4A     		ldr	r2, .L7+40
 190 009c D278     		ldrb	r2, [r2, #3]
 191 009e D1B2     		uxtb	r1, r2
 192 00a0 1F22     		mov	r2, #31
 193 00a2 0A40     		and	r2, r1
 194 00a4 D2B2     		uxtb	r2, r2
 195 00a6 DA70     		strb	r2, [r3, #3]
 188:../Generated_Code/Cpu.c ****   /* OSC0_CR: ERCLKEN=1,??=0,EREFSTEN=0,??=0,SC2P=0,SC4P=0,SC8P=0,SC16P=0 */
 189:../Generated_Code/Cpu.c ****   OSC0_CR = OSC_CR_ERCLKEN_MASK;
 196              		.loc 1 189 0
 197 00a8 184B     		ldr	r3, .L7+44
 198 00aa 8022     		mov	r2, #128
 199 00ac 1A70     		strb	r2, [r3]
 190:../Generated_Code/Cpu.c ****   /* MCG_C5: ??=0,PLLCLKEN0=0,PLLSTEN0=0,PRDIV0=0 */
 191:../Generated_Code/Cpu.c ****   MCG_C5 = MCG_C5_PRDIV0(0x00);
 200              		.loc 1 191 0
 201 00ae 164B     		ldr	r3, .L7+40
 202 00b0 0022     		mov	r2, #0
 203 00b2 1A71     		strb	r2, [r3, #4]
 192:../Generated_Code/Cpu.c ****   /* MCG_C6: LOLIE0=0,PLLS=0,CME0=0,VDIV0=0 */
 193:../Generated_Code/Cpu.c ****   MCG_C6 = MCG_C6_VDIV0(0x00);
 204              		.loc 1 193 0
 205 00b4 144B     		ldr	r3, .L7+40
 206 00b6 0022     		mov	r2, #0
 207 00b8 5A71     		strb	r2, [r3, #5]
 194:../Generated_Code/Cpu.c ****   while((MCG_S & MCG_S_IREFST_MASK) == 0x00U) { /* Check that the source of the FLL reference clock
 208              		.loc 1 194 0
 209 00ba C046     		mov	r8, r8
 210              	.L5:
 211              		.loc 1 194 0 is_stmt 0
 212 00bc 124B     		ldr	r3, .L7+40
 213 00be 9B79     		ldrb	r3, [r3, #6]
 214 00c0 DBB2     		uxtb	r3, r3
 215 00c2 1A1C     		mov	r2, r3
 216 00c4 1023     		mov	r3, #16
 217 00c6 1340     		and	r3, r2
 218 00c8 F8D0     		beq	.L5
 195:../Generated_Code/Cpu.c ****   }
 196:../Generated_Code/Cpu.c ****   while((MCG_S & 0x0CU) != 0x00U) {    /* Wait until output of the FLL is selected */
 219              		.loc 1 196 0 is_stmt 1
 220 00ca C046     		mov	r8, r8
 221              	.L6:
 222              		.loc 1 196 0 is_stmt 0
 223 00cc 0E4B     		ldr	r3, .L7+40
 224 00ce 9B79     		ldrb	r3, [r3, #6]
 225 00d0 DBB2     		uxtb	r3, r3
 226 00d2 1A1C     		mov	r2, r3
 227 00d4 0C23     		mov	r3, #12
 228 00d6 1340     		and	r3, r2
 229 00d8 F8D1     		bne	.L6
 197:../Generated_Code/Cpu.c ****   }
 198:../Generated_Code/Cpu.c ****   /*** End of PE initialization code after reset ***/
 199:../Generated_Code/Cpu.c **** 
 200:../Generated_Code/Cpu.c ****   /*** !!! Here you can place your own code after PE initialization using property "User code after
 201:../Generated_Code/Cpu.c **** 
 202:../Generated_Code/Cpu.c **** }
 230              		.loc 1 202 0 is_stmt 1
 231 00da BD46     		mov	sp, r7
 232              		@ sp needed for prologue
 233 00dc 80BD     		pop	{r7, pc}
 234              	.L8:
 235 00de C046     		.align	2
 236              	.L7:
 237 00e0 00E000E0 		.word	-536813568
 238 00e4 00000000 		.word	__vect_table
 239 00e8 080D0000 		.word	3336
 240 00ec 00700440 		.word	1074032640
 241 00f0 44100000 		.word	4164
 242 00f4 38100000 		.word	4152
 243 00f8 00D00740 		.word	1074253824
 244 00fc 04100000 		.word	4100
 245 0100 FFFFFEFF 		.word	-65537
 246 0104 FFFFFFFC 		.word	-50331649
 247 0108 00400640 		.word	1074151424
 248 010c 00500640 		.word	1074155520
 249              		.cfi_endproc
 250              	.LFE2:
 252              		.section	.text.PE_low_level_init,"ax",%progbits
 253              		.align	2
 254              		.global	PE_low_level_init
 255              		.code	16
 256              		.thumb_func
 258              	PE_low_level_init:
 259              	.LFB3:
 203:../Generated_Code/Cpu.c **** 
 204:../Generated_Code/Cpu.c **** 
 205:../Generated_Code/Cpu.c **** 
 206:../Generated_Code/Cpu.c **** /*
 207:../Generated_Code/Cpu.c **** ** ===================================================================
 208:../Generated_Code/Cpu.c **** **     Method      :  PE_low_level_init (component MKL25Z128LK4)
 209:../Generated_Code/Cpu.c **** **
 210:../Generated_Code/Cpu.c **** **     Description :
 211:../Generated_Code/Cpu.c **** **         Initializes beans and provides common register initialization. 
 212:../Generated_Code/Cpu.c **** **         The method is called automatically as a part of the 
 213:../Generated_Code/Cpu.c **** **         application initialization code.
 214:../Generated_Code/Cpu.c **** **         This method is internal. It is used by Processor Expert only.
 215:../Generated_Code/Cpu.c **** ** ===================================================================
 216:../Generated_Code/Cpu.c **** */
 217:../Generated_Code/Cpu.c **** void PE_low_level_init(void)
 218:../Generated_Code/Cpu.c **** {
 260              		.loc 1 218 0
 261              		.cfi_startproc
 262 0000 80B5     		push	{r7, lr}
 263              	.LCFI6:
 264              		.cfi_def_cfa_offset 8
 265              		.cfi_offset 7, -8
 266              		.cfi_offset 14, -4
 267 0002 00AF     		add	r7, sp, #0
 268              	.LCFI7:
 269              		.cfi_def_cfa_register 7
 219:../Generated_Code/Cpu.c ****   #ifdef PEX_RTOS_INIT
 220:../Generated_Code/Cpu.c ****     PEX_RTOS_INIT();                   /* Initialization of the selected RTOS. Macro is defined by 
 221:../Generated_Code/Cpu.c ****   #endif
 222:../Generated_Code/Cpu.c ****       /* Initialization of the SIM module */
 223:../Generated_Code/Cpu.c ****         /* Initialization of the RCM module */
 224:../Generated_Code/Cpu.c ****   /* RCM_RPFW: RSTFLTSEL=0 */
 225:../Generated_Code/Cpu.c ****   RCM_RPFW &= (uint8_t)~(uint8_t)(RCM_RPFW_RSTFLTSEL(0x1F));
 270              		.loc 1 225 0
 271 0004 394B     		ldr	r3, .L10
 272 0006 394A     		ldr	r2, .L10
 273 0008 5279     		ldrb	r2, [r2, #5]
 274 000a D2B2     		uxtb	r2, r2
 275 000c 1F21     		mov	r1, #31
 276 000e 8A43     		bic	r2, r1
 277 0010 D2B2     		uxtb	r2, r2
 278 0012 5A71     		strb	r2, [r3, #5]
 226:../Generated_Code/Cpu.c ****   /* RCM_RPFC: RSTFLTSS=0,RSTFLTSRW=0 */
 227:../Generated_Code/Cpu.c ****   RCM_RPFC &= (uint8_t)~(uint8_t)(
 279              		.loc 1 227 0
 280 0014 354B     		ldr	r3, .L10
 281 0016 354A     		ldr	r2, .L10
 282 0018 1279     		ldrb	r2, [r2, #4]
 283 001a D2B2     		uxtb	r2, r2
 284 001c 0721     		mov	r1, #7
 285 001e 8A43     		bic	r2, r1
 286 0020 D2B2     		uxtb	r2, r2
 287 0022 1A71     		strb	r2, [r3, #4]
 228:../Generated_Code/Cpu.c ****                RCM_RPFC_RSTFLTSS_MASK |
 229:../Generated_Code/Cpu.c ****                RCM_RPFC_RSTFLTSRW(0x03)
 230:../Generated_Code/Cpu.c ****               );
 231:../Generated_Code/Cpu.c ****         /* Initialization of the FTFL_FlashConfig module */
 232:../Generated_Code/Cpu.c ****       /* Initialization of the PMC module */
 233:../Generated_Code/Cpu.c ****   /* PMC_LVDSC1: LVDACK=1,LVDIE=0,LVDRE=1,LVDV=0 */
 234:../Generated_Code/Cpu.c ****   PMC_LVDSC1 = (uint8_t)((PMC_LVDSC1 & (uint8_t)~(uint8_t)(
 288              		.loc 1 234 0
 289 0024 324B     		ldr	r3, .L10+4
 290 0026 324A     		ldr	r2, .L10+4
 291 0028 1278     		ldrb	r2, [r2]
 292 002a D2B2     		uxtb	r2, r2
 293 002c D2B2     		uxtb	r2, r2
 294 002e 7321     		mov	r1, #115
 295 0030 8A43     		bic	r2, r1
 296 0032 D2B2     		uxtb	r2, r2
 297 0034 5021     		mov	r1, #80
 298 0036 0A43     		orr	r2, r1
 299 0038 D2B2     		uxtb	r2, r2
 300 003a D2B2     		uxtb	r2, r2
 301 003c 1A70     		strb	r2, [r3]
 235:../Generated_Code/Cpu.c ****                 PMC_LVDSC1_LVDIE_MASK |
 236:../Generated_Code/Cpu.c ****                 PMC_LVDSC1_LVDV(0x03)
 237:../Generated_Code/Cpu.c ****                )) | (uint8_t)(
 238:../Generated_Code/Cpu.c ****                 PMC_LVDSC1_LVDACK_MASK |
 239:../Generated_Code/Cpu.c ****                 PMC_LVDSC1_LVDRE_MASK
 240:../Generated_Code/Cpu.c ****                ));
 241:../Generated_Code/Cpu.c ****   /* PMC_LVDSC2: LVWACK=1,LVWIE=0,LVWV=0 */
 242:../Generated_Code/Cpu.c ****   PMC_LVDSC2 = (uint8_t)((PMC_LVDSC2 & (uint8_t)~(uint8_t)(
 302              		.loc 1 242 0
 303 003e 2C4B     		ldr	r3, .L10+4
 304 0040 2B4A     		ldr	r2, .L10+4
 305 0042 5278     		ldrb	r2, [r2, #1]
 306 0044 D2B2     		uxtb	r2, r2
 307 0046 D2B2     		uxtb	r2, r2
 308 0048 6321     		mov	r1, #99
 309 004a 8A43     		bic	r2, r1
 310 004c D2B2     		uxtb	r2, r2
 311 004e 4021     		mov	r1, #64
 312 0050 0A43     		orr	r2, r1
 313 0052 D2B2     		uxtb	r2, r2
 314 0054 D2B2     		uxtb	r2, r2
 315 0056 5A70     		strb	r2, [r3, #1]
 243:../Generated_Code/Cpu.c ****                 PMC_LVDSC2_LVWIE_MASK |
 244:../Generated_Code/Cpu.c ****                 PMC_LVDSC2_LVWV(0x03)
 245:../Generated_Code/Cpu.c ****                )) | (uint8_t)(
 246:../Generated_Code/Cpu.c ****                 PMC_LVDSC2_LVWACK_MASK
 247:../Generated_Code/Cpu.c ****                ));
 248:../Generated_Code/Cpu.c ****   /* PMC_REGSC: BGEN=0,ACKISO=0,BGBE=0 */
 249:../Generated_Code/Cpu.c ****   PMC_REGSC &= (uint8_t)~(uint8_t)(
 316              		.loc 1 249 0
 317 0058 254B     		ldr	r3, .L10+4
 318 005a 254A     		ldr	r2, .L10+4
 319 005c 9278     		ldrb	r2, [r2, #2]
 320 005e D2B2     		uxtb	r2, r2
 321 0060 1921     		mov	r1, #25
 322 0062 8A43     		bic	r2, r1
 323 0064 D2B2     		uxtb	r2, r2
 324 0066 9A70     		strb	r2, [r3, #2]
 250:../Generated_Code/Cpu.c ****                 PMC_REGSC_BGEN_MASK |
 251:../Generated_Code/Cpu.c ****                 PMC_REGSC_ACKISO_MASK |
 252:../Generated_Code/Cpu.c ****                 PMC_REGSC_BGBE_MASK
 253:../Generated_Code/Cpu.c ****                );
 254:../Generated_Code/Cpu.c ****   /* SMC_PMPROT: ??=0,??=0,AVLP=0,??=0,ALLS=0,??=0,AVLLS=0,??=0 */
 255:../Generated_Code/Cpu.c ****   SMC_PMPROT = 0x00U;                  /* Setup Power mode protection register */
 325              		.loc 1 255 0
 326 0068 224B     		ldr	r3, .L10+8
 327 006a 0022     		mov	r2, #0
 328 006c 1A70     		strb	r2, [r3]
 256:../Generated_Code/Cpu.c ****   /* Common initialization of the CPU registers */
 257:../Generated_Code/Cpu.c ****   /* PORTA_PCR20: ISF=0,MUX=7 */
 258:../Generated_Code/Cpu.c ****   PORTA_PCR20 = (uint32_t)((PORTA_PCR20 & (uint32_t)~(uint32_t)(
 329              		.loc 1 258 0
 330 006e 224B     		ldr	r3, .L10+12
 331 0070 214A     		ldr	r2, .L10+12
 332 0072 116D     		ldr	r1, [r2, #80]
 333 0074 214A     		ldr	r2, .L10+16
 334 0076 0A40     		and	r2, r1
 335 0078 E021     		mov	r1, #224
 336 007a C900     		lsl	r1, r1, #3
 337 007c 0A43     		orr	r2, r1
 338 007e 1A65     		str	r2, [r3, #80]
 259:../Generated_Code/Cpu.c ****                  PORT_PCR_ISF_MASK
 260:../Generated_Code/Cpu.c ****                 )) | (uint32_t)(
 261:../Generated_Code/Cpu.c ****                  PORT_PCR_MUX(0x07)
 262:../Generated_Code/Cpu.c ****                 ));
 263:../Generated_Code/Cpu.c ****   /* NVIC_IPR1: PRI_6=0 */
 264:../Generated_Code/Cpu.c ****   NVIC_IPR1 &= (uint32_t)~(uint32_t)(NVIC_IP_PRI_6(0xFF));
 339              		.loc 1 264 0
 340 0080 1F4A     		ldr	r2, .L10+20
 341 0082 1F49     		ldr	r1, .L10+20
 342 0084 C123     		mov	r3, #193
 343 0086 9B00     		lsl	r3, r3, #2
 344 0088 C958     		ldr	r1, [r1, r3]
 345 008a 1E4B     		ldr	r3, .L10+24
 346 008c 1940     		and	r1, r3
 347 008e C123     		mov	r3, #193
 348 0090 9B00     		lsl	r3, r3, #2
 349 0092 D150     		str	r1, [r2, r3]
 265:../Generated_Code/Cpu.c ****   /* ### McuLibConfig "MCUC1" init code ... */
 266:../Generated_Code/Cpu.c ****   WAIT1_Init();
 350              		.loc 1 266 0
 351 0094 FFF7FEFF 		bl	WAIT1_Init
 267:../Generated_Code/Cpu.c ****   /* ### BitIO_LDD "BitIoLdd1" component auto initialization. Auto initialization feature can be di
 268:../Generated_Code/Cpu.c ****   (void)BitIoLdd1_Init(NULL);
 352              		.loc 1 268 0
 353 0098 0020     		mov	r0, #0
 354 009a FFF7FEFF 		bl	BitIoLdd1_Init
 269:../Generated_Code/Cpu.c ****   /* ### LED "LEDR" init code ... */
 270:../Generated_Code/Cpu.c ****   LEDR_Init(); /* initialize LED driver */
 355              		.loc 1 270 0
 356 009e FFF7FEFF 		bl	LEDR_Init
 271:../Generated_Code/Cpu.c ****   /* ### BitIO_LDD "BitIoLdd2" component auto initialization. Auto initialization feature can be di
 272:../Generated_Code/Cpu.c ****   (void)BitIoLdd2_Init(NULL);
 357              		.loc 1 272 0
 358 00a2 0020     		mov	r0, #0
 359 00a4 FFF7FEFF 		bl	BitIoLdd2_Init
 273:../Generated_Code/Cpu.c ****   /* ### LED "LEDG" init code ... */
 274:../Generated_Code/Cpu.c ****   LEDG_Init(); /* initialize LED driver */
 360              		.loc 1 274 0
 361 00a8 FFF7FEFF 		bl	LEDG_Init
 275:../Generated_Code/Cpu.c ****   /* ### BitIO_LDD "BitIoLdd3" component auto initialization. Auto initialization feature can be di
 276:../Generated_Code/Cpu.c ****   (void)BitIoLdd3_Init(NULL);
 362              		.loc 1 276 0
 363 00ac 0020     		mov	r0, #0
 364 00ae FFF7FEFF 		bl	BitIoLdd3_Init
 277:../Generated_Code/Cpu.c ****   /* ### LED "LEDB" init code ... */
 278:../Generated_Code/Cpu.c ****   LEDB_Init(); /* initialize LED driver */
 365              		.loc 1 278 0
 366 00b2 FFF7FEFF 		bl	LEDB_Init
 279:../Generated_Code/Cpu.c ****   /* ### BitIO_LDD "BitIoLdd15" component auto initialization. Auto initialization feature can be d
 280:../Generated_Code/Cpu.c ****   (void)BitIoLdd15_Init(NULL);
 367              		.loc 1 280 0
 368 00b6 0020     		mov	r0, #0
 369 00b8 FFF7FEFF 		bl	BitIoLdd15_Init
 281:../Generated_Code/Cpu.c ****   /* ### BitIO_LDD "BitIoLdd4" component auto initialization. Auto initialization feature can be di
 282:../Generated_Code/Cpu.c ****   (void)BitIoLdd4_Init(NULL);
 370              		.loc 1 282 0
 371 00bc 0020     		mov	r0, #0
 372 00be FFF7FEFF 		bl	BitIoLdd4_Init
 283:../Generated_Code/Cpu.c ****   /* ### BitIO_LDD "BitIoLdd5" component auto initialization. Auto initialization feature can be di
 284:../Generated_Code/Cpu.c ****   (void)BitIoLdd5_Init(NULL);
 373              		.loc 1 284 0
 374 00c2 0020     		mov	r0, #0
 375 00c4 FFF7FEFF 		bl	BitIoLdd5_Init
 285:../Generated_Code/Cpu.c ****   /* ### BitIO_LDD "BitIoLdd10" component auto initialization. Auto initialization feature can be d
 286:../Generated_Code/Cpu.c ****   (void)BitIoLdd10_Init(NULL);
 376              		.loc 1 286 0
 377 00c8 0020     		mov	r0, #0
 378 00ca FFF7FEFF 		bl	BitIoLdd10_Init
 287:../Generated_Code/Cpu.c ****   /* ### BitIO_LDD "BitIoLdd11" component auto initialization. Auto initialization feature can be d
 288:../Generated_Code/Cpu.c ****   (void)BitIoLdd11_Init(NULL);
 379              		.loc 1 288 0
 380 00ce 0020     		mov	r0, #0
 381 00d0 FFF7FEFF 		bl	BitIoLdd11_Init
 289:../Generated_Code/Cpu.c ****   /* ### BitIO_LDD "BitIoLdd12" component auto initialization. Auto initialization feature can be d
 290:../Generated_Code/Cpu.c ****   (void)BitIoLdd12_Init(NULL);
 382              		.loc 1 290 0
 383 00d4 0020     		mov	r0, #0
 384 00d6 FFF7FEFF 		bl	BitIoLdd12_Init
 291:../Generated_Code/Cpu.c ****   /* ### BitIO_LDD "BitIoLdd13" component auto initialization. Auto initialization feature can be d
 292:../Generated_Code/Cpu.c ****   (void)BitIoLdd13_Init(NULL);
 385              		.loc 1 292 0
 386 00da 0020     		mov	r0, #0
 387 00dc FFF7FEFF 		bl	BitIoLdd13_Init
 293:../Generated_Code/Cpu.c ****   /* ### LCDHTA "LCD1" init code ... */
 294:../Generated_Code/Cpu.c ****   LCD1_Init(); /* initializes the display driver */
 388              		.loc 1 294 0
 389 00e0 FFF7FEFF 		bl	LCD1_Init
 295:../Generated_Code/Cpu.c ****   __EI();
 390              		.loc 1 295 0
 391              	@ 295 "../Generated_Code/Cpu.c" 1
 392 00e4 62B6     		CPSIE i
 393              	@ 0 "" 2
 296:../Generated_Code/Cpu.c **** }
 394              		.loc 1 296 0
 395              		.code	16
 396 00e6 BD46     		mov	sp, r7
 397              		@ sp needed for prologue
 398 00e8 80BD     		pop	{r7, pc}
 399              	.L11:
 400 00ea C046     		.align	2
 401              	.L10:
 402 00ec 00F00740 		.word	1074262016
 403 00f0 00D00740 		.word	1074253824
 404 00f4 00E00740 		.word	1074257920
 405 00f8 00900440 		.word	1074040832
 406 00fc FFF8FFFE 		.word	-16779009
 407 0100 00E100E0 		.word	-536813312
 408 0104 FFFF00FF 		.word	-16711681
 409              		.cfi_endproc
 410              	.LFE3:
 412              		.global	_cfm
 413              		.section	.cfmconfig,"a",%progbits
 414              		.align	2
 417              	_cfm:
 418 0000 FF       		.byte	-1
 419 0001 FF       		.byte	-1
 420 0002 FF       		.byte	-1
 421 0003 FF       		.byte	-1
 422 0004 FF       		.byte	-1
 423 0005 FF       		.byte	-1
 424 0006 FF       		.byte	-1
 425 0007 FF       		.byte	-1
 426 0008 FF       		.byte	-1
 427 0009 FF       		.byte	-1
 428 000a FF       		.byte	-1
 429 000b FF       		.byte	-1
 430 000c 7E       		.byte	126
 431 000d FB       		.byte	-5
 432 000e FF       		.byte	-1
 433 000f FF       		.byte	-1
 434              		.text
 435              	.Letext0:
 436              		.file 2 "C:/Freescale/CW MCU v10.7/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 437              		.file 3 "C:/Freescale/CW MCU v10.7/MCU/ProcessorExpert/lib/Kinetis/iofiles/MKL25Z4.h"
 438              		.file 4 "../Generated_Code/Cpu.h"
DEFINED SYMBOLS
                            *ABS*:00000000 Cpu.c
                            *COM*:00000001 SR_reg
C:\Users\burak\AppData\Local\Temp\ccAZYzFj.s:22     .bss.SR_lock:00000000 SR_lock
C:\Users\burak\AppData\Local\Temp\ccAZYzFj.s:23     .bss.SR_lock:00000000 $d
C:\Users\burak\AppData\Local\Temp\ccAZYzFj.s:25     .text.Cpu_INT_NMIInterrupt:00000000 $t
C:\Users\burak\AppData\Local\Temp\ccAZYzFj.s:30     .text.Cpu_INT_NMIInterrupt:00000000 Cpu_INT_NMIInterrupt
C:\Users\burak\AppData\Local\Temp\ccAZYzFj.s:53     .text.Cpu_Interrupt:00000000 $t
C:\Users\burak\AppData\Local\Temp\ccAZYzFj.s:58     .text.Cpu_Interrupt:00000000 Cpu_Interrupt
C:\Users\burak\AppData\Local\Temp\ccAZYzFj.s:83     .text.__init_hardware:00000000 $t
C:\Users\burak\AppData\Local\Temp\ccAZYzFj.s:88     .text.__init_hardware:00000000 __init_hardware
C:\Users\burak\AppData\Local\Temp\ccAZYzFj.s:237    .text.__init_hardware:000000e0 $d
C:\Users\burak\AppData\Local\Temp\ccAZYzFj.s:253    .text.PE_low_level_init:00000000 $t
C:\Users\burak\AppData\Local\Temp\ccAZYzFj.s:258    .text.PE_low_level_init:00000000 PE_low_level_init
C:\Users\burak\AppData\Local\Temp\ccAZYzFj.s:402    .text.PE_low_level_init:000000ec $d
C:\Users\burak\AppData\Local\Temp\ccAZYzFj.s:417    .cfmconfig:00000000 _cfm
C:\Users\burak\AppData\Local\Temp\ccAZYzFj.s:414    .cfmconfig:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
Cpu_OnNMIINT
__vect_table
WAIT1_Init
BitIoLdd1_Init
LEDR_Init
BitIoLdd2_Init
LEDG_Init
BitIoLdd3_Init
LEDB_Init
BitIoLdd15_Init
BitIoLdd4_Init
BitIoLdd5_Init
BitIoLdd10_Init
BitIoLdd11_Init
BitIoLdd12_Init
BitIoLdd13_Init
LCD1_Init
